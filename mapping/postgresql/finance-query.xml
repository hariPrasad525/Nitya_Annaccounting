<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.vimukti.accounter.core">


	<!-- QUERIES FOR DAOs -->
	<!-- To generate the Bills list which includes Enter Bills, Vendor Credit 
		Memos, Cash Purchases, Credit Card Charges and Write Checks which are created 
		for Vendor -->

	<sql-query name="getMoneyOutOnDate">
		<query-param name="date" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="AMOUNT" type="double" />
		
		<![CDATA[
				SELECT Abs(SUM(AT.AMOUNT)) AS AMOUNT
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON CP.ID = T.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON CCC.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON CR.ID = T.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON PB.ID = T.ID
				       LEFT OUTER JOIN PAY_TAX PST
				         ON PST.ID = T.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON WC.ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = CP.PAYFROM_ACCOUNT_ID
				             OR A.ID = CCC.PAYFROM_ACCOUNT_ID
				             OR A.ID = CR.PAYFROM_ACCOUNT_ID
				             OR A.ID = PB.PAYFROM_ID
				             OR A.ID = PST.PAYFROM_ACCOUNT_ID
				             OR A.ID = WC.ACCOUNT_ID
				       LEFT OUTER JOIN ACCOUNT_TRANSACTION AT
				         ON AT.ACCOUNT_ID = A.ID
				WHERE  T.COMPANY_ID = :companyId
				       AND AT.TRANSACTION_ID = T.ID
				       AND T.T_TYPE IN ( 2, 3, 5, 11,
				                         15, 17 )
				       AND T.T_DATE = :date
				GROUP  BY A.ID  
				]]>

	</sql-query>

	<sql-query name="getMoneyInForDates">

		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="AMOUNT" type="double" />
		
		<![CDATA[
				SELECT Abs(SUM(AT.AMOUNT)) AS AMOUNT
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
				         ON CPP.ID = T.ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON RP.ID = T.ID
				       LEFT OUTER JOIN RECEIVE_VAT RV
				         ON RV.ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = CS.DEPOSIT_IN_ACCOUNT_ID
				             OR A.ID = CPP.DEPOSITIN_ID
				             OR A.ID = RP.ACCOUNT_ID
				             OR A.ID = RV.DEPOSIT_IN_ACCOUNT_ID
				       LEFT OUTER JOIN ACCOUNT_TRANSACTION AT
				         ON AT.ACCOUNT_ID = A.ID
				WHERE  T.COMPANY_ID = :companyId
				       AND AT.TRANSACTION_ID = T.ID
				       AND T.T_TYPE IN ( 1, 12, 29, 31 )
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				GROUP  BY A.ID  
				]]>

	</sql-query>

	<sql-query name="getEstimatesAndSalesOrdersList">
		<query-param name="customerId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="REMAINING_TOTAL" type="double" />
		<return-scalar column="ESTIMATE_TYPE" type="int" />
		<return-scalar column="STATUS" type="int" />
		
		<![CDATA[
				SELECT T.STATUS                                        AS STATUS,
				       T.ID                                            AS TRANSACTION_ID,
				       T.T_TYPE                                        AS TRANSACTION_TYPE,
				       T.NUMBER                                        AS TRANSACTION_NUMBER,
				       T.TOTAL                                         AS ORIGINAL_AMOUNT,
				       T.T_DATE                                        AS TRANSACTION_DATE,
				       P.NAME                                          AS CUSTOMER_NAME,
				       E.ESTIMATETYPE                                  AS ESTIMATE_TYPE,
				       ( T.TOTAL - (SELECT SUM(TI.INVOICED + ( TI.VAT_FRACTION * (
				                                               TI.INVOICED / TI.LINE_TOTAL ) ))
				                    FROM   TRANSACTION_ITEM TI
				                    WHERE  TI.TRANSACTION_ID = T.ID AND TI.LINE_TOTAL !=0) ) AS REMAINING_TOTAL
				FROM   TRANSACTION T
				       LEFT OUTER JOIN COMPANY C
				         ON C.ID = :companyId
				       LEFT OUTER JOIN ESTIMATE E
				         ON T.ID = E.ID
				            AND T.STATUS IN ( 0, 2 )
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = E.CUSTOMER_ID
				WHERE  T.T_TYPE = 7
				       AND P.ID = :customerId
				       AND T.COMPANY_ID = :companyId
				       AND T.SAVE_STATUS NOT IN ( 202, 201, 204 )
				ORDER  BY T.T_DATE  
				]]>

	</sql-query>

	<sql-query name="getPurchasesAndItemReceipts">
		<query-param name="vendorId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="REMAINING_TOTAL" type="double" />
		
		<![CDATA[
							SELECT T.ID                                            AS TRANSACTION_ID, 
			       T.T_TYPE                                        AS TRANSACTION_TYPE, 
			       T.NUMBER                                        AS TRANSACTION_NUMBER, 
			       T.TOTAL                                         AS ORIGINAL_AMOUNT, 
			       T.T_DATE                                        AS TRANSACTION_DATE, 
			       P.NAME                                          AS VENDOR_NAME, 
			       ( T.TOTAL - (SELECT SUM(TI.INVOICED + ( TI.VAT_FRACTION * ( CASE 
			                                                                     WHEN 
			                                                 TI.LINE_TOTAL = 0 THEN 0 
			                                                                     ELSE 
			                                                           TI.INVOICED / 
			                                                           TI.LINE_TOTAL 
			                                                                   END ) )) 
			                    FROM   TRANSACTION_ITEM TI 
			                    WHERE  TI.TRANSACTION_ID = T.ID) ) AS REMAINING_TOTAL 
			FROM   TRANSACTION T 
			       LEFT OUTER JOIN PURCHASE_ORDER PO 
			         ON T.ID = PO.ID 
			       LEFT OUTER JOIN PAYEE P 
			         ON P.ID = PO.VENDOR_ID 
			WHERE  T.STATUS !=2 
			       AND T.STATUS !=102 
			       AND T.STATUS != 103 
			       AND T.T_TYPE IN ( 22, 23 ) 
			       AND T.SAVE_STATUS != 202 
			       AND P.ID = :vendorId 
			       AND T.COMPANY_ID = :companyId 
			       AND T.SAVE_STATUS != 202 
			       AND T.SAVE_STATUS != 204 
			       AND T.SAVE_STATUS != 201 
			ORDER  BY T.T_DATE 
				]]>

	</sql-query>

	<sql-query name="getPurchaseOrdersList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="toDay" type="long" />
		<query-param name="type" type="int" />
		<query-param name="needBaseCurrency" type="boolean" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY" type="long" />
		
		<![CDATA[
				SELECT T.ID             AS TRANSACTION_ID,
				       T.T_TYPE         AS TRANSACTION_TYPE,
				       T.NUMBER         AS TRANSACTION_NUMBER,
				       CASE WHEN :needBaseCurrency = TRUE
				       THEN  T.TOTAL * T.CURRENCY_FACTOR
				       ELSE 
				       T.TOTAL END AS ORIGINAL_AMOUNT,
				       PO.DELIVERY_DATE AS TRANSACTION_DATE,
				       P.NAME           AS VENDOR_NAME,
				       T.STATUS         AS TRANSACTION_STATUS,
				       T.CURRENCY       AS CURRENCY
				FROM   TRANSACTION T
				       LEFT OUTER JOIN PURCHASE_ORDER PO
				         ON T.ID = PO.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = PO.VENDOR_ID
				WHERE  T.T_TYPE = 22
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND (CASE 
			               WHEN :type = -1 THEN TRUE 
			               WHEN :type = -2 THEN T.SAVE_STATUS != 204 
			               WHEN :type = 6 THEN PO.DELIVERY_DATE < :toDay 
			                                   AND T.STATUS != 102 
			                                   AND T.SAVE_STATUS != 204 
			               WHEN T.STATUS = :type THEN T.SAVE_STATUS != 201 
			                                          AND T.SAVE_STATUS != 204 
			               ELSE T.SAVE_STATUS = :type 
			             END)
				       AND T.SAVE_STATUS != 202
				ORDER  BY T.T_DATE DESC, T.NUMBER DESC
				]]>

	</sql-query>

	<sql-query name="getNotReceivedPurchaseOrdersList">
		<query-param name="vendorId" type="Long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT T.ID     AS TRANSACTION_ID,
				       T.T_TYPE AS TRANSACTION_TYPE,
				       T.NUMBER AS TRANSACTION_NUMBER,
				       T.TOTAL  AS ORIGINAL_AMOUNT,
				       T.T_DATE AS TRANSACTION_DATE,
				       P.NAME   AS VENDOR_NAME
				FROM   TRANSACTION T
				       LEFT OUTER JOIN PURCHASE_ORDER PO
				         ON T.ID = PO.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = PO.VENDOR_ID
				WHERE  T.STATUS !=2
				       AND T.STATUS !=102
				       AND T.T_TYPE = 22
				       AND T.SAVE_STATUS != 202
				       AND P.ID = :vendorId
				       AND T.COMPANY_ID = :companyId
				ORDER  BY T.T_DATE  
				]]>

	</sql-query>

	<sql-query name="getBillsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="todayDate" type="long" />
		<query-param name="viewType" type="int" />

		<query-param name="transactionType" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		<return-scalar column="STATEMENT_RECORD_ID" type="int" />
		<return-scalar column="C_NAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS         AS SAVE_STATUS,
				       T.CURRENCY            AS CURRENCY,
				       T.ID                  AS TRANSACTION_ID,
				       T.T_TYPE              AS TRANSACTION_TYPE,
				       CASE
				         WHEN T.T_TYPE = 6 THEN EB.DUE_DATE
				         WHEN T.T_TYPE = 23 THEN IR.DUE_DATE
				         ELSE NULL
				       END                   AS DUE_DATE,
				       T.NUMBER              AS TRANSACTION_NUMBER,
				       T.STATEMENT_RECORD_ID AS STATEMENT_RECORD_ID,
				       CASE
				         WHEN T.T_TYPE = 28 THEN NULL
				         ELSE P.NAME
				       END                   AS VENDOR_NAME,
				       T.TOTAL               AS ORIGINAL_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 6 THEN EB.BALANCE_DUE
				         WHEN T.T_TYPE = 14 THEN VCM.BALANCE_DUE
				         WHEN T.T_TYPE = 23 THEN IR.BALANCE_DUE
				         ELSE NULL
				       END                   AS BALANCE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                   AS ISVOIDED,
				       T.STATUS              AS TRANSACTION_STATUS,
				       T.T_DATE              AS TRANSACTION_DATE,
				       CASE
				         WHEN T.T_TYPE = 28 THEN CP.EXPENSE_STATUS
				         ELSE 0
				       END                   AS EXPENSE_STATUS,
				       C.FULL_NAME           AS C_NAME
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN ITEM_RECEIPT IR
				         ON T.ID = IR.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = EB.VENDOR_ID
				             OR V.ID = VCM.VENDOR_ID
				             OR V.ID = CP.VENDOR_ID
				             OR V.ID = CCC.VENDOR_ID
				             OR V.ID = IR.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				       LEFT OUTER JOIN USERS U
				         ON U.ID = CP.EMPLOYEE
				       LEFT OUTER JOIN CLIENT C
				         ON C.ID = U.CLIENT_ID
				WHERE  CASE
				         WHEN :transactionType = 0 THEN T.T_TYPE IN ( 2, 3, 6, 14,
				                                                      23, 26, 27, 28 )
				         ELSE T.T_TYPE = :transactionType
				       END
				       AND CASE
				             WHEN 1 = :viewType THEN ( CASE
				                                         WHEN :transactionType = 0 THEN (
				                                         IR.BALANCE_DUE > 0.0
				                                          OR EB.BALANCE_DUE > 0.0
				                                          OR VCM.BALANCE_DUE > 230.0 )
				                                         ELSE TRUE
				                                       END )
				                                     AND T.SAVE_STATUS !=204
				                                     AND T.SAVE_STATUS!=201
				             WHEN 2 = :viewType THEN ( CASE
				                                         WHEN :transactionType = 0 THEN ( (
				                                         :todayDate > EB.DUE_DATE
				                                          OR :todayDate > IR.DUE_DATE )
				                                                                          AND
				                                         ( CASE
				                                             WHEN T.T_TYPE = 6 THEN
				                                             EB.BALANCE_DUE > 0
				                                             ELSE ( IR.BALANCE_DUE > 0.0
				                                                     OR VCM.BALANCE_DUE > 0.0 )
				                                           END ) )
				                                         ELSE TRUE
				                                       END )
				                                     AND ( T.SAVE_STATUS !=204
				                                           AND T.SAVE_STATUS!=201 )
				             WHEN 3 = :viewType THEN T.SAVE_STATUS = 204
				             WHEN 4 = :viewType THEN ( T.SAVE_STATUS = 201 )
				             ELSE TRUE
				           END
				       AND T.COMPANY_ID = :companyId
				       AND T.SAVE_STATUS != 202
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				ORDER  BY T.T_DATE DESC, T.NUMBER DESC,VENDOR_NAME  
				]]>

	</sql-query>

	<sql-query name="getAllInvoicesList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT T.CURRENCY   AS CURRENCY_ID,
				       T.ID         AS TRANSACTION_ID,
				       T.T_TYPE     AS TRANSACTION_TYPE,
				       T.T_DATE     AS TRANSACTION_DATE,
				       T.NUMBER     TRANSACTION_NUMBER,
				       P.NAME       AS CUSTOMER_NAME,
				       T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         ELSE NULL
				       END          AS DUE_DATE,
				       T.TOTAL      AS TOTAL_PRICE,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.BALANCE_DUE
				         ELSE 0.0
				       END          AS BALANCE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END          AS ISVOIDED,
				       T.STATUS     AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = I.CUSTOMER_ID
				             OR C.ID = CS.CUSTOMER_ID
				             OR C.ID = CCM.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE IN( 1, 4, 8 )
				       AND T.SAVE_STATUS != 202
				ORDER  BY DUE_DATE  
				]]>

	</sql-query>

	<!-- To generate the Invoices List which includes Cash Sales, Customer Credit 
		Memos, Invoices and Write Checks -->
	<sql-query name="getInvoicesList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<query-param name="todayDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		<return-scalar column="STATEMENT_RECORD_ID" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS         AS SAVE_STATUS,
				       T.CURRENCY            AS CURRENCY_ID,
				       T.ID                  AS TRANSACTION_ID,
				       T.T_TYPE              AS TRANSACTION_TYPE,
				       T.T_DATE              AS TRANSACTION_DATE,
				       T.NUMBER              TRANSACTION_NUMBER,
				       P.NAME                AS CUSTOMER_NAME,
				       T.NET_AMOUNT          AS TRANSACTION_NET_AMOUNT,
				       T.STATEMENT_RECORD_ID AS STATEMENT_RECORD_ID,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         ELSE NULL
				       END                   AS DUE_DATE,
				       T.TOTAL               AS TOTAL_PRICE,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.BALANCE_DUE
				         WHEN T.T_TYPE = 4 THEN CCM.BALANCE_DUE
				         ELSE 0.0
				       END                   AS BALANCE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                   AS ISVOIDED,
				       T.STATUS              AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = I.CUSTOMER_ID
				             OR C.ID = CS.CUSTOMER_ID
				             OR C.ID = CCM.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE IN( 1, 4, 8 )
				       AND CASE
				             WHEN 1 = :viewType THEN ( I.BALANCE_DUE > 0.0
				                                       AND T.STATUS != 2
				                                       AND T.SAVE_STATUS !=204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 2 = :viewType THEN ( I.BALANCE_DUE > 0.0
				                                       AND I.DUE_DATE < :todayDate
				                                       AND T.SAVE_STATUS !=204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 3 = :viewType THEN ( T.SAVE_STATUS = 204 )
				             WHEN 4 = :viewType THEN ( T.SAVE_STATUS = 201 )
				             ELSE TRUE
				           END
				       AND T.COMPANY_ID = :companyId
				       AND T.SAVE_STATUS !=202
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				ORDER  BY T.T_DATE DESC,T.NUMBER DESC
				]]>

	</sql-query>

	<sql-query name="getAllCustomersPaymentsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD_NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="IS_VOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="STATEMENT_RECORD_ID" type="int" />
		
		<![CDATA[
				SELECT T.ID                  AS TRANSACTION_ID,
				       T.T_TYPE              AS TRANSACTION_TYPE,
				       T.T_DATE              AS TRANSACTION_DATE,
				       T.NUMBER              AS TRANSACTION_NUMBER,
				       P.NAME                AS CUSTOMER_NAME,
				       T.PAYMENT_METHOD      AS PAYMENT_METHOD_NAME,
				       T.TOTAL               AS AMOUNT,
				       T.STATEMENT_RECORD_ID AS STATEMENT_RECORD_ID,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                   AS IS_VOIDED,
				       T.STATUS              AS TRANSACTION_STATUS,
				       CASE
				         WHEN T.T_TYPE = 12 THEN RP.CHECK_NUMBER
				         ELSE CP.CHECK_NUMBER
				       END                   AS CHECK_NUMBER,
				       T.CURRENCY            AS CURRENCY,
				       T.SAVE_STATUS         AS SAVE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = RP.CUSTOMER_ID
				             OR C.ID = CP.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE IN( 12, 29 )
				       AND CASE
				             WHEN 2 = :viewType THEN ( T.SAVE_STATUS != 204 )
				             WHEN 3 = :viewType THEN T.SAVE_STATUS = 204
				             ELSE TRUE
				           END
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				ORDER BY T.T_DATE DESC, T.NUMBER DESC  
				]]>

	</sql-query>

	<!-- To generate the Payments List which Includes Cash Purchases, Credit 
		Card Charges, Customer Refunds,PayBills and Write Checks -->
	<sql-query name="getPaymentsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="PAYMENT_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="ISSUE_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="AMOUNT_PAID" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.ID             AS TRANSACTION_ID,
				       T.T_TYPE         AS TRANSACTION_TYPE,
				       T.T_DATE         AS PAYMENT_DATE,
				       T.NUMBER         AS TRANSACTION_NUMBER,
				       T.STATUS         AS TRANSACTION_STATUS,
				       T.T_DATE         AS ISSUE_DATE,
				       CASE
				         WHEN T.T_TYPE = 5
				               OR T.T_TYPE = 2
				               OR T.T_TYPE = 3
				               OR T.T_TYPE = 11
				               OR T.T_TYPE = 25 THEN P.NAME
				         WHEN T.T_TYPE = 15 THEN WC.IN_FAVOUR_OF
				         WHEN T.T_TYPE = 17 THEN NULL
				         WHEN T.T_TYPE = 30
				               OR T.T_TYPE = 31 THEN NULL
				       END              AS NAME,
				       T.PAYMENT_METHOD AS PAYMENT_METHOD,
				       CASE
				         WHEN T.T_TYPE = 2
				               OR T.T_TYPE = 3
				               OR T.T_TYPE = 11
				               OR T.T_TYPE = 25
				               OR T.T_TYPE = 15
				               OR T.T_TYPE = 5 THEN T.TOTAL
				         WHEN T.T_TYPE = 17 THEN (SELECT ( SUM(TPV1.AMOUNT_TO_PAY) )
				                                  FROM   PAY_TAX PV1
				                                         LEFT OUTER JOIN TRANSACTION_PAY_TAX
				                                                         TPV1
				                                           ON PV1.ID = TPV1.PAY_TAX_ID
				                                  WHERE  PV1.ID = T.ID) / T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 31 THEN (SELECT ( SUM(TRV1.AMOUNT_TO_RECEIVE) )
				                                  FROM   RECEIVE_VAT RV1
				                                         LEFT OUTER JOIN TRANSACTION_RECEIVE_VAT
				                                                         TRV1
				                                           ON RV1.ID = TRV1.RECEIVE_VAT_ID
				                                  WHERE  RV1.ID = T.ID) / T.CURRENCY_FACTOR
				       END              AS AMOUNT_PAID,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END              AS ISVOIDED,
				       CASE
				         WHEN T.T_TYPE = 2 THEN CP.CHECK_NUMBER
				         WHEN T.T_TYPE = 3 THEN CCC.CHECK_NUMBER
				         WHEN T.T_TYPE = 5 THEN CR.CHECK_NUMBER
				         WHEN T.T_TYPE = 11 THEN PB.CHECK_NUMBER
				         WHEN T.T_TYPE = 15 THEN WC.CHECK_NUMBER
				       END              AS CHECK_NUMBER,
				       T.CURRENCY       AS CURRENCY,
				       T.SAVE_STATUS    AS SAVE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT OUTER JOIN PAY_TAX PV
				         ON T.ID = PV.ID
				       LEFT OUTER JOIN TRANSACTION_PAY_TAX TPV
				         ON TPV.ID = PV.ID
				       LEFT OUTER JOIN RECEIVE_VAT RV
				         ON T.ID = RV.ID
				       LEFT OUTER JOIN TRANSACTION_RECEIVE_VAT TRV
				         ON TRV.ID = RV.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON T.ID = CR.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN PAY_TAX PST
				         ON T.ID = PST.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CR.CUSTOMER_ID
				             OR C.ID = WC.CUSTOMER_ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				             OR V.ID = CCC.VENDOR_ID
				             OR V.ID = PB.VENDOR_ID
				             OR V.ID = VP.VENDOR_ID
				             OR V.ID = WC.VENDOR_ID
				       LEFT OUTER JOIN TAXAGENCY TG
				         ON TG.ID = WC.TAX_AGENCY_ID
				             OR TG.ID = PST.TAX_AGENCY_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				             OR P.ID = V.ID
				             OR P.ID = TG.ID
				WHERE  T.T_TYPE IN ( 2, 3, 5, 11,
				                     15, 17, 30, 31, 25 )
				       AND CASE
				             WHEN 0 = :viewType THEN ( ( T.STATUS = 0
				                                          OR T.STATUS = 1 )
				                                       AND T.SAVE_STATUS != 204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 2 = :viewType THEN ( T.STATUS = 2
				                                       AND T.SAVE_STATUS != 204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 3 = :viewType THEN ( T.SAVE_STATUS = 204 )
				             WHEN 4 = :viewType THEN ( T.SAVE_STATUS = 201 )
				             ELSE TRUE
				           END
				       AND T.COMPANY_ID = :companyId
				       AND T.SAVE_STATUS != 202
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				 ORDER  BY T.T_DATE DESC, T.NUMBER DESC        
				]]>

	</sql-query>

	<!-- To generate the Vendor Payments List which Includes PayBills and Write 
		Checks created for Vendors -->
	<sql-query name="getVendorPaymentsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="PAYMENT_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="ISSUE_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="AMOUNT_PAID" type="double" />
		<return-scalar column="VOIDED" type="boolean" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		<return-scalar column="STATEMENT_RECORD_ID" type="int" />
		
		<![CDATA[
				SELECT T.ID                  AS TRANSACTION_ID,
				       T.T_TYPE              AS TRANSACTION_TYPE,
				       T.T_DATE              AS PAYMENT_DATE,
				       T.NUMBER              AS TRANSACTION_NUMBER,
				       T.STATEMENT_RECORD_ID AS STATEMENT_RECORD_ID,
				       T.STATUS              AS TRANSACTION_STATUS,
				       T.T_DATE              AS ISSUE_DATE,
				       CASE
				         WHEN T.T_TYPE = 15 THEN WC.IN_FAVOUR_OF
				         WHEN T.T_TYPE = 17 THEN NULL
				         WHEN T.T_TYPE = 25 THEN P.NAME
				         WHEN T.T_TYPE = 11 THEN P.NAME
				       END                   AS NAME,
				       T.PAYMENT_METHOD      AS PAYMENT_METHOD,
				       CASE
				         WHEN T.T_TYPE = 11 THEN T.TOTAL - PB.TDS_TOTAL
				         ELSE T.TOTAL
				       END                   AS AMOUNT_PAID,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                   AS VOIDED,
				       CASE
				         WHEN T.T_TYPE = 11 THEN PB.CHECK_NUMBER
				         WHEN T.T_TYPE = 25 THEN VP.CHECK_NUMBER
				         WHEN T.T_TYPE = 15 THEN WC.CHECK_NUMBER
				       END                   AS CHECK_NUMBER,
				       T.CURRENCY            AS CURRENCY,
				       T.SAVE_STATUS         AS SAVE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				            AND WC.PAY_TO_TYPE IN ( 2, 3 )
				       LEFT OUTER JOIN PAY_TAX PST
				         ON T.ID = PST.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = PB.VENDOR_ID
				             OR V.ID = WC.VENDOR_ID
				             OR V.ID = VP.VENDOR_ID
				       LEFT OUTER JOIN TAXAGENCY TA
				         ON TA.ID = PB.VENDOR_ID
				             OR TA.ID = VP.VENDOR_ID
				             OR TA.ID = WC.VENDOR_ID
				             OR TA.ID = WC.TAX_AGENCY_ID
				             OR TA.ID = PST.TAX_AGENCY_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				             OR P.ID = TA.ID
				WHERE  T.T_TYPE IN( 11, 15, 17, 25 )
				       AND NAME IS NOT NULL
				       AND CASE
				             WHEN 2 = :viewType THEN ( T.STATUS = 2
				                                       AND T.SAVE_STATUS != 204 )
				             WHEN 0 = :viewType THEN( T.STATUS = 0
				                                      AND T.SAVE_STATUS != 204 )
				             WHEN 3 = :viewType THEN ( T.SAVE_STATUS = 204 )
				             ELSE TRUE
				           END
				       AND T.COMPANY_ID = :companyId
				       AND T.SAVE_STATUS != 202
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				ORDER  BY T.T_DATE DESC, T.NUMBER DESC
				]]>

	</sql-query>

	<!-- To retrieve the Enter Bills and MakeDeposits Vendor Entry Transasctions 
		of all Vendors which are not paid OR partially paid, while creating Pay Bill -->
	<sql-query name="getPayBillTransactionsList">
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="AMOUNT_DUE" type="double" />
		<return-scalar column="PAYMENTS" type="double" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		
		<![CDATA[
				SELECT CASE
				         WHEN T.T_TYPE = 6 THEN T.ID
				       END                                    AS ID,
				       T.T_TYPE                               AS TRANSACTION_TYPE,
				       CASE
				         WHEN T.T_TYPE = 6 THEN EB.DUE_DATE
				         ELSE NULL
				       END                                    AS DUE_DATE,
				       (SELECT P.NAME
				        FROM   PAYEE P
				        WHERE  P.ID = EB.VENDOR_ID
				               AND P.COMPANY_ID = :companyId) AS VENDOR_NAME,
				       T.NUMBER                               AS TRANSACTION_NUMBER,
				       CASE
				         WHEN T.T_TYPE = 6 THEN T.TOTAL
				       END                                    AS ORIGINAL_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 6 THEN EB.BALANCE_DUE
				       END                                    AS AMOUNT_DUE,
				       CASE
				         WHEN T.T_TYPE = 6 THEN EB.PAYMENTS
				       END                                    AS PAYMENTS,
				       T.PAYMENT_METHOD                       AS PAYMENT_METHOD
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN TRANSFER_FUND TF
				         ON T.ID = TF.ID
				WHERE  T.T_TYPE IN ( 6, 10 )
				       AND T.SAVE_STATUS != 202
				       AND ( EB.BALANCE_DUE > 0.0 )
				       AND T.COMPANY_ID = :companyId  
				ORDER BY T.T_DATE, T.ID
				]]>

	</sql-query>

	<!-- To retrieve the Enter Bills and MakeDeposits Vendor Entry Transasctions 
		of corresponding Vendors which are not paid OR partially paid, while creating 
		Pay Bill -->
	<sql-query name="getPayBillTransactionsListForVendor">
		<query-param name="vendorId" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="paymentDate" type="long" />

		<return-scalar column="ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="AMOUNT_DUE" type="double" />
		<return-scalar column="PAYMENTS" type="double" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="DISCOUNT_DATE" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="IS_DATE_DRIVEN" type="boolean" />
		<return-scalar column="PAID_WITHIN" type="int" />
		<return-scalar column="DISCOUNT" type="double" />
		
		<![CDATA[
				SELECT CASE
				         WHEN T.T_TYPE = 6 THEN T.ID
				       END                                    AS ID,
				       T.T_TYPE                               AS TRANSACTION_TYPE,
				       CASE
				         WHEN T.T_TYPE = 6 THEN EB.DUE_DATE
				         ELSE NULL
				       END                                    AS DUE_DATE,
				       (SELECT P.NAME
				        FROM   PAYEE P
				        WHERE  P.ID = EB.VENDOR_ID
				               AND P.COMPANY_ID = :companyId) AS VENDOR_NAME,
				       T.NUMBER                               AS TRANSACTION_NUMBER,
				       CASE
				         WHEN T.T_TYPE = 6 THEN T.TOTAL
				       END                                    AS ORIGINAL_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 6 THEN EB.BALANCE_DUE
				       END                                    AS AMOUNT_DUE,
				       CASE
				         WHEN T.T_TYPE = 6 THEN EB.PAYMENTS
				       END                                    AS PAYMENTS,
				       T.PAYMENT_METHOD                       AS PAYMENT_METHOD,
				       CASE
				         WHEN T.T_TYPE = 6 THEN EB.DISCOUNT_DATE
				         ELSE NULL
				       END                                    AS DISCOUNT_DATE,
				       T.T_DATE                               AS TRANSACTION_DATE,
				       PT.IS_DATE_DRIVEN                      AS IS_DATE_DRIVEN,
				       PT.IF_PAID_WITHIN                      AS PAID_WITHIN,
				       PT.DISCOUNT_PERCENT                    AS DISCOUNT
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN TRANSFER_FUND TF
				         ON T.ID = TF.ID
				       LEFT JOIN PAYMENTTERMS PT
				         ON PT.ID = EB.PAYMENT_TERM_ID
				WHERE  T.T_TYPE IN ( 6, 10 )
				       AND T.SAVE_STATUS != 202
				       AND T.T_DATE <= :paymentDate
				       AND ( EB.BALANCE_DUE > 0.0 )
				       AND ( EB.VENDOR_ID = :vendorId )
				       AND T.COMPANY_ID = :companyId  
				ORDER BY T.T_DATE, T.ID
				]]>

	</sql-query>

	<!-- To retrieve the Invoices and Customer Refunds of corresponding customers 
		which are not paid OR partially paid, while creating Receive Payment -->
	<sql-query name="getReceivePaymentTransactionsListForCustomer">
		<query-param name="customerId" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="paymentDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="INVOICE_AMOUNT" type="double" />
		<return-scalar column="AMOUNT_DUE" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="PAYMENTS" type="double" />
		<return-scalar column="IS_DATE_DRIVEN" type="boolean" />
		<return-scalar column="PAID_WITHIN" type="int" />
		<return-scalar column="DISCOUNT_PERC" type="double" />
		
		<![CDATA[
				SELECT T.ID                AS TRANSACTION_ID,
				       T.T_TYPE            AS TRANSACTION_TYPE,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         ELSE T.T_DATE
				       END                 AS DUE_DATE,
				       T.NUMBER            AS TRANSACTION_NUMBER,
				       T.TOTAL             AS INVOICE_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 5 THEN CR.BALANCE_DUE
				         WHEN T.T_TYPE = 8 THEN ( I.BALANCE_DUE )
				       END                 AS AMOUNT_DUE,
				       T.T_DATE            AS TRANSACTION_DATE,
				       CASE
				         WHEN T.T_TYPE = 5 THEN CR.PAYMENTS
				         WHEN T.T_TYPE = 8 THEN ( I.PAYMENTS )
				       END                 AS PAYMENTS,
				       PT.IS_DATE_DRIVEN   AS IS_DATE_DRIVEN,
				       PT.IF_PAID_WITHIN   AS PAID_WITHIN,
				       PT.DISCOUNT_PERCENT AS DISCOUNT_PERC
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON T.ID = CR.ID
				       LEFT OUTER JOIN PAYMENTTERMS PT
				         ON PT.ID = I.PAYMENT_TERMS_ID
				WHERE  T.T_TYPE IN ( 5, 8 )
				       AND T.SAVE_STATUS != 202
				       AND T.T_DATE <= :paymentDate
				       AND ( I.BALANCE_DUE > 0.0
				              OR CR.BALANCE_DUE > 0.0 )
				       AND ( I.CUSTOMER_ID = :customerId
				              OR CR.CUSTOMER_ID = :customerId )
				       AND T.SAVE_STATUS = 203
				       AND T.COMPANY_ID = :companyId  
				ORDER BY T.T_DATE, T.ID
				]]>

	</sql-query>

	<!-- To generate the Invoices of Latest 10 -->
	<sql-query name="getLatestOverDueInvoices">
		<query-param name="companyId" type="long" />

		<return-scalar column="transaction_id" type="encryptedstring" />
		<return-scalar column="due_date" type="long" />
		<return-scalar column="name" type="encryptedstring" />
		<return-scalar column="number" type="encryptedstring" />
		<return-scalar column="total" type="double" />
		<return-scalar column="payment" type="double" />
		<return-scalar column="balance_due" type="double" />
		
		<![CDATA[
				SELECT T.ID          AS TRANSACTION_ID,
				       I.DUE_DATE    AS DUE_DATE,
				       P.NAME        AS NAME,
				       T.NUMBER      AS NUMBER,
				       T.TOTAL       AS TOTAL,
				       I.PAYMENTS    AS PAYMENT,
				       I.BALANCE_DUE AS BALANCE_DUE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON I.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON I.CUSTOMER_ID = C.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  I.BALANCE_DUE > 0.0
				       AND I.DUE_DATE <= CURRENT_DATE
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				ORDER  BY T.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<sql-query name="getLatestInvoices">
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT T.CURRENCY   AS CURRENCY_ID,
				       T.ID         TRANSACTION_ID,
				       T.T_TYPE     AS TRANSACTION_TYPE,
				       T.T_DATE     AS DATE,
				       T.NUMBER     AS TRANSACTION_NUMBER,
				       P.NAME       AS CUSTOMER_NAME,
				       T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				       END          AS DUE_DATE,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 4
				               OR T.T_TYPE = 15 THEN T.TOTAL
				         WHEN T.T_TYPE = 15 THEN WC.AMOUNT
				       END          AS TOTAL_PRICE,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.BALANCE_DUE
				         WHEN T.T_TYPE = 15 THEN WC.BALANCE
				         ELSE NULL
				       END          AS BALANCE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = I.CUSTOMER_ID
				             OR C.ID = CS.CUSTOMER_ID
				             OR C.ID = CCM.CUSTOMER_ID
				             OR C.ID = WC.CUSTOMER_ID
				                AND WC.CUSTOMER_ID IS NOT NULL
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE IN( 1, 4, 8, 15 )
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				ORDER  BY T.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Vendor Payments of Latest 10 -->
	<sql-query name="getLatestVendorPayments">
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="PAYMENT_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="ISSUE_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="AMOUNT_PAID" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		
		<![CDATA[
				SELECT T.ID             AS TRANSACTION_ID,
				       T.T_TYPE         AS TRANSACTION_TYPE,
				       T.T_DATE         AS PAYMENT_DATE,
				       T.NUMBER         AS TRANSACTION_NUMBER,
				       T.STATUS         AS TRANSACTION_STATUS,
				       T.T_DATE         AS ISSUE_DATE,
				       CASE
				         WHEN T.T_TYPE = 15 THEN WC.IN_FAVOUR_OF
				         ELSE P.NAME
				       END              AS NAME,
				       T.PAYMENT_METHOD AS PAYMENT_METHOD,
				       T.TOTAL          AS AMOUNT_PAID,
				       T.CURRENCY       AS CURRENCY
				FROM   TRANSACTION T
				       LEFT OUTER JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = PB.VENDOR_ID
				             OR V.ID = WC.VENDOR_ID
				             OR V.ID = VP.VENDOR_ID
				       LEFT OUTER JOIN TAXAGENCY TA
				         ON TA.ID = PB.VENDOR_ID
				             OR TA.ID = WC.VENDOR_ID
				             OR TA.ID = VP.VENDOR_ID
				       LEFT JOIN PAYEE P
				         ON P.ID = V.ID
				             OR P.ID = TA.ID
				WHERE  T.T_TYPE IN( 11, 15, 25 )
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				ORDER  BY T.ID DESC
				LIMIT  10  	
				]]>

	</sql-query>

	<!-- To generate the Bills of Latest 10 -->
	<sql-query name="getLatestBills">
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		
		<![CDATA[
				SELECT T.CURRENCY AS CURRENCY,
				       T.ID       AS TRANSACTION_ID,
				       T.T_TYPE   AS TRANSACTION_TYPE,
				       CASE
				         WHEN T.T_TYPE = 6 THEN EB.DUE_DATE
				         ELSE NULL
				       END        AS DUE_DATE,
				       T.NUMBER   AS TRANSACTION_NUMBER,
				       P.NAME     AS VENDOR_NAME,
				       T.TOTAL    AS ORIGINAL_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 6 THEN EB.BALANCE_DUE
				         WHEN T.T_TYPE = 14 THEN T.TOTAL
				         ELSE T.TOTAL
				       END        AS BALANCE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				            AND WC.PAY_TO_TYPE = 2
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = EB.VENDOR_ID
				             OR V.ID = VCM.VENDOR_ID
				             OR V.ID = CCC.VENDOR_ID
				             OR V.ID = CP.VENDOR_ID
				             OR WC.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE IN ( 2, 4, 6, 14, 15 )
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				ORDER  BY T.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Payments of Latest 10 -->
	<sql-query name="getLatestPayments">
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="PAYMENT_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="ISSUE_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="AMOUNT_PAID" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		
		<![CDATA[
				SELECT T.ID             AS TRANSACTION_ID,
				       T.T_TYPE         AS TRANSACTION_TYPE,
				       T.T_DATE         AS PAYMENT_DATE,
				       T.NUMBER         AS TRANSACTION_NUMBER,
				       T.STATUS         AS TRANSACTION_STATUS,
				       T.T_DATE         AS ISSUE_DATE,
				       CASE
				         WHEN T.T_TYPE = 15 THEN WC.IN_FAVOUR_OF
				         ELSE P.NAME
				       END              AS NAME,
				       T.PAYMENT_METHOD AS PAYMENT_METHOD,
				       CASE
				         WHEN T.T_TYPE = 5 THEN CR.PAYMENTS
				         ELSE T.TOTAL
				       END              AS AMOUNT_PAID,
				       T.CURRENCY       AS CURRENCY
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON T.ID = CR.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CR.CUSTOMER_ID
				             OR C.ID = WC.CUSTOMER_ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				             OR V.ID = CCC.VENDOR_ID
				             OR V.ID = PB.VENDOR_ID
				             OR V.ID = VP.VENDOR_ID
				             OR V.ID = WC.VENDOR_ID
				       LEFT JOIN PAYEE P
				         ON P.ID = C.ID
				             OR P.ID = V.ID
				WHERE  T.T_TYPE IN ( 2, 3, 5, 11, 15, 25 )
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				ORDER  BY T.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Cash Purchases of Latest 10 -->
	<sql-query name="getLatestReceivePayments">
		<query-param name="companyId" type="long" />

		<return-scalar column="RP_ID" type="long" />
		<return-scalar column="RP_DATE" type="long" />
		<return-scalar column="RP_CUSTOMER_ID" type="long" />
		<return-scalar column="RP_AMOUNT" type="double" />
		
		<![CDATA[
				SELECT RP.ID          AS RP_ID,
				       T.T_DATE       AS RP_DATE,
				       RP.CUSTOMER_ID AS RP_CUSTOMER_ID,
				       RP.AMOUNT      AS RP_AMOUNT				       
				FROM   RECEIVE_PAYMENT RP
				       JOIN TRANSACTION T
				         ON RP.ID = T.ID
				WHERE  T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				ORDER  BY RP.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Cash Purchases of Latest 10 -->
	<sql-query name="getLatestCashPurchases">
		<query-param name="companyId" type="long" />

		<return-scalar column="CP_ID" type="long" />
		<return-scalar column="CP_DATE" type="long" />
		<return-scalar column="CP_VENDOR_ID" type="long" />
		<return-scalar column="CP_TOTAL" type="double" />
		
		<![CDATA[
				SELECT CP.ID        AS CP_ID,
				       T.T_DATE     AS CP_DATE,
				       CP.VENDOR_ID AS CP_VENDOR_ID,
				       T.TOTAL      AS CP_TOTAL
				FROM   CASH_PURCHASE CP
				       JOIN TRANSACTION T
				         ON CP.ID = T.ID
				            AND T.SAVE_STATUS != 202
				            AND T.COMPANY_ID = :companyId
				ORDER  BY CP.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Cash Sales of Latest 10 -->
	<sql-query name="getLatestCashSales">
		<query-param name="companyId" type="long" />

		<return-scalar column="CS_ID" type="long" />
		<return-scalar column="CS_DATE" type="long" />
		<return-scalar column="CS_CUSTOMER_ID" type="long" />
		<return-scalar column="SALESPERSON_ID" type="long" />
		<return-scalar column="TOTAL" type="double" />
		
		<![CDATA[
				SELECT CS.ID              AS CS_ID,
				       T.T_DATE           CS_DATE,
				       CS.CUSTOMER_ID     CS_CUSTOMER_ID,
				       CS.SALES_PERSON_ID AS SALESPERSON_ID,
				       T.TOTAL            AS TOTAL
				FROM   CASH_SALES CS
				       JOIN TRANSACTION T
				         ON CS.ID = T.ID
				            AND T.SAVE_STATUS != 202
				            AND T.COMPANY_ID = :companyId
				ORDER  BY T.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Checks of Latest 10 -->
	<sql-query name="getLatestChecks">
		<query-param name="companyId" type="long" />

		<return-scalar column="WC_ID" type="long" />
		<return-scalar column="WC_DATE" type="long" />
		<return-scalar column="PAY_TO" type="encryptedstring" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="WC_CUSTOMER_ID" type="long" />
		<return-scalar column="WC_VENDOR_ID" type="long" />
		<return-scalar column="TAXAGENCY_ID" type="long" />
		<return-scalar column="WC_AMOUNT" type="double" />
		
		<![CDATA[
				SELECT WC.ID            AS WC_ID,
				       T.T_DATE         WC_DATE,
				       WC.PAY_TO_TYPE   AS PAY_TO,
				       WC.BALANCE       AS BALANCE,
				       WC.CUSTOMER_ID   AS WC_CUSTOMER_ID,
				       WC.VENDOR_ID     AS WC_VENDOR_ID,
				       WC.TAX_AGENCY_ID AS TAXAGENCY_ID,
				       WC.AMOUNT        AS WC_AMOUNT
				FROM   WRITE_CHECKS WC
				       JOIN TRANSACTION T
				         ON WC.ID = T.ID
				            AND T.SAVE_STATUS != 202
				            AND T.COMPANY_ID = :companyId
				ORDER  BY T.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Customer Refunds of Latest 10 -->
	<sql-query name="getLatestCustomerRefunds">
		<query-param name="companyId" type="long" />

		<return-scalar column="CR_ID" type="long" />
		<return-scalar column="CR_DATE" type="long" />
		<return-scalar column="CR_CUSTOMER_ID" type="long" />
		<return-scalar column="CR_AMOUNT" type="double" />
		<return-scalar column="CR_BALANCE_DUE" type="double" />
		
		<![CDATA[
				SELECT CR.ID          AS CR_ID,
				       T.T_DATE       AS CR_DATE,
				       CR.CUSTOMER_ID AS CR_CUSTOMER_ID,
				       T.TOTAL        AS CR_AMOUNT,
				       CR.BALANCE_DUE AS CR_BALANCE_DUE
				FROM   CUSTOMER_REFUND CR
				       JOIN TRANSACTION T
				         ON CR.ID = T.ID
				            AND T.SAVE_STATUS != 202
				            AND T.COMPANY_ID = :companyId
				ORDER  BY T.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Deposits of Latest 10 -->
	<sql-query name="getLatestDeposits">
		<query-param name="companyId" type="long" />

		<return-scalar column="TF_ID" type="long" />
		<return-scalar column="DEPOSIT_IN_ID" type="long" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="TOTAL_AMOUNT" type="double" />
		<return-scalar column="CASH_BACK_ACCOUNT_ID" type="long" />
		<return-scalar column="CASH_BACK_MEMO" type="encryptedstring" />
		<return-scalar column="CASH_BACK_AMOUNT" type="double" />
		<return-scalar column="TOTAL" type="double" />
		
		<![CDATA[
				SELECT TF.ID                   AS TF_ID,
				       TF.DEPOSIT_IN_ID        AS DEPOSIT_IN_ID,
				       T.MEMO                  AS MEMO,
				       T.TOTAL                 AS TOTAL_AMOUNT,
				       TF.CASH_BACK_ACCOUNT_ID AS CASH_BACK_ACCOUNT_ID,
				       TF.CASH_BACK_MEMO       AS CASH_BACK_MEMO,
				       TF.CASH_BACK_AMOUNT     AS CASH_BACK_AMOUNT
				FROM   TRANSFER_FUND TF
				       JOIN TRANSACTION T
				         ON TF.ID = T.ID
				            AND T.SAVE_STATUS != 202
				            AND T.COMPANY_ID = :companyId
				ORDER  BY T.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the TransferFunds of Latest 10 -->
	<sql-query name="getLatestTransferFunds">
		<query-param name="companyId" type="long" />

		<return-scalar column="TF_ID" type="long" />
		<return-scalar column="TF_DATE" type="long" />
		<return-scalar column="TRANSFER_FROM" type="long" />
		<return-scalar column="TRANSFER_TO" type="long" />
		<return-scalar column="TRANSFER_AMOUNT" type="double" />
		
		<![CDATA[
				SELECT TF.ID            AS TF_ID,
				       T.T_DATE         AS TF_DATE,
				       TF.TRANSFER_FROM AS TRANSFER_FROM,
				       TF.TRANSFER_TO   AS TRANSFER_TO,
				       T.TOTAL          AS TRANSFER_AMOUNT
				FROM   TRANSFER_FUND TF
				       JOIN TRANSACTION T
				         ON TF.ID = T.ID
				            AND T.COMPANY_ID = :companyId
				ORDER  BY T.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Items of Latest 10 -->
	<sql-query name="getLatestItems">
		<query-param name="companyId" type="long" />

		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="SALES_PRICE" type="double" />
		
		<![CDATA[
				SELECT I.ID          AS ITEM_ID,
				       I.NAME        AS ITEM_NAME,
				       I.TYPE        AS ITEM_TYPE,
				       I.SALES_PRICE AS SALES_PRICE
				FROM   ITEM I
				WHERE  I.COMPANY_ID = :companyId
				ORDER  BY I.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Items of Latest 10 -->
	<sql-query name="getTotalWithNamesItems_bkp">
		<query-param name="companyId" type="long" />

		<return-scalar column="TTL" type="double" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />

		<![CDATA[
				SELECT SUM(T.TOTAL) AS TTL, I.name as ITEM_NAME FROM TRANSACTION T
					LEFT JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.ID
					LEFT JOIN ITEM I ON I.ID=TI.ITEM_ID
					WHERE I.TYPE IN (1) AND I.COMPANY_ID = :companyId
					GROUP BY I.NAME
				]]>

	</sql-query>

	<sql-query name="getTotalWithNamesItems">
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />

		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="balance" type="double" />
		<return-scalar column="opening_balance" type="double" />
		<return-scalar column="currency" type="encryptedstring" />
		<return-scalar column="clientName" type="encryptedstring" />
		<return-scalar column="address" type="encryptedstring" />
		<return-scalar column="email" type="encryptedstring" />
		<return-scalar column="phone" type="encryptedstring" />

		<![CDATA[
				SELECT SUM(T.TOTAL) as TOTAL,
				I.id ,
				I."name" as ITEM_NAME,
				p2."name" as clientName,
				INV.customer_id ,
				p2.opening_balance ,
				p2.balance ,
				c3."name" as currency,
				i.address  ,
			i.email ,
				i.phone
				FROM   ITEM I
				left JOIN TRANSACTION_ITEM TI ON I.ID=TI.ITEM_ID
				LEFT JOIN TRANSACTION T ON TI.TRANSACTION_ID=T.id
				LEFT JOIN INVOICE INV ON INV.id =T.ID
				left join customer c2 on INV.customer_id =c2.id
				left join payee p2 on c2.id =p2.id
				left join currency c3 on c3.id =p2.currency
				WHERE  I.COMPANY_ID = :companyId
				AND I.TYPE IN (1)
				GROUP BY I.id ,I."name",p2."name" ,INV.customer_id ,
				p2.opening_balance ,p2.balance ,p2.currency,c3."name",I.address ,I.email ,I.phone ;
				]]>

	</sql-query>

	<!-- To generate the Sales Items of Latest 10 -->
	<sql-query name="getLatestSalesItems">
		<query-param name="companyId" type="long" />

		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="SALES_PRICE" type="double" />
		
		<![CDATA[
				SELECT I.ID          AS ITEM_ID,
				       I.NAME        AS ITEM_NAME,
				       I.TYPE        AS ITEM_TYPE,
				       I.SALES_PRICE AS SALES_PRICE
				FROM   ITEM I
				WHERE  I.IS_SELL_ITEM = TRUE
				       AND I.COMPANY_ID = :companyId
				ORDER  BY I.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Purchase Items of Latest 10 -->
	<sql-query name="getLatestPurchaseItems">
		<query-param name="companyId" type="long" />

		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="SALES_PRICE" type="double" />
		
		<![CDATA[
				SELECT I.ID          AS ITEM_ID,
				       I.NAME        AS ITEM_NAME,
				       I.TYPE        AS ITEM_TYPE,
				       I.SALES_PRICE AS SALES_PRICE
				FROM   ITEM I
				WHERE  I.IS_BUY_ITEM = TRUE
				       AND I.COMPANY_ID = :companyId
				ORDER  BY I.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Vendors of Latest 10 -->
	<sql-query name="getLatestVendors">
		<query-param name="companyId" type="long" />

		<return-scalar column="VENDOR_ID" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="PAYEE_DATE" type="long" />
		<return-scalar column="PAYEE_ID" type="long" />

		<![CDATA[
				SELECT V.ID     AS VENDOR_ID,
				       P.NAME   AS VENDOR_NAME,
				       P.P_DATE AS PAYEE_DATE,
				       P.ID     AS PAYEE_ID
				FROM   VENDOR V
				       LEFT JOIN PAYEE P
				         ON P.ID = V.ID
				            AND P.COMPANY_ID = :companyId
				ORDER  BY V.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Quotes of Latest 10 -->
	<sql-query name="getLatestQuotes">
		<query-param name="companyId" type="long" />

		<return-scalar column="QUOTE_ID" type="long" />
		<return-scalar column="QUOTE_DATE" type="long" />
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="SALES_PERSON_ID" type="long" />
		<return-scalar column="QUOTE_TOTAL" type="double" />

		<![CDATA[
				SELECT E1.ID              AS QUOTE_ID,
				       T.T_DATE           AS QUOTE_DATE,
				       E1.CUSTOMER_ID     AS CUSTOMER_ID,
				       E1.SALES_PERSON_ID AS SALES_PERSON_ID,
				       T.TOTAL            AS QUOTE_TOTAL
				FROM   ESTIMATE E1
				       JOIN TRANSACTION T
				         ON E1.ID = T.ID
				            AND T.COMPANY_ID = :companyId
				       JOIN CUSTOMER C
				         ON C.ID = E1.CUSTOMER_ID
				ORDER  BY T.ID DESC
				LIMIT  10  
				]]>

	</sql-query>

	<!-- To generate the Checks of Latest 10 -->
	<sql-query name="getChecks">
		<query-param name="accountId" type="long" />
		<query-param name="companyId" type="long" />
		
		<![CDATA[
				SELECT *
				FROM   WRITE_CHECKS WC
				       JOIN TRANSACTION T
				         ON T.ID = WC.ID
				            AND WC.ACCOUNT_ID = :accountId
				            AND T.STATUS = 0
				            AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getPaySalesTaxEntriesList">
		<query-param name="month" type="int" />
		<query-param name="year" type="int" />
		<query-param name="companyId" type="long" />

		<return-scalar column="transaction_id" type="long" />
		<return-scalar column="transaction_date" type="long" />
		<return-scalar column="taxcode_name" type="encryptedstring" />
		<return-scalar column="taxagency_name" type="encryptedstring" />
		<return-scalar column="balance" type="double" />

		<![CDATA[
				SELECT T.ID            AS TRANSACTION_ID,
				       T.T_DATE        AS TRANSACTION_DATE,
				       TC.NAME         AS TAXCODE_NAME,
				       P.NAME          AS TAXAGENCY_NAME,
				       SUM(PT.BALANCE) AS BALANCE
				FROM   PAY_TAX_ENTRIES PT
				       LEFT OUTER JOIN TAXCODE TC
				         ON PT.TAXCODE_ID = TC.ID
				       LEFT OUTER JOIN TAXAGENCY TA
				         ON PT.TAXAGENCY_ID = TA.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = TA.ID
				       LEFT OUTER JOIN TRANSACTION T
				         ON PT.TRANSACTION_ID = T.ID
				WHERE  MONTH(T.T_DATE) <= :month
				       AND T.COMPANY_ID = :companyId
				       AND YEAR(T.T_DATE) = :year
				       AND PT.BALANCE != 0.0
				       AND TA.ACCOUNT_ID != (SELECT ID
				                             FROM   ACCOUNT
				                             WHERE  NAME = 'Un Deposited Funds'
				                                    AND COMPANY_ID = :companyId)
				GROUP  BY TA.ID,
				          PT.TRANSACTION_ID
				ORDER  BY TA.ID  
				]]>

	</sql-query>

	<sql-query name="getNextTransactionNumber">
		<query-param name="type" type="int" />
		<query-param name="companyId" type="long" />

		<return-scalar column="transaction_number" type="encryptedstring" />
		
		<![CDATA[
				SELECT T.NUMBER AS TRANSACTION_NUMBER
				FROM   TRANSACTION T
				WHERE  T.ID = (SELECT Max(T1.ID)
				               FROM   TRANSACTION T1
				               WHERE  T1.T_TYPE = :type
				                      AND T1.COMPANY_ID = :companyId)  
				]]>

	</sql-query>


	<sql-query name="getNextIssuePaymentCheckNumber">
		<query-param name="accountID" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
			
		<![CDATA[
				SELECT I.CHECK_NUMBER AS CHECK_NUMBER
				FROM   ISSUEPAYMENT I
				WHERE  I.ID = (SELECT Max(T1.ID)
				               FROM   TRANSACTION T1
				                      LEFT OUTER JOIN ISSUEPAYMENT IP
				                        ON IP.ID = T1.ID
				                      LEFT OUTER JOIN ACCOUNT A1
				                        ON IP.ACCOUNT_ID = A1.ID
				               WHERE  T1.T_TYPE = 9
				                      AND A1.ID = :accountID
				                      AND T1.COMPANY_ID = :companyId)  
				]]>

	</sql-query>

	<sql-query name="getNextFixedAssetNumber">
		<query-param name="companyId" type="long" />

		<return-scalar column="fixedasset_number" type="encryptedstring" />

		<![CDATA[
				SELECT FA.ASSET_NUMBER AS FIXEDASSET_NUMBER
				FROM   FIXED_ASSET FA
				WHERE  FA.ID = (SELECT Max(FA1.ID)
				                FROM   FIXED_ASSET FA1
				                WHERE  FA1.COMPANY_ID = :companyId)  
				]]>

	</sql-query>

	<sql-query name="getNextNominalCodeForGivenAccountType">
		<query-param name="subBaseType" type="int" />
		<query-param name="companyId" type="long" />

		<return-scalar column="account_number" type="long" />
		
		<![CDATA[
				SELECT A.A_NUMBER AS ACCOUNT_NUMBER
				FROM   ACCOUNT A
				WHERE  A.ID = (SELECT Max(A1.ID)
				               FROM   ACCOUNT A1
				               WHERE  A1.SUB_BASE_TYPE = :subBaseType
				                      AND A1.COMPANY_ID = :companyId)  
				]]>

	</sql-query>

	<!-- The following queries named queries should be used in canDelete(Class,stringId) 
		method to check whether an Object is deletable or not -->
	<sql-query name="canDeleteTDSChalanDetail">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		
		<![CDATA[
				SELECT C.ID AS ID
				FROM   TDS_CHALAN_DETAIL C
				       LEFT JOIN TRANSACTION T
				         ON T.ID = C.ID
				WHERE  C.ID IS NULL
				       AND C.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteJob">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		
		<![CDATA[
				SELECT T.ID AS TRANSACTION_ID,
				       TI.ID   AS TRANSACTION_ITEM_ID
				FROM   JOB J
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.JOB_ID = :inputId
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.JOB_ID = :inputId
				WHERE  J.ID = :inputId
				       AND J.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteCustomer">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="CUSTOMER_CREDIT_MEMO_ID" type="long" />
		<return-scalar column="CUSTOMER_REFUND_ID" type="long" />
		<return-scalar column="ESTIMATE_ID" type="long" />
		<return-scalar column="INVOICE_ID" type="long" />
		<return-scalar column="RECEIVE_PAYMENT_ID" type="long" />
		<return-scalar column="WRITE_CHECK_ID" type="long" />
		<return-scalar column="CUSTOMER_PREPAYMENT_ID" type="long" />
		<return-scalar column="TI_ID" type="long" />
		
		<![CDATA[
				SELECT CS.ID  AS CUSTOMER_ID,
				       CCM.ID AS CUSTOMER_CREDIT_MEMO_ID,
				       CR.ID  AS CUSTOMER_REFUND_ID,
				       EST.ID AS ESTIMATE_ID,
				       I.ID   AS INVOICE_ID,
				       RP.ID  RECEIVE_PAYMENT_ID,
				       WC.ID  AS WRITE_CHECK_ID,
				       CPP.ID AS CUSTOMER_PREPAYMENT_ID,
				       TI.ID  AS TI_ID
				FROM   CUSTOMER C
				       LEFT OUTER JOIN CASH_SALES CS
				         ON C.ID = CS.CUSTOMER_ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON C.ID = CCM.CUSTOMER_ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON C.ID = CR.CUSTOMER_ID
				       LEFT OUTER JOIN ESTIMATE EST
				         ON C.ID = EST.CUSTOMER_ID
				       LEFT OUTER JOIN INVOICE I
				         ON C.ID = I.CUSTOMER_ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON C.ID = RP.CUSTOMER_ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON C.ID = WC.CUSTOMER_ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
				         ON C.ID = CPP.CUSTOMER_ID
				       LEFT JOIN TRANSACTION_ITEM TI
				         ON C.ID = TI.CUSTOMER_ID
				WHERE  C.ID = :inputId
				       AND C.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteVendor">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="CASH_PURCHASE_ID" type="long" />
		<return-scalar column="CREDIT_CARD_CHARGE_ID" type="long" />
		<return-scalar column="ENTER_BILL_ID" type="long" />
		<return-scalar column="PAY_BILL_ID" type="long" />
		<return-scalar column="VENDOR_PAYMENT_ID" type="long" />
		<return-scalar column="PURCHASE_ORDER_ID" type="long" />
		<return-scalar column="VENDOR_CREDIT_MEMO_ID" type="long" />
		<return-scalar column="WRITE_CHECK_ID" type="long" />
		
		<![CDATA[
				SELECT IT.ID  AS ITEM_ID,
				       CP.ID  AS CASH_PURCHASE_ID,
				       CCC.ID AS CREDIT_CARD_CHARGE_ID,
				       EB.ID  AS ENTER_BILL_ID,
				       PB.ID  AS PAY_BILL_ID,
				       VP.ID  AS VENDOR_PAYMENT_ID,
				       PO.ID  AS PURCHASE_ORDER_ID,
				       VCM.ID AS VENDOR_CREDIT_MEMO_ID,
				       WC.ID  WRITE_CHECK_ID
				FROM   VENDOR V
				       LEFT OUTER JOIN ITEM IT
				         ON V.ID = IT.PREFFERED_VENDOR
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON V.ID = CP.VENDOR_ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON V.ID = CCC.VENDOR_ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON V.ID = EB.VENDOR_ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON V.ID = PB.VENDOR_ID
				        LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON V.ID = VP.VENDOR_ID
				       LEFT OUTER JOIN PURCHASE_ORDER PO
				         ON V.ID = PO.VENDOR_ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON V.ID = VCM.VENDOR_ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON V.ID = WC.VENDOR_ID
				WHERE  V.ID = :inputId
				       AND V.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="isCompanyAccount">
		<query-param name="accountId" type="long" />
		<query-param name="companyId" type="long" />
		<![CDATA[
			SELECT CASE WHEN (
			:accountId IN (C.CASH_DISCOUNT_ACCOUNT,C.ACCOUNTS_RECEIVABLE_ID,C.ACCOUNTS_ROUND_ID,C.ACCOUNTS_PAYABLE_ID
			,C.OPENING_BALANCES_ID,C.RETAINED_EARNINGS_ID,C.OTHER_CASH_INCOME_ID,C.OTHER_CASH_EXPENSE_ID
			,C.CASH_DISCOUNTS_GIVEN,C.CASH_DISCOUNTS_TAKEN,C.TAX_LIABILITY_ACCOUNT_ID,C.VAT_FILED_LIABILITY_ACCOUNT_ID
			,C.PENDING_ITEM_RECEIPTS_ACCOUNT_ID,C.EXCHANGE_LOSS_OR_GAIN_ACCOUNT,C.COST_OF_GOODS_SOLD,C.SALARIES_PAYABLE_ACCOUNT)) 
			THEN TRUE ELSE FALSE END AS IS_EXISTS FROM COMPANY C 
			WHERE C.ID=:companyId
		]]>
	</sql-query>

	<sql-query name="canDeleteAccount">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ACCOUNT_ID" type="long" />
		<return-scalar column="ACCOUNT_TRANSACTION_ID" type="long" />
		<!-- <return-scalar column="BUDGET_ID" type="long" /> -->
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="VENDOR_ID" type="long" />
		<return-scalar column="SALES_PERSON_ID" type="long" />
		<return-scalar column="TAX_AGENCY_ID" type="long" />
		<return-scalar column="FIXED_ASSET_ID" type="long" />
		<return-scalar column="CASH_PURCHASE_ID" type="long" />
		<return-scalar column="CASH_SALES_ID" type="long" />
		<return-scalar column="CREDIT_CARD_CHARGE_ID" type="long" />
		<return-scalar column="CUSTOMER_CREDIT_MEMO_ID" type="long" />
		<return-scalar column="CUSTOMER_REFUND_ID" type="long" />
		<return-scalar column="MAKE_DEPOSIT_ID" type="long" />
		<return-scalar column="PAY_BILL_ID" type="long" />
		<return-scalar column="VENDOR_PAYMENT_ID" type="long" />
		<return-scalar column="PURCHASE_ORDER_ID" type="long" />
		<return-scalar column="RECEIVE_PAYMENT_ID" type="long" />
		<return-scalar column="PAY_EXPENSE_ID" type="long" />
		<return-scalar column="WRITE_CHECK_ID" type="long" />
		<return-scalar column="TRANSFER_FUND_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		<return-scalar column="TRANSACTION_PAY_BILL_ID" type="long" />
		<return-scalar column="TRANSACTION_RECEIVE_PAYMENT_ID"
			type="long" />
		<return-scalar column="TRANSACTION_MAKEDEPOSIT_ENTRIES_ID"
			type="long" />
		<return-scalar column="TRANSACTION_EXPENSE_ID" type="long" />
		<return-scalar column="TRANSFER_FUND_ID" type="long" />
		<return-scalar column="TRANSACTION_DEPOSIT_ITEM_ID"
			type="long" />
		
		<![CDATA[
				SELECT AC.ID   AS ACCOUNT_ID,
				       CASE
				         WHEN (SELECT JE.ID
				               FROM   JOURNAL_ENTRY JE
				               WHERE  JE.ID = AT.TRANSACTION_ID
				                      AND JE.ACCOUNT_ID = A.ID) IS NULL THEN AT.ID
				       END     AS ACCOUNT_TRANSACTION_ID,
				       C.ID    AS CUSTOMER_ID,
				       I.ID    AS ITEM_ID,
				       V.ID    AS VENDOR_ID,
				       SP.ID   AS SALES_PERSON_ID,
				       TA.ID   AS TAX_AGENCY_ID,
				       FA.ID   AS FIXED_ASSET_ID,
				       PST.ID  AS PAY_TAX_ID,
				       CP.ID   AS CASH_PURCHASE_ID,
				       CS.ID   AS CASH_SALES_ID,
				       CCC.ID  AS CREDIT_CARD_CHARGE_ID,
				       CCM.ID  AS CUSTOMER_CREDIT_MEMO_ID,
				       CF.ID   AS CUSTOMER_REFUND_ID,
				       TF.ID   AS TRANSFER_FUND_ID,
				       MD.ID   AS MAKE_DEPOSIT_ID,
				       TDI.ID  AS TRANSACTION_DEPOSIT_ITEM_ID,
				       PB.ID   AS PAY_BILL_ID,
				       VP.ID   AS VENDOR_PAYMENT_ID,
				       PO.ID   AS PURCHASE_ORDER_ID,
				       RP.ID   AS RECEIVE_PAYMENT_ID,
				       PE.ID   AS PAY_EXPENSE_ID,
				       WC.ID   AS WRITE_CHECK_ID,
				       TF.ID   AS TRANSFER_FUND_ID,
				       CASE
				         WHEN (SELECT JE.ID
				               FROM   JOURNAL_ENTRY JE
				               WHERE  JE.ID = TI.TRANSACTION_ID
				                      AND JE.ACCOUNT_ID = A.ID) IS NULL THEN TI.ID
				       END     AS TRANSACTION_ITEM_ID,
				       TPB.ID  AS TRANSACTION_PAY_BILL_ID,
				       TRP.ID  AS TRANSACTION_RECEIVE_PAYMENT_ID,
				       TMDE.ID AS TRANSACTION_MAKEDEPOSIT_ENTRIES_ID,
				       TE.ID   AS TRANSACTION_EXPENSE_ID
				FROM   ACCOUNT A
				       LEFT OUTER JOIN ACCOUNT AC
				         ON A.ID = AC.PARENT_ID
				             OR A.ID = AC.LINKED_ID
				       LEFT OUTER JOIN ACCOUNT_TRANSACTION AT
				         ON A.ID = AT.ACCOUNT_ID
				       LEFT OUTER JOIN COMPANY C
				         ON A.ID = C.OPENING_BALANCES_ID
				             OR A.ID = C.RETAINED_EARNINGS_ID
				             OR A.ID = C.OTHER_CASH_INCOME_ID
				             OR A.ID = C.OTHER_CASH_EXPENSE_ID
				             OR A.ID = C.CASH_DISCOUNTS_GIVEN
				             OR A.ID = C.CASH_DISCOUNTS_TAKEN
				             OR A.ID = C.TAX_LIABILITY_ACCOUNT_ID
				             OR A.ID = C.VAT_FILED_LIABILITY_ACCOUNT_ID
				             OR A.ID = C.PENDING_ITEM_RECEIPTS_ACCOUNT_ID
				       LEFT OUTER JOIN CURRENCY CURR
				       	 ON A.ID = CURR.ACCOUNTS_PAYABLE_ID
				       	 	 OR A.ID = CURR.ACCOUNTS_RECEIVABLE_ID
				       LEFT OUTER JOIN ITEM I
				         ON A.ID = I.INCOME_ACCOUNT_ID
				             OR A.ID = I.EXPENSE_ACCOUNT_ID
				             OR A.ID = I.ASSETS_ACCOUNT_ID
				       LEFT OUTER JOIN VENDOR V
				         ON A.ID = V.EXPENSE_ACCOUNT_ID
				       LEFT OUTER JOIN SALES_PERSON SP
				         ON A.ID = SP.EXPENSE_ACCOUNT_ID
				       LEFT OUTER JOIN TAXAGENCY TA
				         ON A.ID = TA.SALES_ACCOUNT_ID
				             OR A.ID = PURCHASE_ACCOUNT_ID
				       LEFT OUTER JOIN FIXED_ASSET FA
				         ON A.ID = FA.ASSET_ACCOUNT_ID
				             OR A.ID = FA.DEPRECIATION_EXPENSE_ACCOUNT_ID
				       LEFT OUTER JOIN PAY_TAX PST
				         ON A.ID = PST.PAYFROM_ACCOUNT_ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON A.ID = CP.PAYFROM_ACCOUNT_ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON A.ID = CS.DEPOSIT_IN_ACCOUNT_ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON A.ID = CCC.PAYFROM_ACCOUNT_ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON A.ID = CCM.ACCOUNT_ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CF
				         ON A.ID = CF.PAYFROM_ACCOUNT_ID
				       LEFT OUTER JOIN TRANSFER_FUND TF
				         ON A.ID = TF.DEPOSIT_IN_ID
				             OR A.ID = TF.CASH_BACK_ACCOUNT_ID
				       LEFT JOIN MAKE_DEPOSIT MD
				         ON A.ID = MD.DEPOSIT_TO
				       LEFT JOIN TRANSACTION_DEPOSIT_ITEM TDI
				         ON A.ID = TDI.ACCOUNT_ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON A.ID = PB.PAYFROM_ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON A.ID = VP.PAYFROM_ID
				       LEFT OUTER JOIN PURCHASE_ORDER PO
				         ON A.ID = PO.SHIP_TO_ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON A.ID = RP.ACCOUNT_ID
				       LEFT OUTER JOIN PAY_EXPENSE PE
				         ON A.ID = PE.ACCOUNT_ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON A.ID = WC.ACCOUNT_ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON A.ID = TI.ACCOUNT_ID
				       LEFT OUTER JOIN TRANSACTION_PAYBILL TPB
				         ON A.ID = TPB.DISCOUNT_ID
				       LEFT OUTER JOIN TRANSACTION_RECEIVE_PAYMENT TRP
				         ON A.ID = TRP.DISCOUNT_ID
				             OR A.ID = TRP.WRITE_OFF_ID
				       LEFT OUTER JOIN TRANSACTION_MAKE_DEPOSIT_ENTRIES TMDE
				         ON A.ID = TMDE.ACCOUNT_ID
				       LEFT OUTER JOIN TRANSACTION_EXPENSE TE
				         ON A.ID = TE.ACCOUNT_ID
				WHERE  A.ID = :inputId
				       AND A.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="canDeleteItem">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		<return-scalar column="TRANSACTION_EXPENSE_ID" type="long" />
		<return-scalar column="STOCK_TRANSFER_ID" type="long" />
		<return-scalar column="BUILD_ASSEMBLY_ID" type="long" />
		<return-scalar column="I_ASSEMBLY_ITEM" type="long" />
		<return-scalar column="PARENT_ITEM_ID" type="long" />
		<![CDATA[
				SELECT TI.ID AS TRANSACTION_ITEM_ID,
				       TE.ID AS TRANSACTION_EXPENSE_ID,
				       ST.ID AS STOCK_TRANSFER_ID,
				       BA.ID AS BUILD_ASSEMBLY_ID,
				       IAI.ID AS I_ASSEMBLY_ITEM,
				       IT.ID AS PARENT_ITEM_ID
				FROM   ITEM I
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON I.ID = TI.ITEM_ID
				       LEFT OUTER JOIN TRANSACTION_EXPENSE TE
				         ON I.ID = TE.ITEM_ID
				       LEFT OUTER JOIN STOCK_TRANSFER_ITEM ST
				         ON ST.ITEM = I.ID
				       LEFT OUTER JOIN BUILD_ASSEMBLY BA
				         ON BA.INVENTORY_ASSEMBLY = I.ID
				       LEFT OUTER JOIN INVENTORY_ASSEMBLY_ITEM IAI
				       	 ON IAI.INVENTORY_ITEM_ID=I.ID
				       LEFT OUTER JOIN ITEM IT
				       ON IT.PARENT_ID = I.ID
				WHERE  I.ID = :inputId
				       AND I.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteCustomerGroup">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="CUSTOMER_ID" type="long" />

		<![CDATA[
				SELECT C.ID AS CUSTOMER_ID
				FROM   CUSTOMER_GROUP CG
				       LEFT OUTER JOIN CUSTOMER C
				         ON CG.ID = C.CUSTOMER_GROUP_ID
				WHERE  CG.ID = :inputId
				       AND CG.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteVendorGroup">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="VENDOR_ID" type="long" />
		
		<![CDATA[
				SELECT V.ID AS VENDOR_ID
				FROM   VENDOR_GROUP VG
				       LEFT OUTER JOIN VENDOR V
				         ON VG.ID = V.VENDOR_GROUP_ID
				WHERE  VG.ID = :inputId
				       AND VG.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteEmployeeGroup">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="EMPLOYEE_ID" type="long" />
		<return-scalar column="PAY_STRUCTURE" type="long" />
		<return-scalar column="PE_ID" type="long" />

		<![CDATA[
				SELECT E.ID  AS EMPLOYEE_ID, 
				       PS.ID AS PAY_STRUCTURE, 
				       PE.ID AS PE_ID 
				FROM   EMPLOYEE_GROUP EG 
				       LEFT OUTER JOIN PAY_STRUCTURE PS 
				         ON PS.EMPLOYEE_GROUP = EG.ID 
				       LEFT OUTER JOIN PAY_EMPLOYEE PE 
				         ON PE.EMPLOYEE_GROUP_ID = EG.ID 
				       LEFT OUTER JOIN EMPLOYEE E 
				         ON EG.ID = E.EMPLOYEE_GROUP 
				WHERE  EG.ID = :inputId 
				       AND EG.COMPANY_ID = :companyId 
				LIMIT  1 
				]]>

	</sql-query>

	<!-- <sql-query name="canDeleteEmployeeCategory"> <query-param name="inputId" 
		type="long" /> <query-param name="companyId" type="long" /> <return-scalar 
		column="ID" type="long" /> <![CDATA[ SELECT EC.ID AS ID FROM EMPLOYEE_CATEGORY 
		EC WHERE EC.ID IS NULL AND EC.ID = :inputId AND EC.COMPANY_ID = :companyId 
		LIMIT 1 ]]> </sql-query> -->

	<sql-query name="canDeletePayHead">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />

		<![CDATA[
				SELECT PSI.ID AS ID
				FROM   PAY_HEAD PH
						LEFT JOIN PAY_STRUCTURE_ITEM PSI
							ON PSI.PAY_HEAD = PH.ID
				       
				WHERE  PH.ID = :inputId
				       AND PH.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeletePayStructure">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />

		<![CDATA[
				SELECT EPD.EMPLOYEE AS ID
				FROM   PAY_STRUCTURE PS
				LEFT OUTER JOIN PAY_STRUCTURE_ITEM PSI
				ON PSI.PAY_STRUCTURE = PS.ID
				LEFT OUTER JOIN EMPLOYEE_PAYHEAD_COMPONENT EPC
				ON EPC.PAY_HEAD = PSI.PAY_HEAD				
				LEFT OUTER JOIN employee_payment_details EPD
				ON EPD.ID=EPC.EMPLOYEE_PAYMENT_DETAILS_ID AND EPD.EMPLOYEE=PS.EMPLOYEE
				WHERE PS.ID = :inputId
				       AND PS.COMPANY_ID = :companyId
				LIMIT  1
				]]>

	</sql-query>

	<sql-query name="canDeleteComputionPayHead">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />

		<![CDATA[
				SELECT PSI.ID AS ID
				FROM   COMPUTATION_PAY_HEAD CPH
						LEFT JOIN PAY_HEAD PH ON PH.ID = CPH.ID
						LEFT JOIN PAY_STRUCTURE_ITEM PSI
							ON PSI.PAY_HEAD = CPH.ID
				       
				WHERE  PH.ID = :inputId
				       AND PH.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteAttendancePayHead">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />

		<![CDATA[
				SELECT PSI.ID AS ID
				FROM   ATTENDANCE_PAYHEAD APH
						LEFT JOIN PAY_HEAD PH ON PH.ID = APH.ID
						LEFT JOIN PAY_STRUCTURE_ITEM PSI
							ON PSI.PAY_HEAD = APH.ID
				       
				WHERE  PH.ID = :inputId
				       AND PH.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteAttendanceOrProductionType">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="AMT_ID" type="long" />
		<return-scalar column="FF_ID" type="long" />

		<![CDATA[
				SELECT AMT.ATTENDANCE_TYPE AS AMT_ID,
					   FF.PAY_HEAD AS FF_ID
				FROM   ATTENDANCE_OR_PRODUCTION_TPE APH
						LEFT JOIN ATTENDANCE_OR_PRODUCTION_ITEMS AMT 
						ON AMT.ATTENDANCE_TYPE = APH.ID
						LEFT OUTER JOIN FORMULA_FUNCTION FF
						ON FF.ATTENDANCE_TYPE = AMT.ATTENDANCE_TYPE
				WHERE  APH.ID =:inputId
				       AND APH.COMPANY_ID = :companyId
				LIMIT  1 
				]]>

	</sql-query>

	<sql-query name="canDeleteFlatRatePayHead">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />

		<![CDATA[
				SELECT PSI.ID AS ID
				FROM   FLAT_RATE_PAY_HEAD FPH
						LEFT JOIN PAY_HEAD PH ON PH.ID = FPH.ID
						LEFT JOIN PAY_STRUCTURE_ITEM PSI
							ON PSI.PAY_HEAD = FPH.ID
				       
				WHERE  PH.ID = :inputId
				       AND PH.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteProductionPayHead">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />

		<![CDATA[
				SELECT PSI.ID AS ID
				FROM   PRODUCTION_PAY_HEAD PPH
						LEFT JOIN PAY_HEAD PH ON PH.ID = PPH.ID
						LEFT JOIN PAY_STRUCTURE_ITEM PSI
							ON PSI.PAY_HEAD = PPH.ID
				       
				WHERE  PH.ID = :inputId
				       AND PH.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteUserDefinedPayHead">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />

		<![CDATA[
				SELECT PSI.ID AS ID
				FROM   USER_DEFINED_PAY_HEAD UPH
						LEFT JOIN PAY_HEAD PH ON PH.ID = UPH.ID
						LEFT JOIN PAY_STRUCTURE_ITEM PSI
							ON PSI.PAY_HEAD = UPH.ID
				       
				WHERE  PH.ID = :inputId
				       AND PH.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeletePaymentTerms">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="VENDOR_ID" type="long" />
		<return-scalar column="TAX_AGENCY_ID" type="long" />
		<return-scalar column="ENTER_BILL_ID" type="long" />
		<return-scalar column="ESTIMATE_ID" type="long" />
		<return-scalar column="INVOICE_ID" type="long" />
		
		<![CDATA[
				SELECT C.ID   AS CUSTOMER_ID,
				       V.ID   AS VENDOR_ID,
				       TA.ID  AS TAX_AGENCY_ID,
				       EB.ID  AS ENTER_BILL_ID,
				       ES.ID  AS ESTIMATE_ID,
				       INV.ID AS INVOICE_ID
				FROM   PAYMENTTERMS PT
				       LEFT OUTER JOIN CUSTOMER C
				         ON PT.ID = C.PAYMENT_TERM_ID
				       LEFT OUTER JOIN VENDOR V
				         ON PT.ID = V.PAYMENT_TERMS_ID
				       LEFT OUTER JOIN TAXAGENCY TA
				         ON PT.ID = TA.PAYMENT_TERM
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON PT.ID = EB.PAYMENT_TERM_ID
				       LEFT OUTER JOIN ESTIMATE ES
				         ON PT.ID = ES.PAYMENT_TERMS_ID
				       LEFT OUTER JOIN INVOICE INV
				         ON PT.ID = INV.PAYMENT_TERMS_ID
				WHERE  PT.ID = :inputId
				       AND PT.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteShippingTerms">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="COMPANY_ID" type="long" />
		
		<![CDATA[
				SELECT C.ID AS COMPANY_ID
				FROM   SHIPPINGTERMS ST
				       LEFT OUTER JOIN COMPANY C
				         ON ST.ID = C.CP_DEFAULT_SHIPPING_TERM
				WHERE  ST.ID = :inputId
				       AND ST.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteShippingMethod">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="VENDOR_ID" type="long" />
		<return-scalar column="CASHSALES_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		
		<![CDATA[
				SELECT C.ID  AS CUSTOMER_ID,
				       V.ID  AS VENDOR_ID,
				       CS.ID AS CASHSALES_ID,
				       I.ID  AS ITEM_ID
				FROM   SHIPPINGMETHOD SM
				       LEFT OUTER JOIN CUSTOMER C
				         ON SM.ID = C.SHIPPING_METHOD_ID
				       LEFT OUTER JOIN VENDOR V
				         ON SM.ID = V.SHIPPING_METHOD_ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON SM.ID = CS.SHIPPING_METHOD_ID
				       LEFT OUTER JOIN INVOICE I
				         ON SM.ID = I.SHIPPING_METHOD_ID
				WHERE  SM.ID = :inputId
				       AND SM.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeletePriceLevel">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="CASHSALES_ID" type="long" />
		<return-scalar column="CUSTOMER_CREDIT_MEMO_ID" type="long" />
		<return-scalar column="ESTIMATE_ID" type="long" />
		
		<![CDATA[
				SELECT C.ID   AS CUSTOMER_ID,
				       CS.ID  AS CASHSALES_ID,
				       CCM.ID AS CUSTOMER_CREDIT_MEMO_ID,
				       ES.ID  AS ESTIMATE_ID,
				       I.ID   AS ITEM_ID
				FROM   PRICELEVEL P
				       LEFT OUTER JOIN CUSTOMER C
				         ON P.ID = C.PRICE_LEVEL_ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON P.ID = CS.PRICE_LEVEL_ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON P.ID = CCM.PRICE_LEVEL_ID
				       LEFT OUTER JOIN ESTIMATE ES
				         ON P.ID = ES.PRICE_LEVEL_ID
				       LEFT OUTER JOIN INVOICE I
				         ON P.ID = I.PRICE_LEVEL_ID
				WHERE  P.ID = :inputId
				       AND P.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteItemGroup">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ITEM_ID" type="long" />
		
		<![CDATA[
				SELECT I.ID AS ITEM_ID
				FROM   ITEMGROUP IG
				       LEFT OUTER JOIN ITEM I
				         ON IG.ID = I.ITEMGROUP_ID
				WHERE  IG.ID = :inputId
				       AND IG.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteLocation">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANS_ID" type="long" />
		
		<![CDATA[
				SELECT T.ID AS TRANS_ID
				FROM   LOCATION L
				       LEFT OUTER JOIN TRANSACTION T
				         ON L.ID = T.LOCATION_ID
				WHERE  L.ID = :inputId
				       AND L.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteCurrency">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANS_ID" type="long" />
		<return-scalar column="PAYYE_ID" type="long" />
		<return-scalar column="ACCOUNT_ID" type="long" />
		<![CDATA[
				SELECT T.ID AS TRANS_ID,
				P.ID AS PAYYE_ID,
				A.ID AS ACCOUNT_ID
				FROM   CURRENCY C
				       LEFT OUTER JOIN TRANSACTION T
				         ON C.ID = T.CURRENCY
				       LEFT OUTER JOIN PAYEE P ON
				       C.ID = P.CURRENCY  
				       LEFT OUTER JOIN ACCOUNT A
				       ON (A.ACCOUNT_CURRENCY = C.ID
				       AND A.ID NOT IN (C.ACCOUNTS_RECEIVABLE_ID,
				       C.ACCOUNTS_PAYABLE_ID))
				WHERE  C.ID = :inputId
				       AND C.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteAccounterClass">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		<return-scalar column="CLASS_ID" type="long" />
		
		<![CDATA[
				SELECT TRANS.ID      AS TRANSACTION_ID,
				       TRANS_ITEM.ID AS TRANSACTION_ITEM_ID,
				       AC1.ID AS CLASS_ID
				FROM   ACCOUNTER_CLASS AC
				       LEFT OUTER JOIN TRANSACTION TRANS
				         ON TRANS.TRANSACTION_ACCOUNTER_CLASS = :inputId
				       LEFT OUTER JOIN TRANSACTION_ITEM TRANS_ITEM
				         ON TRANS_ITEM.TRANS_ITEM_ACCOUNTER_CLASS = :inputId
				       LEFT OUTER JOIN ACCOUNTER_CLASS AC1 ON AC1.PARENT_ID=AC.ID
				WHERE  AC.ID = :inputId
				       AND AC.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>


	<sql-query name="canDeleteSalesPerson">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="CASHSALES_ID" type="long" />
		<return-scalar column="CUSTOMER_CREDIT_MEMO_ID" type="long" />
		<return-scalar column="ESTIMATE_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="WRITE_CHECK_ID" type="long" />
		
		<![CDATA[
				SELECT C.ID   AS CUSTOMER_ID,
				       CS.ID  AS CASHSALES_ID,
				       CCM.ID AS CUSTOMER_CREDIT_MEMO_ID,
				       ES.ID  AS ESTIMATE_ID,
				       I.ID   AS ITEM_ID,
				       WC.ID  AS WRITE_CHECK_ID
				FROM   SALES_PERSON SP
				       LEFT OUTER JOIN CUSTOMER C
				         ON SP.ID = C.SALES_PERSON_ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON SP.ID = CS.SALES_PERSON_ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON SP.ID = CCM.SALES_PERSON_ID
				       LEFT OUTER JOIN ESTIMATE ES
				         ON SP.ID = ES.SALES_PERSON_ID
				       LEFT OUTER JOIN INVOICE I
				         ON SP.ID = I.SALES_PERSON_ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON SP.ID = WC.SALES_PERSON_ID
				WHERE  SP.ID = :inputId
				       AND SP.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteCreditRating">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="CUSTOMER_ID" type="long" />
		
		<![CDATA[
				SELECT C.ID AS CUSTOMER_ID
				FROM   CREDITRATING CR
				       LEFT OUTER JOIN CUSTOMER C
				         ON CR.ID = C.CREDIT_RATING_ID
				WHERE  CR.ID = :inputId
				       AND CR.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeletePaySalesTax">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT P.ID AS ID
				FROM   PAY_TAX P
				       LEFT JOIN TRANSACTION T
				         ON T.ID = P.ID
				WHERE  P.ID IS NULL
				       AND P.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteTAXAgency">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TAX_ITEM_ID" type="long" />
		<return-scalar column="VAT_RETURN_ID" type="long" />
		
		<![CDATA[
				SELECT TI.ID AS TAX_ITEM_ID,
				       VR.ID AS VAT_RETURN_ID
				FROM   TAXAGENCY T
				       LEFT OUTER JOIN TAX_ITEM TI
				         ON TI.TAX_AGENCY = T.ID
				       LEFT OUTER JOIN TAX_RETURN VR
				         ON VR.TAX_AGENCY = T.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = T.ID
				WHERE  T.ID = :inputId
				       AND P.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteTAXItem">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TAX_ADJUSTMENT_ID" type="long" />
		<return-scalar column="TAX_ADJUSTMENT_ID" type="long" />
		<return-scalar column="TAX_RATE_CALCULATION_ID" type="long" />
		<return-scalar column="TAX_GROUP_ID" type="long" />
		<return-scalar column="TAX_CODE_ID" type="long" />
		
		<![CDATA[
				SELECT TA.ID  AS TAX_ADJUSTMENT_ID,
				       VRC.ID AS TAX_RATE_CALCULATION_ID,
				       TG.ID  AS TAX_GROUP_ID,
				       TC.ID  AS TAX_CODE_ID
				FROM   TAX_ITEM T
				       LEFT OUTER JOIN TAX_ADJUSTMENT TA
				         ON TA.TAX_ITEM = T.ID
				       LEFT OUTER JOIN TAX_RATE_CALCULATION VRC
				         ON VRC.TAX_ITEM_ID = T.ID
				       LEFT OUTER JOIN TAX_GROUP_TAX_ITEM TGI
				         ON TGI.TAX_ITEM_ID = T.ID
				       LEFT OUTER JOIN TAX_GROUP TG
				         ON TG.ID = TGI.TAX_GROUP_ID
				       LEFT OUTER JOIN TAX_CODE TC
				         ON TC.TAXITEMGROUP_PURCHASES = T.ID
				             OR TC.TAXITEMGROUP_SALES = T.ID
				WHERE  T.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteTAXCode">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="PAYEE_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		
		<![CDATA[
				SELECT I.ID  AS ITEM_ID,
				       P.ID  AS PAYEE_ID,
				       TI.ID AS TRANSACTION_ITEM_ID
				FROM   TAX_CODE T
				       LEFT OUTER JOIN ITEM I
				         ON I.TAX_CODE = T.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.TAX_CODE_ID = T.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TAX_CODE = T.ID
				WHERE  T.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteTAXGroup">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TAX_CODE_ID" type="long" />
		
		<![CDATA[
				SELECT TC.ID AS TAX_CODE_ID
				FROM   TAX_GROUP T
				       LEFT OUTER JOIN TAX_CODE TC
				         ON TC.TAXITEMGROUP_PURCHASES = T.ID
				             OR TC.TAXITEMGROUP_SALES = T.ID
				WHERE  T.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteFiscalYear">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT F.ID AS ID
				FROM   FISCAL_YEAR F
				WHERE  F.ID IS NULL
				       AND F.ID = :inputId
				       AND F.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteUser">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT U.ID AS ID
				FROM   USERS U
				WHERE  U.ID IS NULL
				       AND U.ID = :inputId
				       AND U.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteFixedAsset">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="DEPRECIATION_ID" type="long" />
		
		<![CDATA[
				SELECT D.ID AS DEPRECIATION_ID
				FROM   FIXED_ASSET F
				       LEFT OUTER JOIN DEPRECIATION D
				         ON D.FIXED_ASSET_ID = F.ID
				WHERE  F.ID = :inputId
				       AND F.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteBankAccount">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ACCOUNT_ID" type="long" />
		<return-scalar column="ACCOUNT_TRANSACTION_ID" type="long" />
		<!-- <return-scalar column="BUDGET_ID" type="long" /> -->
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="VENDOR_ID" type="long" />
		<return-scalar column="SALES_PERSON_ID" type="long" />
		<return-scalar column="TAX_AGENCY_ID" type="long" />
		<return-scalar column="FIXED_ASSET_ID" type="long" />
		<return-scalar column="CASH_PURCHASE_ID" type="long" />
		<return-scalar column="CASH_SALES_ID" type="long" />
		<return-scalar column="CREDIT_CARD_CHARGE_ID" type="long" />
		<return-scalar column="CUSTOMER_CREDIT_MEMO_ID" type="long" />
		<return-scalar column="CUSTOMER_REFUND_ID" type="long" />
		<return-scalar column="MAKE_DEPOSIT_ID" type="long" />
		<return-scalar column="PAY_BILL_ID" type="long" />
		<return-scalar column="VENDOR_PAYMENT_ID" type="long" />
		<return-scalar column="PURCHASE_ORDER_ID" type="long" />
		<return-scalar column="RECEIVE_PAYMENT_ID" type="long" />
		<return-scalar column="PAY_EXPENSE_ID" type="long" />
		<return-scalar column="WRITE_CHECK_ID" type="long" />
		<return-scalar column="TRANSFER_FUND_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		<return-scalar column="TRANSACTION_PAY_BILL_ID" type="long" />
		<return-scalar column="TRANSACTION_RECEIVE_PAYMENT_ID"
			type="long" />
		<return-scalar column="TRANSACTION_MAKEDEPOSIT_ENTRIES_ID"
			type="long" />
		<return-scalar column="TRANSACTION_EXPENSE_ID" type="long" />
		<return-scalar column="TRANSACTION_DEPOSIT_ITEM_ID"
			type="long" />
		<return-scalar column="CPP_ID" type="long" />
		
		<![CDATA[
				SELECT AC.ID      AS ACCOUNT_ID,
				       CASE
				         WHEN (SELECT JE.ID
				               FROM   JOURNAL_ENTRY JE
				               WHERE  JE.ID = AT.TRANSACTION_ID
				                      AND JE.ACCOUNT_ID = A.ID) IS NULL THEN AT.ID
				       END        AS ACCOUNT_TRANSACTION_ID,
				       C.ID       AS CUSTOMER_ID,
				       I.ID       AS ITEM_ID,
				       V.ID       AS VENDOR_ID,
				       SP.ID      AS SALES_PERSON_ID,
				       TA.ID      AS TAX_AGENCY_ID,
				       FA.ID      AS FIXED_ASSET_ID,
				       PST.ID     AS PAY_TAX_ID,
				       CP.ID      AS CASH_PURCHASE_ID,
				       CS.ID      AS CASH_SALES_ID,
				       CCC.ID     AS CREDIT_CARD_CHARGE_ID,
				       CCM.ID     AS CUSTOMER_CREDIT_MEMO_ID,
				       CF.ID      AS CUSTOMER_REFUND_ID,
				       MD.ID      AS MAKE_DEPOSIT_ID,
				       TDI.ID     AS TRANSACTION_DEPOSIT_ITEM_ID,
				       PB.ID      AS PAY_BILL_ID,
				       VP.ID      AS VENDOR_PAYMENT_ID,
				       PO.ID      AS PURCHASE_ORDER_ID,
				       RP.ID      AS RECEIVE_PAYMENT_ID,
				       PE.ID      AS PAY_EXPENSE_ID,
				       WC.ID      AS WRITE_CHECK_ID,
				       TF.ID      AS TRANSFER_FUND_ID,
				       CASE
				         WHEN (SELECT JE.ID
				               FROM   JOURNAL_ENTRY JE
				               WHERE  JE.ID = TI.TRANSACTION_ID
				                      AND JE.ACCOUNT_ID = A.ID) IS NULL THEN TI.ID
				       END        AS TRANSACTION_ITEM_ID,
				       TPB.ID     AS TRANSACTION_PAY_BILL_ID,
				       TRP.ID     AS TRANSACTION_RECEIVE_PAYMENT_ID,
				       TMDE.ID    AS TRANSACTION_MAKEDEPOSIT_ENTRIES_ID,
				       TE.ID      AS TRANSACTION_EXPENSE_ID,
				       CPP.ID     AS CPP_ID
				FROM   ACCOUNT A
				       LEFT OUTER JOIN ACCOUNT AC
				         ON A.ID = AC.PARENT_ID
				             OR A.ID = AC.LINKED_ID
				       LEFT OUTER JOIN ACCOUNT_TRANSACTION AT
				         ON A.ID = AT.ACCOUNT_ID
				       LEFT OUTER JOIN COMPANY C
				         ON A.ID = C.OPENING_BALANCES_ID
				             OR A.ID = C.RETAINED_EARNINGS_ID
				             OR A.ID = C.OTHER_CASH_INCOME_ID
				             OR A.ID = C.OTHER_CASH_EXPENSE_ID
				             OR A.ID = C.CASH_DISCOUNTS_GIVEN
				             OR A.ID = C.CASH_DISCOUNTS_TAKEN
				             OR A.ID = C.TAX_LIABILITY_ACCOUNT_ID
				             OR A.ID = C.VAT_FILED_LIABILITY_ACCOUNT_ID
				             OR A.ID = C.PENDING_ITEM_RECEIPTS_ACCOUNT_ID
				       LEFT OUTER JOIN CURRENCY CURR
				       	 ON A.ID = CURR.ACCOUNTS_PAYABLE_ID
				       	 	 OR A.ID = CURR.ACCOUNTS_RECEIVABLE_ID
				       LEFT OUTER JOIN ITEM I
				         ON A.ID = I.INCOME_ACCOUNT_ID
				             OR A.ID = I.EXPENSE_ACCOUNT_ID
				       LEFT OUTER JOIN VENDOR V
				         ON A.ID = V.EXPENSE_ACCOUNT_ID
				       LEFT OUTER JOIN SALES_PERSON SP
				         ON A.ID = SP.EXPENSE_ACCOUNT_ID
				       LEFT OUTER JOIN TAXAGENCY TA
				         ON A.ID = TA.SALES_ACCOUNT_ID
				             OR A.ID = PURCHASE_ACCOUNT_ID
				       LEFT OUTER JOIN FIXED_ASSET FA
				         ON A.ID = FA.ASSET_ACCOUNT_ID
				             OR A.ID = FA.DEPRECIATION_EXPENSE_ACCOUNT_ID
				       LEFT OUTER JOIN PAY_TAX PST
				         ON A.ID = PST.PAYFROM_ACCOUNT_ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON A.ID = CP.PAYFROM_ACCOUNT_ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON A.ID = CS.DEPOSIT_IN_ACCOUNT_ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON A.ID = CCC.PAYFROM_ACCOUNT_ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON A.ID = CCM.ACCOUNT_ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CF
				         ON A.ID = CF.PAYFROM_ACCOUNT_ID
				       LEFT OUTER JOIN MAKE_DEPOSIT MD
				         ON A.ID = MD.DEPOSIT_TO
				       LEFT OUTER JOIN TRANSACTION_DEPOSIT_ITEM TDI
				         ON A.ID = TDI.ACCOUNT_ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON A.ID = PB.PAYFROM_ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON A.ID = VP.PAYFROM_ID
				       LEFT OUTER JOIN PURCHASE_ORDER PO
				         ON A.ID = PO.SHIP_TO_ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON A.ID = RP.ACCOUNT_ID
				       LEFT OUTER JOIN PAY_EXPENSE PE
				         ON A.ID = PE.ACCOUNT_ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON A.ID = WC.ACCOUNT_ID
				       LEFT OUTER JOIN TRANSFER_FUND TF
				         ON A.ID = TF.DEPOSIT_IN_ID
				             OR A.ID = TF.CASH_BACK_ACCOUNT_ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON A.ID = TI.ACCOUNT_ID
				       LEFT OUTER JOIN TRANSACTION_PAYBILL TPB
				         ON A.ID = TPB.DISCOUNT_ID
				       LEFT OUTER JOIN TRANSACTION_RECEIVE_PAYMENT TRP
				         ON A.ID = TRP.DISCOUNT_ID
				             OR A.ID = TRP.WRITE_OFF_ID
				       LEFT OUTER JOIN TRANSACTION_MAKE_DEPOSIT_ENTRIES TMDE
				         ON A.ID = TMDE.ACCOUNT_ID
				       LEFT OUTER JOIN TRANSACTION_EXPENSE TE
				         ON A.ID = TE.ACCOUNT_ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
				         ON CPP.DEPOSITIN_ID = A.ID
				WHERE  A.ID = :inputId
				       AND A.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="canDeleteInvoice">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="RECEIVE_PAYMENT_ID" type="long" />
		
		<![CDATA[
				SELECT TR.ID AS RECEIVE_PAYMENT_ID
				FROM   INVOICE I
				       LEFT JOIN TRANSACTION T
				         ON T.ID = I.ID
				       LEFT JOIN TRANSACTION_RECEIVE_PAYMENT TR
				         ON TR.INVOICE_ID = I.ID
				WHERE  I.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteReceivePayment">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="INVOICE_ID" type="long" />
		<return-scalar column="CREDITS_ID" type="long" />
		
		<![CDATA[
				SELECT R.ID AS ID
				FROM   RECEIVE_PAYMENT R
				       LEFT JOIN TRANSACTION T
				         ON T.ID = R.ID
				WHERE  R.ID IS NULL
				       AND R.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteEnterBill">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_PAYBILL_ID" type="long" />
		<return-scalar column="ESTIMATE_ID" type="long" />
		
		<![CDATA[
				SELECT TP.ID AS TRANSACTION_PAYBILL_ID,
				       ES.ID AS ESTIMATE_ID
				FROM   ENTER_BILL E
				       LEFT JOIN TRANSACTION T
				         ON T.ID = E.ID
				       LEFT JOIN TRANSACTION_PAYBILL TP
				         ON TP.ENTER_BILL_ID = E.ID
				       LEFT JOIN ENTERBILL_ESTIMATES IE
				         ON IE.ENTER_BILL_ID = E.ID
				       LEFT JOIN ESTIMATE ES
				         ON ES.ID = IE.ELT
				            AND ES.USED_INVOICE IS NOT NULL
				WHERE  E.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeletePayBill">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT TI.ID AS ID
				FROM   PAY_BILL P
				       LEFT JOIN TRANSACTION T
				         ON T.ID = P.ID
				       LEFT JOIN TDSTRANSACTIONITEM TI
				         ON TI.TRANSACTION_ID = P.ID
				WHERE  P.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteVendorPrePayment">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT TI.ID AS ID
				FROM   VENDOR_PAYMENT P
				       LEFT JOIN TRANSACTION T
				         ON T.ID = P.ID
				       LEFT JOIN TDSTRANSACTIONITEM TI
				         ON TI.TRANSACTION_ID = P.ID
				WHERE  P.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteCustomerCreditMemo">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT C.ID AS ID
				FROM   CUSTOMER_CREDIT_MEMO C
				       LEFT JOIN TRANSACTION T
				         ON T.ID = C.ID
				WHERE  C.ID IS NULL
				       AND C.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteVendorCreditMemo">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT C.ID AS ID
				FROM   VENDOR_CREDIT_MEMO C
				       LEFT JOIN TRANSACTION T
				         ON T.ID = C.ID
				WHERE  C.ID IS NULL
				       AND C.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteCreditCardCharge">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT CC.ID AS ID
				FROM   CREDIT_CARD_CHARGES CC
				       LEFT JOIN TRANSACTION T
				         ON T.ID = CC.ID
				WHERE  CC.ID IS NULL
				       AND CC.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteBudget">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="BUDGET_ITEM_ID" type="long" />
		
		<![CDATA[
				SELECT BI.ID AS BUDGET_ITEM_ID
				FROM   BUDGET B
				       LEFT JOIN BUDGETITEM BI
				         ON BI.BUDGET_ID = B.ID
				WHERE  B.COMPANY_ID = :companyId
				       AND B.ID = :inputId
				LIMIT  1  
				]]>

	</sql-query>


	<sql-query name="canDeleteCashPurchase">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ESTIMATE_ID" type="long" />
		
		<![CDATA[
				SELECT ES.ID AS ESTIMATE_ID
				FROM   CASH_PURCHASE CP
				       LEFT JOIN TRANSACTION T
				         ON T.ID = CP.ID
				       LEFT JOIN CASH_PURCHASE_ESTIMATES CE
				         ON CE.	CASH_PURCHASE_ID = CP.ID
				       LEFT JOIN ESTIMATE ES
				         ON ES.ID = CE.ELT
				            AND ES.USED_INVOICE IS NOT NULL
				WHERE  CP.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  

				]]>

	</sql-query>

	<sql-query name="canDeleteTransferFund">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT TF.ID AS ID
				FROM   TRANSFER_FUND TF
				       LEFT JOIN TRANSACTION T
				         ON T.ID = TF.ID
				WHERE  TF.ID IS NULL
				       AND TF.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteEstimate">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="INVOICE_ID" type="long" />
		<return-scalar column="ENTER_BILL_ID" type="long" />
		<return-scalar column="CASHSALE_ID" type="long" />
		
		<![CDATA[
				SELECT E.USED_INVOICE   AS INVOICE_ID,
				       EE.ENTER_BILL_ID AS ENTER_BILL_ID,
				       E.USED_CASHSALES AS CASHSALE_ID
				FROM   ESTIMATE E
				       LEFT JOIN TRANSACTION T
				         ON T.ID = E.ID
				       LEFT JOIN ENTERBILL_ESTIMATES EE
				         ON EE.ELT = E.ID
				WHERE  E.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteCustomerRefund">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="RECEIVE_PAYMENT_ID" type="long" />
		
		<![CDATA[
				SELECT TR.ID AS RECEIVE_PAYMENT_ID
				FROM   CUSTOMER_REFUND CR
				       LEFT JOIN TRANSACTION T
				         ON T.ID = CR.ID
				       LEFT JOIN TRANSACTION_RECEIVE_PAYMENT TR
				         ON TR.CUSTOMER_REFUND_ID = CR.ID
				WHERE  CR.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteJournalEntry">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="RECEIVE_PAYMENT_ID" type="long" />
		<return-scalar column="PAYBILL_ID" type="long" />
		<return-scalar column="FIXED_ASSET_HIS_ID" type="long" />
		
		<![CDATA[
				SELECT TR.ID  AS RECEIVE_PAYMENT_ID,
				       TP.ID  AS PAYBILL_ID,
				       FAH.ID AS FIXED_ASSET_HIS_ID
				FROM   JOURNAL_ENTRY J
				       LEFT JOIN TRANSACTION T
				         ON T.ID = J.ID
				       LEFT JOIN TRANSACTION_PAYBILL TP
				         ON TP.JOURNAL_ENTRY_ID = J.ID
				       LEFT JOIN TRANSACTION_RECEIVE_PAYMENT TR
				         ON TR.JOURNAL_ENTRY_ID = J.ID
				       LEFT JOIN FIXED_ASSET_HISTORY FAH
				         ON FAH.JOURNAL_ENTRY_ID = J.ID
				WHERE  J.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteCustomerPrePayment">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT C.ID AS ID
				FROM   CUSTOMER_PREPAYMENT C
				       LEFT JOIN TRANSACTION T
				         ON T.ID = C.ID
				WHERE  C.ID IS NULL
				       AND C.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteCashSales">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT C.ID AS ID
				FROM   CASH_SALES C
				       LEFT JOIN TRANSACTION T
				         ON T.ID = C.ID
				WHERE  C.ID IS NULL
				       AND C.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteTAXAdjustment">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT TA.ID AS ID
				FROM   TAX_ADJUSTMENT TA
				       LEFT JOIN TRANSACTION T
				         ON T.ID = TA.ID
				WHERE  TA.ID IS NULL
				       AND TA.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteWriteCheck">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ESTIMATE_ID" type="long" />
		
		<![CDATA[
				SELECT ES.ID AS ESTIMATE_ID
				FROM   WRITE_CHECKS C
				       LEFT JOIN TRANSACTION T
				         ON T.ID = C.ID
				       LEFT JOIN WRITE_CHECKS_ESTIMATES WE
				         ON WE.WRITE_CHECKS_ID = C.ID
				       LEFT JOIN ESTIMATE ES
				         ON ES.ID = WE.ELT
				            AND ES.USED_INVOICE IS NOT NULL
				WHERE  C.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1 
				]]>

	</sql-query>

	<sql-query name="createSalesPurchasesView">
		
		<![CDATA[
				CREATE OR REPLACE VIEW SALES_PURCHASES_VIEW AS
				SELECT T.COMPANY_ID                      AS COMPANY_ID,
				       T.ID                              AS TRANSACTION_ID,
				       C.ID                              AS CUSTOMER_ID,
				       V.ID                              AS VENDOR_ID,
				       P.NAME                            AS NAME,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 4
				               OR T.T_TYPE = 8 THEN CG.NAME
				         WHEN T.T_TYPE = 2
				               OR T.T_TYPE = 6
				               OR T.T_TYPE = 14 THEN VG.NAME
				       END                               AS GROUP_NAME,
				       IT.TYPE                           AS ITEM_TYPE,
				       IG.NAME                           AS ITEM_GROUP,
				       T.T_TYPE                          AS TYPE,
				       T.T_DATE                          AS DATE,
				       T.NUMBER,
				       T.MEMO                            AS MEMO,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         WHEN T.T_TYPE = 6 THEN EB.DUE_DATE
				         ELSE NULL
				       END                               AS DUE_DATE,
				       PT.NAME                           AS PAYMENT_TERMS,
				       CASE
				         WHEN TI.ITEM_ID IS NOT NULL THEN IT.NAME
				         WHEN TI.ACCOUNT_ID IS NOT NULL THEN A.NAME
				       END                               AS ITEM_NAME,
				       CASE
				         WHEN T.T_TYPE = 4
				               OR T.T_TYPE = 14 THEN -1 * TI.QTY_VALUE
				         ELSE TI.QTY_VALUE
				       END                               AS QUANTITY,
				       TI.QTY_UNIT                       AS UNIT,
				       TI.UNIT_PRICE * T.CURRENCY_FACTOR AS UNIT_PRICE,
				       TI.DISCOUNT    AS DISCOUNT,
				       CASE
				         WHEN T.T_TYPE = 4
				               OR T_TYPE = 14 THEN -1 * TI.LINE_TOTAL * T.CURRENCY_FACTOR
				         ELSE TI.LINE_TOTAL * T.CURRENCY_FACTOR
				       END                               AS AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 8 THEN T.NUMBER
				       END                               AS SO_OR_QUOTE_NO,
				       CASE
				         WHEN T.T_TYPE = 1 THEN CS.DELIVERY_DATE
				         WHEN T.T_TYPE = 8 THEN I.DELIVERY_DATE
				         WHEN T.T_TYPE = 2 THEN CP.DELIVERY_DATE
				         WHEN T.T_TYPE = 6 THEN EB.DELIVERY_DATE
				         ELSE NULL
				       END                               AS SHIPMENT_OR_DELIVERY_DATE,
				       IT.SALES_DESCRIPTION,
				       IT.PURCHASE_DESCRIPTION,
				       T.SAVE_STATUS                     AS SAVE_STATUS,
				       T.REFERENCE                       AS REFERENCE,
				       T.CURRENCY_FACTOR                 AS CURRENCY_FACTOR,
				       IT.PARENT_ID,
				       IT.DEPTH,
				       IT.PATH		 
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON T.ID = TI.TRANSACTION_ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CS.CUSTOMER_ID
				             OR C.ID = CCM.CUSTOMER_ID
				             OR C.ID = I.CUSTOMER_ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				             OR V.ID = VCM.VENDOR_ID
				             OR V.ID = EB.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				             OR P.ID = V.ID
				       LEFT OUTER JOIN PAYMENTTERMS PT
				         ON PT.ID = EB.PAYMENT_TERM_ID
				             OR PT.ID = I.PAYMENT_TERMS_ID
				       LEFT OUTER JOIN CUSTOMER_GROUP CG
				         ON CG.ID = C.CUSTOMER_GROUP_ID
				       LEFT OUTER JOIN VENDOR_GROUP VG
				         ON VG.ID = V.VENDOR_GROUP_ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				       LEFT OUTER JOIN ITEMGROUP IG
				         ON IG.ID = IT.ITEMGROUP_ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				WHERE  T.SAVE_STATUS = 203
				       AND ( TI.ITEM_ID IS NOT NULL
				              OR TI.ACCOUNT_ID IS NOT NULL )
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="createTransactionHistoryView">
	
		<![CDATA[
				CREATE OR REPLACE VIEW TRANSACTION_HISTORY_VIEW AS
				SELECT T.COMPANY_ID  AS COMPANY_ID,
				       T.ID          AS TRANSACTION_ID,
				       C.ID          AS CUSTOMER_ID,
				       V.ID          AS VENDOR_ID,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 4
				               OR T.T_TYPE = 5
				               OR T.T_TYPE = 8
				               OR T.T_TYPE = 12
				               OR T.T_TYPE = 10
				               OR ( T.T_TYPE = 15
				                    AND WC.CUSTOMER_ID IS NOT NULL )
				               OR ( T.T_TYPE = 16
				                    AND P.TYPE = 1 )
				               OR T.T_TYPE = 29 THEN P.NAME
				         WHEN T.T_TYPE = 2
				               OR T.T_TYPE = 6
				               OR T.T_TYPE = 11
				               OR T.T_TYPE = 25
				               OR T.T_TYPE = 14
				               OR T.T_TYPE = 3
				               OR T.T_TYPE = 10
				               OR ( T.T_TYPE = 15
				                    AND WC.VENDOR_ID IS NOT NULL )
				               OR ( T.T_TYPE = 16
				                    AND P.TYPE = 2 )
				               OR T.T_TYPE = 26
				               OR T.T_TYPE = 27 THEN P.NAME
				       END           AS NAME,
				       T.T_TYPE      AS TYPE,
				       T.T_DATE      AS DATE,
				       T.NUMBER,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 3
				               OR T.T_TYPE = 8
				               OR T.T_TYPE = 2
				               OR T.T_TYPE = 6
				               OR T.T_TYPE = 27
				               OR T.T_TYPE = 10 THEN T.TOTAL * T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 4
				               OR T.T_TYPE = 14
				               OR T.T_TYPE = 29 THEN -1 * T.TOTAL * T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 15 THEN CASE
				                                   WHEN WC.PAY_TO_TYPE = 1 THEN
				                                   -1 * T.TOTAL * T.CURRENCY_FACTOR
				                                   WHEN WC.PAY_TO_TYPE = 2 THEN
				                                   T.TOTAL * T.CURRENCY_FACTOR
				                                   ELSE 0.0
				                                 END
				         WHEN T.T_TYPE = 16 THEN CASE
				                                   WHEN P.TYPE = 2 THEN
				                                   -1 * T.TOTAL * T.CURRENCY_FACTOR
				                                   ELSE T.TOTAL * T.CURRENCY_FACTOR
				                                 END
				         ELSE 0.0
				       END           AS INVOICED_OR_TRANSASCTION_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 3
				               OR T.T_TYPE = 2
				               OR T.T_TYPE = 26
				               OR T.T_TYPE = 27 THEN T.TOTAL * T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 5
				               OR T.T_TYPE = 15
				               OR T.T_TYPE = 11
				               OR T.T_TYPE = 25
				               OR T.T_TYPE = 12 THEN -1 * T.TOTAL * T.CURRENCY_FACTOR
				         ELSE 0.0
				       END           AS PAID_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 3
				               OR T.T_TYPE = 5
				               OR T.T_TYPE = 8
				               OR T.T_TYPE = 2
				               OR T.T_TYPE = 14
				               OR T.T_TYPE = 15
				               OR T.T_TYPE = 27 THEN T.TOTAL
				         WHEN T.T_TYPE = 11 THEN CASE
				                                                                   WHEN
				                                   (SELECT SUM(TPB.CASH_DISCOUNT *
				                                               T.CURRENCY_FACTOR)
				                                    FROM   TRANSACTION_PAYBILL TPB
				                                    WHERE  TPB.TRANSACTION_ID = T.ID
				                                           AND TPB.DISCOUNT_ID IS NOT NULL
				                                           AND TPB.CASH_DISCOUNT > 0.0) IS
				                                   NULL THEN T.TOTAL
				                                                                   ELSE
				                                   T.TOTAL + (SELECT SUM(TPB.CASH_DISCOUNT *
				                                                         T.CURRENCY_FACTOR)
				                                              FROM   TRANSACTION_PAYBILL TPB
				                                              WHERE  TPB.TRANSACTION_ID =
				                                                     T.ID
				                                                     AND TPB.DISCOUNT_ID IS
				                                                         NOT NULL
				                                                     AND TPB.CASH_DISCOUNT >
				                                                         0.0)
				                                                                 
				                                 END
						 WHEN T.T_TYPE = 25 THEN
				                                   T.TOTAL * T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 16 THEN CASE
				                                   WHEN P.TYPE = 1 THEN
				                                   T.TOTAL * T.CURRENCY_FACTOR
				                                   ELSE 0.0
				                                 END
				         ELSE 0.0
				       END           AS DEBIT,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 3
				               OR T.T_TYPE = 4
				               OR T.T_TYPE = 2
				               OR T.T_TYPE = 10
				               OR T.T_TYPE = 6
				               OR T.T_TYPE = 15
				               OR T.T_TYPE = 27
				               OR T.T_TYPE = 29 THEN T.TOTAL * T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 12 THEN ( RP.AMOUNT + RP.TOTAL_CASH_DISCOUNT +
				                                   RP.TOTAL_WRITE_OFF ) * T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 16 THEN CASE
				                                   WHEN P.TYPE = 2 THEN
				                                   -1 * T.TOTAL * T.CURRENCY_FACTOR
				                                   ELSE 0.0
				                                 END
				         ELSE 0.0
				       END           AS CREDIT,
				       CASE
				         WHEN T.T_TYPE = 12 THEN RP.TOTAL_CASH_DISCOUNT * T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 11 THEN (SELECT SUM(TPB.CASH_DISCOUNT *
				                                             T.CURRENCY_FACTOR)
				                                  FROM   TRANSACTION_PAYBILL TPB
				                                  WHERE  TPB.TRANSACTION_ID = T.ID)
				         ELSE 0.0
				       END           AS DISCOUNT,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         WHEN T.T_TYPE = 6 THEN EB.DUE_DATE
				         ELSE NULL
				       END           AS DUE_DATE,
				       PT.NAME       AS PAYMENT_TERMS,
				       T.SAVE_STATUS AS SAVE_STATUS,
				       T.REFERENCE   AS REFERENCE,
				       CASE
				         WHEN T.T_TYPE = 25 THEN NULL
				         ELSE T.MEMO
				       END           AS MEMO,
				       CASE
				         WHEN T.T_TYPE = 12 THEN RP.TOTAL_WRITE_OFF * T.CURRENCY_FACTOR
				         ELSE 0.0
				       END           AS WRITE_OFF,
				       T.STATUS      AS PAYMENT_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON T.ID = CR.ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN TRANSACTION_PAYBILL TPB
				         ON TPB.TRANSACTION_ID = PB.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT OUTER JOIN TRANSFER_FUND TF
				         ON T.ID = TF.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN JOURNAL_ENTRY JE
				         ON JE.ID = T.ID
				            AND (SELECT PY.TYPE
				                 FROM   PAYEE PY
				                 WHERE  PY.ID = JE.PAYEE_ID
				                        AND JE.PAYEE_ID IS NOT NULL) IN ( 2, 1 )
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
				         ON CPP.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CS.CUSTOMER_ID
				             OR C.ID = CCM.CUSTOMER_ID
				             OR C.ID = I.CUSTOMER_ID
				             OR C.ID = CR.CUSTOMER_ID
				             OR C.ID = RP.CUSTOMER_ID
				             OR C.ID = WC.CUSTOMER_ID
				             OR C.ID = JE.PAYEE_ID
				             OR C.ID = CPP.CUSTOMER_ID
				       LEFT OUTER JOIN PAYMENTTERMS PT
				         ON PT.ID = EB.PAYMENT_TERM_ID
				             OR PT.ID = I.PAYMENT_TERMS_ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				             OR V.ID = VCM.VENDOR_ID
				             OR V.ID = EB.VENDOR_ID
				             OR V.ID = PB.VENDOR_ID
				             OR V.ID = VP.VENDOR_ID
				             OR V.ID = CCC.VENDOR_ID
				             OR V.ID = WC.VENDOR_ID
				             OR V.ID = JE.PAYEE_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				             OR P.ID = V.ID
				             OR P.ID = JE.PAYEE_ID
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="createSalesPurchasesViewForclient">
		
		<![CDATA[
				CREATE VIEW IF NOT EXISTS SALES_PURCHASES_VIEW AS
				SELECT T.COMPANY_ID  AS COMPANY_ID,
				       T.ID          AS TRANSACTION_ID,
				       C.ID          AS CUSTOMER_ID,
				       V.ID          AS VENDOR_ID,
				       P.NAME        AS NAME,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 4
				               OR T.T_TYPE = 8 THEN CG.NAME
				         WHEN T.T_TYPE = 2
				               OR T.T_TYPE = 6
				               OR T.T_TYPE = 14 THEN VG.NAME
				       END           AS GROUP_NAME,
				       IT.TYPE       AS ITEM_TYPE,
				       IG.NAME       AS ITEM_GROUP,
				       T.T_TYPE      AS TYPE,
				       T.T_DATE      AS DATE,
				       T.NUMBER,
				       T.MEMO        AS MEMO,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         WHEN T.T_TYPE = 6 THEN EB.DUE_DATE
				         ELSE NULL
				       END           AS DUE_DATE,
				       PT.NAME       AS PAYMENT_TERMS,
				       CASE
				         WHEN TI.ITEM_ID IS NOT NULL THEN IT.NAME
				         WHEN TI.ACCOUNT_ID IS NOT NULL THEN A.NAME
				       END           AS ITEM_NAME,
				       CASE
				         WHEN T.T_TYPE = 4
				               OR T.T_TYPE = 14 THEN ( -1 * TI.QTY_VALUE )
				         ELSE TI.QTY_VALUE
				       END           AS QUANTITY,
				       TI.QTY_UNIT   AS UNIT,
				       TI.UNIT_PRICE AS UNIT_PRICE,
				       TI.DISCOUNT   AS DISCOUNT,
				       CASE
				         WHEN T.T_TYPE = 4
				               OR T_TYPE = 14 THEN ( -1 * LINE_TOTAL )
				         ELSE TI.LINE_TOTAL
				       END           AS AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 8 THEN (SELECT T.NUMBER
				                                 FROM   TRANSACTION T
				                                        LEFT OUTER JOIN INVOICE_ESTIMATES IE
				                                          ON T.ID = IE.ESTIAMTE_ID)
				       END           AS SO_OR_QUOTE_NO,
				       CASE
				         WHEN T.T_TYPE = 1 THEN CS.DELIVERY_DATE
				         WHEN T.T_TYPE = 8 THEN I.DELIVERY_DATE
				         WHEN T.T_TYPE = 2 THEN CP.DELIVERY_DATE
				         WHEN T.T_TYPE = 6 THEN EB.DELIVERY_DATE
				         ELSE NULL
				       END           AS SHIPMENT_OR_DELIVERY_DATE,
				       IT.SALES_DESCRIPTION,
				       IT.PURCHASE_DESCRIPTION,
				       T.SAVE_STATUS AS SAVE_STATUS,
				       T.REFERENCE   AS REFERENCE,
				       IT.PARENT_ID
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON T.ID = TI.TRANSACTION_ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CS.CUSTOMER_ID
				             OR C.ID = CCM.CUSTOMER_ID
				             OR C.ID = I.CUSTOMER_ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				             OR V.ID = VCM.VENDOR_ID
				             OR V.ID = EB.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				             OR P.ID = V.ID
				       LEFT OUTER JOIN PAYMENTTERMS PT
				         ON PT.ID = EB.PAYMENT_TERM_ID
				             OR PT.ID = I.PAYMENT_TERMS_ID
				       LEFT OUTER JOIN CUSTOMER_GROUP CG
				         ON CG.ID = C.CUSTOMER_GROUP_ID
				       LEFT OUTER JOIN VENDOR_GROUP VG
				         ON VG.ID = V.VENDOR_GROUP_ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				       LEFT OUTER JOIN ITEMGROUP IG
				         ON IG.ID = IT.ITEMGROUP_ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				WHERE  TI.ITEM_ID IS NOT NULL
				        OR TI.ACCOUNT_ID IS NOT NULL
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="createTransactionHistoryViewForclient">
		
		<![CDATA[
				CREATE VIEW IF NOT EXISTS TRANSACTION_HISTORY_VIEW AS
				SELECT T.COMPANY_ID  AS COMPANY_ID,
				       T.ID          AS TRANSACTION_ID,
				       C.ID          AS CUSTOMER_ID,
				       V.ID          AS VENDOR_ID,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 4
				               OR T.T_TYPE = 5
				               OR T.T_TYPE = 8
				               OR T.T_TYPE = 12
				               OR T.T_TYPE = 10
				               OR ( T.T_TYPE = 15
				                    AND WC.CUSTOMER_ID IS NOT NULL )
				               OR ( T.T_TYPE = 16
				                    AND P.TYPE = 1 )
				               OR T.T_TYPE = 29 THEN P.NAME
				         WHEN T.T_TYPE = 2
				               OR T.T_TYPE = 6
				               OR T.T_TYPE = 11
				               OR T.T_TYPE = 25
				               OR T.T_TYPE = 14
				               OR T.T_TYPE = 3
				               OR T.T_TYPE = 10
				               OR ( T.T_TYPE = 15
				                    AND WC.VENDOR_ID IS NOT NULL )
				               OR ( T.T_TYPE = 16
				                    AND P.TYPE = 2 )
				               OR T.T_TYPE = 27 THEN P.NAME
				       END           AS NAME,
				       T.T_TYPE      AS TYPE,
				       T.T_DATE      AS DATE,
				       T.NUMBER,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 3
				               OR T.T_TYPE = 8
				               OR T.T_TYPE = 2
				               OR T.T_TYPE = 6
				               OR T.T_TYPE = 27
				               OR T.T_TYPE = 10 THEN T.TOTAL
				         WHEN T.T_TYPE = 4
				               OR T.T_TYPE = 14
				               OR T.T_TYPE = 29 THEN -1 * T.TOTAL
				         WHEN T.T_TYPE = 15 THEN CASE
				                                   WHEN WC.PAY_TO_TYPE = 1 THEN -1 * T.TOTAL
				                                   WHEN WC.PAY_TO_TYPE = 2 THEN T.TOTAL
				                                   ELSE 0.0
				                                 END
				         WHEN T.T_TYPE = 16 THEN CASE
				                                   WHEN P.TYPE = 2 THEN -1 * TI.LINE_TOTAL
				                                   ELSE TI.LINE_TOTAL
				                                 END
				         ELSE 0.0
				       END           AS INVOICED_OR_TRANSASCTION_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 3
				               OR T.T_TYPE = 2
				               OR T.T_TYPE = 27 THEN T.TOTAL
				         WHEN T.T_TYPE = 5
				               OR T.T_TYPE = 15
				               OR T.T_TYPE = 11
				               OR T.T_TYPE = 25
				               OR T.T_TYPE = 12 THEN -1 * T.TOTAL
				         ELSE 0.0
				       END           AS PAID_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 3
				               OR T.T_TYPE = 5
				               OR T.T_TYPE = 8
				               OR T.T_TYPE = 2
				               OR T.T_TYPE = 14
				               OR T.T_TYPE = 15
				               OR T.T_TYPE = 27 THEN T.TOTAL
				         WHEN T.T_TYPE = 11 THEN CASE
				                                   WHEN
				                                   (SELECT SUM(TPB.CASH_DISCOUNT)
				                                    FROM   TRANSACTION_PAYBILL TPB
				                                    WHERE  TPB.TRANSACTION_ID = T.ID
				                                           AND TPB.DISCOUNT_ID IS NOT NULL
				                                           AND TPB.CASH_DISCOUNT > 0.0) IS
				                                   NULL THEN T.TOTAL
				                                                                   ELSE
				                                   T.TOTAL + (SELECT SUM(TPB.CASH_DISCOUNT)
				                                              FROM   TRANSACTION_PAYBILL TPB
				                                              WHERE  TPB.TRANSACTION_ID =
				                                                     T.ID
				                                                     AND TPB.DISCOUNT_ID IS
				                                                         NOT NULL
				                                                     AND TPB.CASH_DISCOUNT >
				                                                         0.0)
				                                                                 END
				                                                                 
				                                   WHEN PB.T_TYPE = 25 THEN T.TOTAL
				                                
				         WHEN T.T_TYPE = 16 THEN CASE
				                                   WHEN P.TYPE = 1 THEN TI.LINE_TOTAL
				                                   ELSE 0.0
				                                 END
				         ELSE 0.0
				       END           AS DEBIT,
				       CASE
				         WHEN T.T_TYPE = 1
				               OR T.T_TYPE = 3
				               OR T.T_TYPE = 4
				               OR T.T_TYPE = 2
				               OR T.T_TYPE = 10
				               OR T.T_TYPE = 6
				               OR T.T_TYPE = 15
				               OR T.T_TYPE = 27
				               OR T.T_TYPE = 29 THEN T.TOTAL
				         WHEN T.T_TYPE = 12 THEN RP.AMOUNT + RP.TOTAL_CASH_DISCOUNT +
				                                 RP.TOTAL_WRITE_OFF
				         WHEN T.T_TYPE = 16 THEN CASE
				                                   WHEN P.TYPE = 2 THEN -1 * TI.LINE_TOTAL
				                                   ELSE 0.0
				                                 END
				         ELSE 0.0
				       END           AS CREDIT,
				       CASE
				         WHEN T.T_TYPE = 12 THEN RP.TOTAL_CASH_DISCOUNT
				         WHEN T.T_TYPE = 11 THEN (SELECT SUM(TPB.CASH_DISCOUNT)
				                                  FROM   TRANSACTION_PAYBILL TPB
				                                  WHERE  TPB.TRANSACTION_ID = T.ID)
				         ELSE 0.0
				       END           AS DISCOUNT,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         WHEN T.T_TYPE = 6 THEN EB.DUE_DATE
				         ELSE NULL
				       END           AS DUE_DATE,
				       PT.NAME       AS PAYMENT_TERMS,
				       T.SAVE_STATUS AS SAVE_STATUS,
				       T.REFERENCE   AS REFERENCE,
				       T.MEMO        AS MEMO,
				       CASE
				         WHEN T.T_TYPE = 12 THEN RP.TOTAL_WRITE_OFF
				         ELSE 0.0
				       END           AS WRITE_OFF,
				       T.STATUS      AS PAYMENT_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON T.ID = CR.ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN TRANSACTION_PAYBILL TPB
				         ON TPB.TRANSACTION_ID = PB.ID
				        LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT OUTER JOIN TRANSFER_FUND TF
				         ON T.ID = TF.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN JOURNAL_ENTRY JE
				         ON JE.ID = T.ID
				            AND (SELECT PY.TYPE
				                 FROM   PAYEE PY
				                 WHERE  PY.ID = JE.PAYEE_ID
				                        AND JE.PAYEE_ID IS NOT NULL) IN ( 2, 1 )
				       LEFT JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
				         ON CPP.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CS.CUSTOMER_ID
				             OR C.ID = CCM.CUSTOMER_ID
				             OR C.ID = I.CUSTOMER_ID
				             OR C.ID = CR.CUSTOMER_ID
				             OR C.ID = RP.CUSTOMER_ID
				             OR C.ID = WC.CUSTOMER_ID
				             OR C.ID = JE.PAYEE_ID
				             OR C.ID = CPP.CUSTOMER_ID
				       LEFT OUTER JOIN PAYMENTTERMS PT
				         ON PT.ID = EB.PAYMENT_TERM_ID
				             OR PT.ID = I.PAYMENT_TERMS_ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				             OR V.ID = VCM.VENDOR_ID
				             OR V.ID = EB.VENDOR_ID
				             OR V.ID = PB.VENDOR_ID
				             OR V.ID = VP.VENDOR_ID
				             OR V.ID = CCC.VENDOR_ID
				             OR V.ID = WC.VENDOR_ID
				             OR V.ID = JE_PAYEE_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				             OR P.ID = V.ID
				             OR P.ID = JE.PAYEE_ID
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="getPayeesForCenters">
		<query-param name="companyId" type="long" />
		<query-param name="isActive" type="boolean" />
		<query-param name="payee_type" type="int" />
		<return-scalar column="IS_ACTIVE" type="boolean" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="ID" type="long" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="PAYEE_CURRENCY" type="long" />
		<return-scalar column="ACCOUNTER_TYPE" type="int" />
			<![CDATA[
				SELECT P.is_active AS IS_ACTIVE,
				       P.NAME      AS CUSTOMER_NAME,
				       P.id        AS ID,
				       P.balance   AS BALANCE,
				       P.currency  AS PAYEE_CURRENCY,
				       P.TYPE      AS ACCOUNTER_TYPE
				FROM   payee P
				WHERE  P.company_id = :companyId
				       AND P.type = :payee_type
				       AND P.is_active = :isActive
				ORDER  BY P.NAME 
			]]>
	</sql-query>

	<sql-query name="getCustomersList">
		<query-param name="companyId" type="long" />
		<query-param name="isActive" type="boolean" />

		<return-scalar column="IS_ACTIVE" type="boolean" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNTER_TYPE" type="int" />
		<return-scalar column="ID" type="long" />
		<return-scalar column="CURRENT_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_FIRST_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_SECOND_MONTH_TOTAL"
			type="double" />
		<return-scalar column="PREVIOUS_THIRD_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_FOURTH_MONTH_TOTAL"
			type="double" />
		<return-scalar column="PREVIOUS_FIFTH_MONTH_TOTAL" type="double" />
		<return-scalar column="YEAR_TO_DATE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_CURRENCY_FACTOR"
			type="double" />
		<return-scalar column="PAYEE_CURRENCY" type="long" />
		
		<![CDATA[
				SELECT P.IS_ACTIVE AS IS_ACTIVE,
				       P.NAME      AS CUSTOMER_NAME,
				       P.TYPE      AS ACCOUNTER_TYPE,
				       P.ID        AS ID,
				       ( CASE
				           WHEN (SELECT COUNT(T1.TOTAL)
				                 FROM   TRANSACTION T1
				                 WHERE  T.ID = T1.ID
				                        AND T1.T_DATE BETWEEN :currentMonthStartDateCal AND
				                                              :currentMonthEndDateCal
				                        AND T1.SAVE_STATUS = 203
				                        AND T1.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 8 THEN (SELECT 
				                          							CASE WHEN CP IS NULL 
				                          									THEN I1.BALANCE_DUE 
				                          									ELSE  CASE WHEN CP.BALANCE = 0 THEN 0 ELSE -1*CP.BALANCE END 
				                          									END
				                                                  FROM   INVOICE I1
										  									LEFT JOIN CREDITS_AND_PAYMENTS CP 
										  									ON CP.ID= T.CREDITS_AND_PAYMENTS_ID
				                                                  WHERE  I1.ID = T.ID)
				                          WHEN T.T_TYPE = 4
				                                OR T.T_TYPE = 29 THEN
				                          (SELECT -1 * CAP.BALANCE
				                           FROM   CREDITS_AND_PAYMENTS CAP
				                           WHERE  CAP.TRANSACTION_ID = T.ID)
				                          WHEN T.T_TYPE = 5 THEN (SELECT CR1.BALANCE_DUE
				                                                  FROM   CUSTOMER_REFUND CR1
				                                                  WHERE  CR1.ID = T.ID)
				                           WHEN T.T_TYPE = 16 THEN (SELECT J.BALANCE_DUE FROM JOURNAL_ENTRY J WHERE J.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T1
				                 WHERE  T.ID = T1.ID
				                        AND T1.T_DATE BETWEEN :currentMonthStartDateCal AND
				                                              :currentMonthEndDateCal
				                        AND T1.SAVE_STATUS = 203
				                        AND T1.STATUS!=3)
				         END )     AS CURRENT_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T2.TOTAL)
				                 FROM   TRANSACTION T2
				                 WHERE  T.ID = T2.ID
				                        AND T2.T_DATE BETWEEN :previousFirstMonthStartDateCal
				                                              AND
				                                              :previousFirstMonthEndDateCal
				                        AND T2.SAVE_STATUS = 203
				                        AND T2.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 8 THEN (SELECT 
				                          							CASE WHEN CP IS NULL 
				                          									THEN I1.BALANCE_DUE 
				                          									ELSE  CASE WHEN CP.BALANCE = 0 THEN 0 ELSE -1*CP.BALANCE END 
				                          									END
				                                                  FROM   INVOICE I1
										  									LEFT JOIN CREDITS_AND_PAYMENTS CP 
										  									ON CP.ID= T.CREDITS_AND_PAYMENTS_ID
				                                                  WHERE  I1.ID = T.ID)
				                          WHEN T.T_TYPE = 4
				                                OR T.T_TYPE = 29 THEN
				                          (SELECT -1 * CAP.BALANCE
				                           FROM   CREDITS_AND_PAYMENTS CAP
				                           WHERE  CAP.TRANSACTION_ID = T.ID)
				                          WHEN T.T_TYPE = 5 THEN (SELECT CR1.BALANCE_DUE
				                                                  FROM   CUSTOMER_REFUND CR1
				                                                  WHERE  CR1.ID = T.ID)
				                           WHEN T.T_TYPE = 16 THEN (SELECT J.BALANCE_DUE FROM JOURNAL_ENTRY J WHERE J.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T2
				                 WHERE  T.ID = T2.ID
				                        AND T2.T_DATE BETWEEN :previousFirstMonthStartDateCal
				                                              AND
				                                              :previousFirstMonthEndDateCal
				                        AND T2.SAVE_STATUS = 203
				                        AND T2.STATUS!=3)
				         END )     AS PREVIOUS_FIRST_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T3.TOTAL)
				                 FROM   TRANSACTION T3
				                 WHERE  T.ID = T3.ID
				                        AND T3.T_DATE BETWEEN :previousSecondMonthStartDateCal
				                                              AND
				                                              :previousSecondMonthEndDateCal
				                        AND T3.SAVE_STATUS = 203
				                        AND T3.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 8 THEN (SELECT 
				                          							CASE WHEN CP IS NULL 
				                          									THEN I1.BALANCE_DUE 
				                          									ELSE  CASE WHEN CP.BALANCE = 0 THEN 0 ELSE -1*CP.BALANCE END 
				                          									END
				                                                  FROM   INVOICE I1
										  									LEFT JOIN CREDITS_AND_PAYMENTS CP 
										  									ON CP.ID= T.CREDITS_AND_PAYMENTS_ID
				                                                  WHERE  I1.ID = T.ID)
				                          WHEN T.T_TYPE = 4
				                                OR T.T_TYPE = 29 THEN
				                          (SELECT -1 * CAP.BALANCE
				                           FROM   CREDITS_AND_PAYMENTS CAP
				                           WHERE  CAP.TRANSACTION_ID = T.ID)
				                          WHEN T.T_TYPE = 5 THEN (SELECT CR1.BALANCE_DUE
				                                                  FROM   CUSTOMER_REFUND CR1
				                                                  WHERE  CR1.ID = T.ID)
				                           WHEN T.T_TYPE = 16 THEN (SELECT J.BALANCE_DUE FROM JOURNAL_ENTRY J WHERE J.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T3
				                 WHERE  T.ID = T3.ID
				                        AND T3.T_DATE BETWEEN :previousSecondMonthStartDateCal
				                                              AND
				                                              :previousSecondMonthEndDateCal
				                        AND T3.SAVE_STATUS = 203
				                        AND T3.STATUS!=3)
				         END )     AS PREVIOUS_SECOND_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T4.TOTAL)
				                 FROM   TRANSACTION T4
				                 WHERE  T.ID = T4.ID
				                        AND T4.T_DATE BETWEEN :previousThirdMonthStartDateCal
				                                              AND
				                                              :previousThirdMonthEndDateCal
				                        AND T4.SAVE_STATUS = 203
				                        AND T4.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 8 THEN (SELECT 
				                          							CASE WHEN CP IS NULL 
				                          									THEN I1.BALANCE_DUE 
				                          									ELSE  CASE WHEN CP.BALANCE = 0 THEN 0 ELSE -1*CP.BALANCE END 
				                          									END
				                                                  FROM   INVOICE I1
										  									LEFT JOIN CREDITS_AND_PAYMENTS CP 
										  									ON CP.ID= T.CREDITS_AND_PAYMENTS_ID
				                                                  WHERE  I1.ID = T.ID)
				                          WHEN T.T_TYPE = 4
				                                OR T.T_TYPE = 29 THEN
				                          (SELECT -1 * CAP.BALANCE
				                           FROM   CREDITS_AND_PAYMENTS CAP
				                           WHERE  CAP.TRANSACTION_ID = T.ID)
				                          WHEN T.T_TYPE = 5 THEN (SELECT CR1.BALANCE_DUE
				                                                  FROM   CUSTOMER_REFUND CR1
				                                                  WHERE  CR1.ID = T.ID)
				                           WHEN T.T_TYPE = 16 THEN (SELECT J.BALANCE_DUE FROM JOURNAL_ENTRY J WHERE J.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T4
				                 WHERE  T.ID = T4.ID
				                        AND T4.T_DATE BETWEEN :previousThirdMonthStartDateCal
				                                              AND
				                                              :previousThirdMonthEndDateCal
				                        AND T4.SAVE_STATUS = 203
				                        AND T4.STATUS!=3)
				         END )     AS PREVIOUS_THIRD_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T5.TOTAL)
				                 FROM   TRANSACTION T5
				                 WHERE  T.ID = T5.ID
				                        AND T5.T_DATE BETWEEN :previousFourthMonthStartDateCal
				                                              AND
				                                              :previousFourthMonthEndDateCal
				                        AND T5.SAVE_STATUS = 203
				                        AND T5.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 8 THEN (SELECT 
				                          							CASE WHEN CP IS NULL 
				                          									THEN I1.BALANCE_DUE 
				                          									ELSE  CASE WHEN CP.BALANCE = 0 THEN 0 ELSE -1*CP.BALANCE END 
				                          									END
				                                                  FROM   INVOICE I1
										  									LEFT JOIN CREDITS_AND_PAYMENTS CP 
										  									ON CP.ID= T.CREDITS_AND_PAYMENTS_ID
				                                                  WHERE  I1.ID = T.ID)
				                          WHEN T.T_TYPE = 4
				                                OR T.T_TYPE = 29 THEN
				                          (SELECT -1 * CAP.BALANCE
				                           FROM   CREDITS_AND_PAYMENTS CAP
				                           WHERE  CAP.TRANSACTION_ID = T.ID)
				                          WHEN T.T_TYPE = 5 THEN (SELECT CR1.BALANCE_DUE
				                                                  FROM   CUSTOMER_REFUND CR1
				                                                  WHERE  CR1.ID = T.ID)
				                          WHEN T.T_TYPE = 16 THEN (SELECT J.BALANCE_DUE FROM JOURNAL_ENTRY J WHERE J.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T5
				                 WHERE  T.ID = T5.ID
				                        AND T5.T_DATE BETWEEN :previousFourthMonthStartDateCal
				                                              AND
				                                              :previousFourthMonthEndDateCal
				                        AND T5.SAVE_STATUS = 203
				                        AND T5.STATUS!=3)
				         END )     AS PREVIOUS_FOURTH_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T6.TOTAL)
				                 FROM   TRANSACTION T6
				                 WHERE  T.ID = T6.ID
				                        AND T6.T_DATE BETWEEN :previousFifthMonthStartDateCal
				                                              AND
				                                              :previousFifthMonthEndDateCal
				                        AND T6.SAVE_STATUS = 203
				                        AND T6.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 8 THEN (SELECT 
				                          							CASE WHEN CP IS NULL 
				                          									THEN I1.BALANCE_DUE 
				                          									ELSE  CASE WHEN CP.BALANCE = 0 THEN 0 ELSE -1*CP.BALANCE END 
				                          									END
				                                                  FROM   INVOICE I1
										  									LEFT JOIN CREDITS_AND_PAYMENTS CP 
										  									ON CP.ID= T.CREDITS_AND_PAYMENTS_ID
				                                                  WHERE  I1.ID = T.ID)
				                          WHEN T.T_TYPE = 4
				                                OR T.T_TYPE = 29 THEN
				                          (SELECT -1 * CAP.BALANCE
				                           FROM   CREDITS_AND_PAYMENTS CAP
				                           WHERE  CAP.TRANSACTION_ID = T.ID)
				                          WHEN T.T_TYPE = 5 THEN (SELECT CR1.BALANCE_DUE
				                                                  FROM   CUSTOMER_REFUND CR1
				                                                  WHERE  CR1.ID = T.ID)
				                           WHEN T.T_TYPE = 16 THEN (SELECT J.BALANCE_DUE FROM JOURNAL_ENTRY J WHERE J.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T6
				                 WHERE  T.ID = T6.ID
				                        AND T6.T_DATE BETWEEN :previousFifthMonthStartDateCal
				                                              AND
				                                              :previousFifthMonthEndDateCal
				                        AND T6.SAVE_STATUS = 203
				                        AND T6.STATUS!=3)
				         END )     AS PREVIOUS_FIFTH_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T7.TOTAL)
				                 FROM   TRANSACTION T7
				                 WHERE  T.ID = T7.ID
				                        AND T7.SAVE_STATUS = 203
				                        AND T7.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 8 THEN (SELECT 
				                          							CASE WHEN CP IS NULL 
				                          									THEN I1.BALANCE_DUE 
				                          									ELSE  CASE WHEN CP.BALANCE = 0 THEN 0 ELSE -1*CP.BALANCE END 
				                          									END
				                                                  FROM   INVOICE I1
										  									LEFT JOIN CREDITS_AND_PAYMENTS CP 
										  									ON CP.ID= T.CREDITS_AND_PAYMENTS_ID
				                                                  WHERE  I1.ID = T.ID)
				                          WHEN T.T_TYPE = 4
				                                OR T.T_TYPE = 29 THEN
				                          (SELECT -1 * CAP.BALANCE
				                           FROM   CREDITS_AND_PAYMENTS CAP
				                           WHERE  CAP.TRANSACTION_ID = T.ID)
				                          WHEN T.T_TYPE = 5 THEN (SELECT CR1.BALANCE_DUE
				                                                  FROM   CUSTOMER_REFUND CR1
				                                                  WHERE  CR1.ID = T.ID)
				                          WHEN T.T_TYPE = 16 THEN (SELECT J.BALANCE_DUE 
				                          						   FROM JOURNAL_ENTRY J 
				                          						   WHERE J.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T7
				                 WHERE  T.ID = T7.ID
				                        AND T7.SAVE_STATUS = 203
				                        AND T7.STATUS!=3)
				         END )     AS YEAR_TO_DATE,
				       P.BALANCE   AS BALANCE,
				       CASE
				         WHEN T.CURRENCY_FACTOR IS NULL THEN 1
				         ELSE T.CURRENCY_FACTOR
				       END         AS TRANSACTION_CURRENCY_FACTOR,
				       P.CURRENCY  AS PAYEE_CURRENCY
				FROM   PAYEE P
				       LEFT OUTER JOIN INVOICE I
				         ON P.ID = I.CUSTOMER_ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON CCM.CUSTOMER_ID = P.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CP
				         ON CP.CUSTOMER_ID = P.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON CR.CUSTOMER_ID = P.ID
				       LEFT OUTER JOIN JOURNAL_ENTRY JE
				         ON JE.PAYEE_ID = P.ID
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = I.ID
				             OR T.ID = CCM.ID
				             OR T.ID = CP.ID
				             OR T.ID = CR.ID
				             OR T.ID = JE.ID
				WHERE  P.TYPE = 1
				       AND P.COMPANY_ID = :companyId
				       AND P.IS_ACTIVE = :isActive
				GROUP BY T.ID ,P.ID  
				ORDER  BY P.NAME  
				]]>


	</sql-query>

	<sql-query name="getVendorsList">
		<query-param name="companyId" type="long" />
		<query-param name="isActive" type="boolean" />

		<return-scalar column="IS_ACTIVE" type="boolean" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNTER_TYPE" type="int" />
		<return-scalar column="ID" type="long" />
		<return-scalar column="CURRENT_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_FIRST_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_SECOND_MONTH_TOTAL"
			type="double" />
		<return-scalar column="PREVIOUS_THIRD_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_FOURTH_MONTH_TOTAL"
			type="double" />
		<return-scalar column="PREVIOUS_FIFTH_MONTH_TOTAL" type="double" />
		<return-scalar column="YEAR_TO_DATE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_CURRENCY_FACTOR"
			type="double" />
		<return-scalar column="PAYEE_CURRENCY" type="long" />
		
		<![CDATA[
				SELECT P.IS_ACTIVE AS IS_ACTIVE,
				       P.NAME      AS VENDOR_NAME,
				       P.TYPE      AS ACCOUNTER_TYPE,
				       P.ID        AS ID,
				       ( CASE
				           WHEN (SELECT COUNT(T1.TOTAL)
				                 FROM   TRANSACTION T1
				                 WHERE  T.ID = T1.ID
				                        AND T1.T_DATE BETWEEN :currentMonthStartDateCal AND
				                                              :currentMonthEndDateCal
				                        AND T1.SAVE_STATUS = 203
				                        AND T1.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 OR T.T_TYPE = 25 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T1
				                 WHERE  T.ID = T1.ID
				                        AND T1.T_DATE BETWEEN :currentMonthStartDateCal AND
				                                              :currentMonthEndDateCal
				                        AND T1.SAVE_STATUS = 203
				                        AND T1.STATUS!=3)
				         END )     AS CURRENT_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T2.TOTAL)
				                 FROM   TRANSACTION T2
				                 WHERE  T.ID = T2.ID
				                        AND T2.T_DATE BETWEEN :previousFirstMonthStartDateCal
				                                              AND
				                                              :previousFirstMonthEndDateCal
				                        AND T2.SAVE_STATUS = 203
				                        AND T2.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 OR T.T_TYPE = 25 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T2
				                 WHERE  T.ID = T2.ID
				                        AND T2.T_DATE BETWEEN :previousFirstMonthStartDateCal
				                                              AND
				                                              :previousFirstMonthEndDateCal
				                        AND T2.SAVE_STATUS = 203
				                        AND T2.STATUS!=3)
				         END )     AS PREVIOUS_FIRST_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T3.TOTAL)
				                 FROM   TRANSACTION T3
				                 WHERE  T.ID = T3.ID
				                        AND T3.T_DATE BETWEEN :previousSecondMonthStartDateCal
				                                              AND
				                                              :previousSecondMonthEndDateCal
				                        AND T3.SAVE_STATUS = 203
				                        AND T3.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 OR T.T_TYPE = 25 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T3
				                 WHERE  T.ID = T3.ID
				                        AND T3.T_DATE BETWEEN :previousSecondMonthStartDateCal
				                                              AND
				                                              :previousSecondMonthEndDateCal
				                        AND T3.SAVE_STATUS = 203
				                        AND T3.STATUS!=3)
				         END )     AS PREVIOUS_SECOND_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T4.TOTAL)
				                 FROM   TRANSACTION T4
				                 WHERE  T.ID = T4.ID
				                        AND T4.T_DATE BETWEEN :previousThirdMonthStartDateCal
				                                              AND
				                                              :previousThirdMonthEndDateCal
				                        AND T4.SAVE_STATUS = 203
				                        AND T4.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 OR T.T_TYPE = 25 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T4
				                 WHERE  T.ID = T4.ID
				                        AND T4.T_DATE BETWEEN :previousThirdMonthStartDateCal
				                                              AND
				                                              :previousThirdMonthEndDateCal
				                        AND T4.SAVE_STATUS = 203
				                        AND T4.STATUS!=3)
				         END )     AS PREVIOUS_THIRD_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T5.TOTAL)
				                 FROM   TRANSACTION T5
				                 WHERE  T.ID = T5.ID
				                        AND T5.T_DATE BETWEEN :previousFourthMonthStartDateCal
				                                              AND
				                                              :previousFourthMonthEndDateCal
				                        AND T5.SAVE_STATUS = 203
				                        AND T5.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 OR T.T_TYPE = 25 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T5
				                 WHERE  T.ID = T5.ID
				                        AND T5.T_DATE BETWEEN :previousFourthMonthStartDateCal
				                                              AND
				                                              :previousFourthMonthEndDateCal
				                        AND T5.SAVE_STATUS = 203
				                        AND T5.STATUS!=3)
				         END )     AS PREVIOUS_FOURTH_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T6.TOTAL)
				                 FROM   TRANSACTION T6
				                 WHERE  T.ID = T6.ID
				                        AND T6.T_DATE BETWEEN :previousFifthMonthStartDateCal
				                                              AND
				                                              :previousFifthMonthEndDateCal
				                        AND T6.SAVE_STATUS = 203
				                        AND T6.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 OR T.T_TYPE = 25 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T6
				                 WHERE  T.ID = T6.ID
				                        AND T6.T_DATE BETWEEN :previousFifthMonthStartDateCal
				                                              AND
				                                              :previousFifthMonthEndDateCal
				                        AND T6.SAVE_STATUS = 203
				                        AND T6.STATUS!=3)
				         END )     AS PREVIOUS_FIFTH_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T7.TOTAL)
				                 FROM   TRANSACTION T7
				                 WHERE  T.ID = T7.ID
				                        AND T7.SAVE_STATUS = 203
				                        AND T7.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 OR T.T_TYPE = 25 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T7
				                 WHERE  T.ID = T7.ID
				                        AND T7.SAVE_STATUS = 203
				                        AND T7.STATUS!=3)
				         END )     AS YEAR_TO_DATE,
				       P.BALANCE   AS BALANCE,
				       CASE
				         WHEN T.CURRENCY_FACTOR IS NULL THEN 1
				         ELSE T.CURRENCY_FACTOR
				       END         AS TRANSACTION_CURRENCY_FACTOR,
				       P.CURRENCY  AS PAYEE_CURRENCY
				FROM   PAYEE P
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON P.ID = EB.VENDOR_ID
				       LEFT OUTER JOIN CREDITS_AND_PAYMENTS CP
				         ON P.ID = CP.PAYEE_ID
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = EB.ID
				             OR T.ID = CP.TRANSACTION_ID
				WHERE  P.TYPE = 2
				       AND P.COMPANY_ID = :companyId
				       AND P.IS_ACTIVE = :isActive
				ORDER  BY P.NAME  
				]]>

	</sql-query>

	<sql-query name="getTAXAgencyList">
		<query-param name="companyId" type="long" />
		<query-param name="isActive" type="boolean" />

		<return-scalar column="IS_ACTIVE" type="boolean" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNTER_TYPE" type="int" />
		<return-scalar column="ID" type="long" />
		<return-scalar column="CURRENT_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_FIRST_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_SECOND_MONTH_TOTAL"
			type="double" />
		<return-scalar column="PREVIOUS_THIRD_MONTH_TOTAL" type="double" />
		<return-scalar column="PREVIOUS_FOURTH_MONTH_TOTAL"
			type="double" />
		<return-scalar column="PREVIOUS_FIFTH_MONTH_TOTAL" type="double" />
		<return-scalar column="YEAR_TO_DATE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_CURRENCY_FACTOR"
			type="double" />
		<return-scalar column="PAYEE_CURRENCY" type="long" />
		
		<![CDATA[
				SELECT P.IS_ACTIVE AS IS_ACTIVE,
				       P.NAME      AS VENDOR_NAME,
				       P.TYPE      AS ACCOUNTER_TYPE,
				       P.ID        AS ID,
				       ( CASE
				           WHEN (SELECT COUNT(T1.TOTAL)
				                 FROM   TRANSACTION T1
				                 WHERE  T.ID = T1.ID
				                        AND T1.T_DATE BETWEEN :currentMonthStartDateCal AND
				                                              :currentMonthEndDateCal
				                        AND T1.SAVE_STATUS = 203
				                        AND T1.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T1
				                 WHERE  T.ID = T1.ID
				                        AND T1.T_DATE BETWEEN :currentMonthStartDateCal AND
				                                              :currentMonthEndDateCal
				                        AND T1.SAVE_STATUS = 203
				                        AND T1.STATUS!=3)
				         END )     AS CURRENT_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T2.TOTAL)
				                 FROM   TRANSACTION T2
				                 WHERE  T.ID = T2.ID
				                        AND T2.T_DATE BETWEEN :previousFirstMonthStartDateCal
				                                              AND
				                                              :previousFirstMonthEndDateCal
				                        AND T2.SAVE_STATUS = 203
				                        AND T2.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T2
				                 WHERE  T.ID = T2.ID
				                        AND T2.T_DATE BETWEEN :previousFirstMonthStartDateCal
				                                              AND
				                                              :previousFirstMonthEndDateCal
				                        AND T2.SAVE_STATUS = 203
				                        AND T2.STATUS!=3)
				         END )     AS PREVIOUS_FIRST_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T3.TOTAL)
				                 FROM   TRANSACTION T3
				                 WHERE  T.ID = T3.ID
				                        AND T3.T_DATE BETWEEN :previousSecondMonthStartDateCal
				                                              AND
				                                              :previousSecondMonthEndDateCal
				                        AND T3.SAVE_STATUS = 203
				                        AND T3.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T3
				                 WHERE  T.ID = T3.ID
				                        AND T3.T_DATE BETWEEN :previousSecondMonthStartDateCal
				                                              AND
				                                              :previousSecondMonthEndDateCal
				                        AND T3.SAVE_STATUS = 203
				                        AND T3.STATUS!=3)
				         END )     AS PREVIOUS_SECOND_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T4.TOTAL)
				                 FROM   TRANSACTION T4
				                 WHERE  T.ID = T4.ID
				                        AND T4.T_DATE BETWEEN :previousThirdMonthStartDateCal
				                                              AND
				                                              :previousThirdMonthEndDateCal
				                        AND T4.SAVE_STATUS = 203
				                        AND T4.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T4
				                 WHERE  T.ID = T4.ID
				                        AND T4.T_DATE BETWEEN :previousThirdMonthStartDateCal
				                                              AND
				                                              :previousThirdMonthEndDateCal
				                        AND T4.SAVE_STATUS = 203
				                        AND T4.STATUS!=3)
				         END )     AS PREVIOUS_THIRD_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T5.TOTAL)
				                 FROM   TRANSACTION T5
				                 WHERE  T.ID = T5.ID
				                        AND T5.T_DATE BETWEEN :previousFourthMonthStartDateCal
				                                              AND
				                                              :previousFourthMonthEndDateCal
				                        AND T5.SAVE_STATUS = 203
				                        AND T5.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T5
				                 WHERE  T.ID = T5.ID
				                        AND T5.T_DATE BETWEEN :previousFourthMonthStartDateCal
				                                              AND
				                                              :previousFourthMonthEndDateCal
				                        AND T5.SAVE_STATUS = 203
				                        AND T5.STATUS!=3)
				         END )     AS PREVIOUS_FOURTH_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T6.TOTAL)
				                 FROM   TRANSACTION T6
				                 WHERE  T.ID = T6.ID
				                        AND T6.T_DATE BETWEEN :previousFifthMonthStartDateCal
				                                              AND
				                                              :previousFifthMonthEndDateCal
				                        AND T6.SAVE_STATUS = 203
				                        AND T6.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T6
				                 WHERE  T.ID = T6.ID
				                        AND T6.T_DATE BETWEEN :previousFifthMonthStartDateCal
				                                              AND
				                                              :previousFifthMonthEndDateCal
				                        AND T6.SAVE_STATUS = 203
				                        AND T6.STATUS!=3)
				         END )     AS PREVIOUS_FIFTH_MONTH_TOTAL,
				       ( CASE
				           WHEN (SELECT COUNT(T7.TOTAL)
				                 FROM   TRANSACTION T7
				                 WHERE  T.ID = T7.ID
				                        AND T7.SAVE_STATUS = 203
				                        AND T7.STATUS!=3) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN T.T_TYPE = 14
				                                OR T.T_TYPE = 11 THEN (SELECT -1 * CP1.BALANCE
				                                                       FROM
				                          CREDITS_AND_PAYMENTS CP1
				                                                       WHERE
				                          CP1.TRANSACTION_ID =
				                                                      T.ID)
				                          WHEN T.T_TYPE = 6 THEN (SELECT EB1.BALANCE_DUE
				                                                  FROM   ENTER_BILL EB1
				                                                  WHERE  EB1.ID = T.ID)
				                        END
				                 FROM   TRANSACTION T7
				                 WHERE  T.ID = T7.ID
				                        AND T7.SAVE_STATUS = 203
				                        AND T7.STATUS!=3)
				         END )     AS YEAR_TO_DATE,
				       P.BALANCE   AS BALANCE,
				       CASE
				         WHEN T.CURRENCY_FACTOR IS NULL THEN 1
				         ELSE T.CURRENCY_FACTOR
				       END         AS TRANSACTION_CURRENCY_FACTOR,
				       P.CURRENCY  AS PAYEE_CURRENCY
				FROM   PAYEE P
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON P.ID = EB.VENDOR_ID
				       LEFT OUTER JOIN CREDITS_AND_PAYMENTS CP
				         ON P.ID = CP.PAYEE_ID
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = EB.ID
				             OR T.ID = CP.TRANSACTION_ID
				WHERE  P.TYPE = 4
				       AND P.COMPANY_ID = :companyId
				       AND P.IS_ACTIVE = :isActive
				ORDER  BY P.NAME  
				]]>

	</sql-query>

	<sql-query name="getEGSandRCentriesFromSales">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ID" type="long" />
		<return-scalar column="SOURCE_NAME" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		
		<![CDATA[
				SELECT CASE
				         WHEN T.T_TYPE = 8 THEN 8
				         WHEN T.T_TYPE = 1 THEN 1
				         WHEN T.T_TYPE = 4 THEN 4
				       END                 AS TRANSACTION_TYPE,
				       T.T_DATE            AS TRANSACTION_DATE,
				       T.NUMBER            AS TRANSACTION_NUMBER,
				       T.ID                AS ID,
				       P.NAME              AS SOURCE_NAME,
				       TIG.DESCRIPTION     AS MEMO,
				       SUM(VRC.VAT_AMOUNT) AS AMOUNT
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TAX_RATE_CALCULATION VRC
				         ON T.ID = VRC.TRANSACTION_ID
				       LEFT OUTER JOIN TAX_ITEM TI
				         ON TI.ID = VRC.TAX_ITEM_ID
				       LEFT OUTER JOIN TAX_ITEM_GROUPS TIG
				         ON TIG.ID = VRC.TAX_ITEM_ID
				       LEFT OUTER JOIN VATRETURNBOX VRB
				         ON VRB.ID = TI.VAT_RETURN_BOX
				       LEFT OUTER JOIN INVOICE I
				         ON I.ID = T.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON CCM.ID = T.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = I.CUSTOMER_ID
				             OR P.ID = CS.CUSTOMER_ID
				             OR P.ID = CCM.CUSTOMER_ID
				WHERE  P.NAME IS NOT NULL
				       AND P.COMPANY_ID = :companyId
				       AND VRB.VAT_BOX = 'NONE'
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				GROUP  BY VRC.TAX_ITEM_ID,
				          T.ID,
				          T.T_TYPE,
				          T.T_DATE,
				          T.NUMBER,
				          P.NAME,
				          TIG.DESCRIPTION  
				]]>

	</sql-query>


	<!-- To get reverse charge list detail report -->
	<sql-query name="getReverseChargeListDetailReportEntries">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="VAT_AMOUNT" type="double" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="VAT_ITEM_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="IS_PERCENTAGE" type="boolean" />
		<return-scalar column="VAT_RATE" type="double" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="LINE_TOTAL" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="SALES_PRICE" type="double" />
		
		<![CDATA[
				SELECT SUM(V.VAT_AMOUNT) AS VAT_AMOUNT,
				       P.NAME            AS CUSTOMER_NAME,
				       VIG.DESCRIPTION   AS VAT_ITEM_MEMO,
				       T.NUMBER          AS TRANSACTION_NUMBER,
				       VIG.IS_PERCENTAGE AS IS_PERCENTAGE,
				       VI.VAT_RATE       AS VAT_RATE,
				       T.ID              AS TRANSACTION_ID,
				       T.T_TYPE          AS TRANSACTION_TYPE,
				       SUM(V.LINE_TOTAL) AS LINE_TOTAL,
				       T.T_DATE          AS TRANSACTION_DATE,
				       T.MEMO            AS TRANSACTION_MEMO,
				       TI.LINE_TOTAL     AS SALES_PRICE
				FROM   TAX_RATE_CALCULATION V
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = V.TRANSACTION_ID
				       LEFT OUTER JOIN TAX_ITEM VI
				         ON V.TAX_ITEM_ID = VI.ID
				       LEFT OUTER JOIN TAX_ITEM_GROUPS VIG
				         ON VI.ID = VIG.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT OUTER JOIN INVOICE I
				         ON I.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON CCM.ID = T.ID
				       LEFT OUTER JOIN WRITE_CHECKS W
				         ON W.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CS.CUSTOMER_ID
				             OR C.ID = I.CUSTOMER_ID
				             OR C.ID = CCM.CUSTOMER_ID
				             OR C.ID = W.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				GROUP  BY V.TAX_ITEM_ID
				ORDER  BY TI.ID  
				]]>

	</sql-query>

	<!-- To get the customers who have same name or number -->
	<sql-query name="getCustomers">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="number" type="encryptedstring" />
		<query-param name="id" type="Long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		
		<![CDATA[
				SELECT P.NAME   AS NAME,
				       C.NUMBER AS NUMBER
				FROM   CUSTOMER C
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  P.COMPANY_ID = :companyId
				       AND ( CASE
				               WHEN :number IS NULL THEN FALSE
				               ELSE C.NUMBER = :number
				             END
				              OR P.NAME = :name )
				       AND P.ID != :id  
				]]>

	</sql-query>

	<sql-query name="getFixedAssets">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="number" type="encryptedstring" />
		<query-param name="id" type="Long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		
		<![CDATA[
				SELECT FA.NAME         AS NAME,
				       FA.ASSET_NUMBER AS NUMBER
				FROM   FIXED_ASSET FA
				WHERE  FA.COMPANY_ID = :companyId
				       AND ( CASE
				               WHEN :number IS NULL THEN FALSE
				               ELSE FA.ASSET_NUMBER = :number
				             END
				              OR FA.NAME = :name )
				       AND FA.ID != :id  
				]]>

	</sql-query>

	<!-- To get the accounts who have same name or number -->
	<sql-query name="getAccounts">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="number" type="encryptedstring" />
		<query-param name="id" type="Long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		
		<![CDATA[
				SELECT A.NAME     AS NAME,
				       A.A_NUMBER AS NUMBER
				FROM   ACCOUNT A
				WHERE  A.COMPANY_ID = :companyId
				       AND ( A.A_NUMBER = :number
				              OR A.NAME = :name )
				       AND A.ID != :id  
				]]>

	</sql-query>

	<!-- To get least startdate and highest enddate -->
	<sql-query name="getMinStartDateAndMaxEndDate">
		<query-param name="companyId" type="long" />

		<return-scalar column="START_DATE" type="long" />
		<return-scalar column="END_DATE" type="long" />
		
		<![CDATA[
				SELECT Min(START_DATE) AS START_DATE,
				       Max(END_DATE)   AS END_DATE
				FROM   FISCAL_YEAR F
				WHERE  F.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<!-- To get Box values of Filed Vat -->
	<sql-query name="getFiledBoxValues">
		<query-param name="companyId" type="long" />
		<query-param name="id" type="Long" />

		<return-scalar column="BOX_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		
		<![CDATA[
				SELECT B.NAME   AS BOX_NAME,
				       B.AMOUNT AS TOTAL,
				       T.T_DATE AS TRANSACTION_DATE,
				       T.NUMBER AS NUMBER
				FROM   BOX B
				       LEFT OUTER JOIN TAX_RETURN V
				         ON B.BOX_ID = V.ID
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = V.ID
				WHERE  B.BOX_ID = :id
				       AND B.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getTaxItemGroupWithSameName">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="id" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT V.NAME
				FROM   TAX_ITEM_GROUPS V
				WHERE  V.NAME = :name
				       AND V.ID != :id
				       AND V.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getTAXCodeWithSameName">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="id" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT T.NAME
				FROM   TAX_CODE T
				WHERE  T.NAME = :name
				       AND T.ID != :id
				       AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getItemGroupWithSameName">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />

		<![CDATA[
				SELECT *
				FROM   ITEMGROUP I
				WHERE  I.NAME = :name
				       AND I.ID != :id
				       AND I.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getInvocieFrequencyWithSameName">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="id" type="long" />
		<![CDATA[
				SELECT *
				FROM   INVOICE_FREQUENCY_GROUP I
				WHERE  I.NAME = :name
				       AND I.ID != :id
				       AND I.COMPANY_ID = :companyId
				]]>

	</sql-query>

	<sql-query name="getCreatableStatementForCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="Long" />
		<query-param name="endDate" type="Long" />
		<query-param name="payeeId" type="Long" />
		<query-param name="viewType" type="int" />
		<query-param name="todayDate" type="long" />

		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<!-- <return-scalar column="ADDRESS1" type="encryptedstring" /> <return-scalar 
			column="ADDRESS2" type="encryptedstring" /> <return-scalar column="CITY" 
			type="encryptedstring" /> <return-scalar column="STATE" type="encryptedstring" 
			/> <return-scalar column="COUNTRY" type="encryptedstring" /> <return-scalar 
			column="ZIP" type="encryptedstring" /> -->
		<return-scalar column="SALES_PERSON_NAME" type="encryptedstring" />
		<return-scalar column="SHIPPING_METHOD_NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_TERM_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="CURRENCY_FACTOR" type="double" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.T_TYPE           AS TRANSACTION_TYPE,
				       T.NUMBER           AS TRANSACTION_NUMBER,
				       T.T_DATE           AS TRANSACTION_DATE,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         ELSE T.T_DATE
				       END                AS DUE_DATE,
				       T.TOTAL            AS TOTAL,
				       CASE
				         WHEN T.T_TYPE = 4 THEN -1 * CCM.BALANCE_DUE
				         WHEN T.T_TYPE = 5 THEN CR.BALANCE_DUE
				         WHEN T.T_TYPE = 8 THEN I.BALANCE_DUE
				         WHEN T.T_TYPE = 12 THEN -1 * T.TOTAL
				         WHEN T.T_TYPE = 16 THEN T.TOTAL
				         WHEN T.T_TYPE = 29 THEN -1 * CPP.BALANCE_DUE
				       END                AS BALANCE,
				       P.NAME             AS CUSTOMER_NAME,
				       SP.FIRST_NAME      AS SALES_PERSON_NAME,
				       SM.NAME            AS SHIPPING_METHOD_NAME,
				       PT.NAME            AS PAYMENT_TERM_NAME,
				       T.ID               AS TRANSACTION_ID,
				       T.CURRENCY         AS CURRENCY,
				       T.CURRENCY_FACTOR  AS CURRENCY_FACTOR,
				       T.SAVE_STATUS      AS SAVE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON I.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON CCM.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON CR.ID = T.ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON RP.ID = T.ID
				       LEFT OUTER JOIN JOURNAL_ENTRY JE
				         ON JE.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
				         ON CPP.ID = T.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = I.CUSTOMER_ID
				             OR P.ID = CCM.CUSTOMER_ID
				             OR P.ID = CR.CUSTOMER_ID
				             OR P.ID = RP.CUSTOMER_ID
				             OR P.ID = JE.PAYEE_ID
				             OR P.ID = CPP.CUSTOMER_ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = P.ID
				       LEFT OUTER JOIN SALES_PERSON SP
				         ON SP.ID = C.SALES_PERSON_ID
				       LEFT OUTER JOIN SHIPPINGMETHOD SM
				         ON SM.ID = C.SHIPPING_METHOD_ID
				       LEFT OUTER JOIN PAYMENTTERMS PT
				         ON PT.ID = C.PAYMENT_TERM_ID
				WHERE  T.COMPANY_ID = :companyId
				       AND ( T.T_DATE BETWEEN :startDate AND :endDate )
				       AND P.ID = :payeeId
				       AND T.T_TYPE IN ( 4, 5, 8, 12,
				                         16, 29 )
				       AND T.SAVE_STATUS = 203
				       AND CASE
				             WHEN 1 = :viewType THEN ( I.BALANCE_DUE > 0.0
				                                       AND T.STATUS != 2
				                                       AND T.SAVE_STATUS !=204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 2 = :viewType THEN ( I.BALANCE_DUE > 0.0
				                                       AND I.DUE_DATE < :todayDate
				                                       AND T.SAVE_STATUS !=204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 3 = :viewType THEN ( T.SAVE_STATUS = 204 )
				             WHEN 4 = :viewType THEN ( T.SAVE_STATUS = 201 )
				             ELSE TRUE
				           END
				ORDER  BY T.T_DATE   
				]]>


	</sql-query>

	<sql-query name="getOpeningBalanceForCustomerByDate">
		<query-param name="companyId" type="long" />
		<query-param name="uptoDate" type="Long" />
		<query-param name="payeeId" type="Long" />

		<return-scalar column="BALANCE" type="double" />

		<![CDATA[
				SELECT SUM(CASE				         
				         	WHEN T.T_TYPE IN(5,8,16) THEN 1*T.TOTAL
				         	ELSE -1*T.TOTAL		    
				       		END   ) AS BALANCE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON I.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON CCM.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON CR.ID = T.ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON RP.ID = T.ID
				       LEFT OUTER JOIN JOURNAL_ENTRY JE
				         ON JE.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
				         ON CPP.ID = T.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = I.CUSTOMER_ID
				             OR P.ID = CCM.CUSTOMER_ID
				             OR P.ID = CR.CUSTOMER_ID
				             OR P.ID = RP.CUSTOMER_ID
				             OR P.ID = JE.PAYEE_ID
				             OR P.ID = CPP.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE_ADDRESS PA
				         ON PA.PAYEE_ID = P.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = P.ID
				       LEFT OUTER JOIN SALES_PERSON SP
				         ON SP.ID = C.SALES_PERSON_ID
				       LEFT OUTER JOIN SHIPPINGMETHOD SM
				         ON SM.ID = C.SHIPPING_METHOD_ID
				       LEFT OUTER JOIN PAYMENTTERMS PT
				         ON PT.ID = C.PAYMENT_TERM_ID
				WHERE  ( T.SAVE_STATUS !=204
				         AND T.SAVE_STATUS!=201
				         AND T.SAVE_STATUS!=202 )
				       AND T.COMPANY_ID = :companyId
				       AND ( T.T_DATE < :uptoDate )
				       AND P.ID = :payeeId
				       AND T.T_TYPE IN ( 4, 5, 8, 12,
				                         16, 29 )
				       AND T.SAVE_STATUS = 203
				       AND CASE
				             WHEN (SELECT COUNT(PA2.TYPE)
				                   FROM   PAYEE_ADDRESS PA2
				                   WHERE  PA2.PAYEE_ID = P.ID) != 0 THEN PA.TYPE = 2
				             ELSE TRUE
				           END  
				]]>

	</sql-query>

	<sql-query name="getCreatableStatementForVendor">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="Long" />
		<query-param name="endDate" type="Long" />
		<query-param name="payeeId" type="Long" />
		<query-param name="viewType" type="int" />
		<query-param name="todayDate" type="long" />

		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TOTAL" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="CURRENCY_FACTOR" type="double" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.T_DATE          AS TRANSACTION_DATE,
				       T.T_TYPE          AS TRANSACTION_TYPE,
				       T.NUMBER          AS TRANSACTION_NUMBER,
				       CASE
				       WHEN (T.T_TYPE IN (26,27) AND P.CURRENCY = CM.PRIMARY_CURRENCY)
					   THEN T.TOTAL * T.CURRENCY_FACTOR ELSE T.TOTAL END AS TRANSACTION_TOTAL,
				       CASE
				         WHEN T.T_TYPE = 6 THEN E.BALANCE_DUE
				         WHEN T.T_TYPE = 14 THEN -1 * VCM.BALANCE_DUE
					     WHEN (T.T_TYPE IN (26,27) AND P.CURRENCY = CM.PRIMARY_CURRENCY)
					     THEN T.TOTAL * T.CURRENCY_FACTOR 
				       ELSE T.TOTAL
				       END               AS BALANCE,
				       T.ID              AS TRANSACTION_ID,
				       T.CURRENCY        AS CURRENCY,
				       T.CURRENCY_FACTOR AS CURRENCY_FACTOR,
				       T.SAVE_STATUS     AS SAVE_STATUS
				FROM   TRANSACTION T
					   LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN ITEM_RECEIPT IR
				         ON T.ID = IR.ID
				       LEFT OUTER JOIN ENTER_BILL E
				         ON E.ID = T.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON VCM.ID = T.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CC
				         ON CC.ID = T.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON PB.ID = T.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON VP.ID = T.ID
				       LEFT OUTER JOIN JOURNAL_ENTRY JE
				         ON JE.ID = T.ID
				       LEFT OUTER JOIN EXPENSE EX
				         ON EX.ID = T.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = E.VENDOR_ID
				             OR P.ID = VCM.VENDOR_ID
				             OR P.ID = WC.VENDOR_ID
				             OR P.ID = CC.VENDOR_ID
				             OR P.ID = PB.VENDOR_ID
				             OR P.ID = VP.VENDOR_ID
				             OR P.ID = JE.PAYEE_ID
				             OR P.ID = CP.VENDOR_ID
				             OR P.ID = EX.ID
				       LEFT OUTER JOIN COMPANY CM ON CM.ID =:companyId      
				WHERE  T.T_TYPE IN (6, 11, 14, 16, 25 )
				       AND P.ID = :payeeId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.SAVE_STATUS =203
				       AND T.COMPANY_ID = :companyId
				       AND CASE
				             WHEN 1 = :viewType THEN ( CASE
				                                         WHEN 0 = 0 THEN ( IR.BALANCE_DUE > 0.0
				                                                            OR
				                                         E.BALANCE_DUE > 0.0
				                                                            OR
				                                         VCM.BALANCE_DUE > 0.0 )
				                                         ELSE TRUE
				                                       END )
				                                     AND T.SAVE_STATUS !=204
				                                     AND T.SAVE_STATUS!=201
				             WHEN 2 = :viewType THEN ( CASE
				                                         WHEN 0 = 0 THEN ( (
				                                         :todayDate > E.DUE_DATE
				                                          OR
				                                         :todayDate > IR.DUE_DATE )
				                                                           AND (
				                                         CASE
				                                           WHEN T.T_TYPE = 6 THEN
				                                           E.BALANCE_DUE > 0
				                                           ELSE
				                                                           ( IR.BALANCE_DUE >
				                                                             0.0
				                                                              OR
				                                         VCM.BALANCE_DUE > 0.0
				                                                           )
				                                                                 END ) )
				                                         ELSE TRUE
				                                       END )
				                                     AND ( T.SAVE_STATUS !=204
				                                           AND T.SAVE_STATUS!=201 )
				             WHEN 3 = :viewType THEN T.SAVE_STATUS = 204
				             WHEN 4 = :viewType THEN ( T.SAVE_STATUS = 201 )
				             ELSE TRUE
				           END  
				           ORDER  BY T.T_DATE
				]]>

	</sql-query>

	<sql-query name="getOpeningBalanceForVendorByDate">
		<query-param name="companyId" type="long" />
		<query-param name="uptoDate" type="Long" />
		<query-param name="payeeId" type="Long" />

		<return-scalar column="BALANCE" type="double" />
		
		<![CDATA[
				SELECT SUM(CASE				         
				         	WHEN T.T_TYPE =6 THEN 1*T.TOTAL
				         	ELSE -1*T.TOTAL		    
				       		END   ) AS BALANCE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ENTER_BILL E
				         ON E.ID = T.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON VCM.ID = T.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CC
				         ON CC.ID = T.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON PB.ID = T.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON VP.ID = T.ID
				       LEFT OUTER JOIN JOURNAL_ENTRY JE
				         ON JE.ID = T.ID
				       LEFT OUTER JOIN EXPENSE EX
				         ON EX.ID = T.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = E.VENDOR_ID
				             OR P.ID = VCM.VENDOR_ID
				             OR P.ID = WC.VENDOR_ID
				             OR P.ID = CC.VENDOR_ID
				             OR P.ID = PB.VENDOR_ID
				             OR P.ID = VP.VENDOR_ID
				             OR P.ID = JE.PAYEE_ID
				             OR P.ID = EX.ID
				WHERE  T.T_TYPE IN ( 3, 6, 11, 14,
				                     15, 16, 25, 26, 27 )
				       AND P.ID = :payeeId
				       AND T.T_DATE < :uptoDate
				       AND ( T.SAVE_STATUS !=204
				             AND T.SAVE_STATUS!=201
				             AND T.SAVE_STATUS!=202 )
				       AND T.COMPANY_ID = :companyId   
				]]>


	</sql-query>


	<sql-query name="getInvoicesDue">
		<query-param name="companyId" type="long" />
		<query-param name="presentDate" type="long" />
		
		<![CDATA[
				SELECT SUM(I.BALANCE_DUE * T.CURRENCY_FACTOR)
				FROM   INVOICE I
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = I.ID
				WHERE  T.COMPANY_ID = :companyId
				       AND T.SAVE_STATUS = 203
				       AND T.SAVE_STATUS != 202
				       AND CASE
				             WHEN :presentDate = 0 THEN TRUE
				             ELSE :presentDate > I.DUE_DATE
				           END  
				]]>


	</sql-query>

	<sql-query name="getBillsDue">
		<query-param name="companyId" type="long" />
		<query-param name="presentDate" type="long" />
		
		<![CDATA[
				SELECT SUM(E.BALANCE_DUE * T.CURRENCY_FACTOR)
				FROM   ENTER_BILL E
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = E.ID
				WHERE  T.COMPANY_ID = :companyId
				       AND T.SAVE_STATUS = 203
				       AND T.SAVE_STATUS != 202
				       AND CASE
				             WHEN :presentDate = 0 THEN TRUE
				             ELSE :presentDate > E.DUE_DATE
				           END  
				]]>

	</sql-query>

	<sql-query name="getPointsForBankAccount">
		<query-param name="companyId" type="long" />
		<query-param name="accountId" type="long" />
		<query-param name="previousThreeDaysBackDateCal" type="long" />
		<query-param name="previousTwoDaysBackDateCal" type="long" />
		<query-param name="previousOneDayBackDateCal" type="long" />

		<return-scalar column="PREVOIUS_THREE_DAYS_BACK_AMOUNT"
			type="double" />
		<return-scalar column="PREVOIUS_TWO_DAYS_BACK_AMOUNT"
			type="double" />
		<return-scalar column="PREVOIUS_ONE_DAY_BACK_AMOUNT"
			type="double" />
		<return-scalar column="CURRENT_DAY_AMOUNT" type="double" />
		
		<![CDATA[
				SELECT A.TOTAL_BALANCE - CASE
				                           WHEN (SELECT SUM(AT.AMOUNT)
				                                 FROM   ACCOUNT_TRANSACTION AT
				                                        LEFT OUTER JOIN TRANSACTION T
				                                          ON T.ID = AT.TRANSACTION_ID
				                                 WHERE  AT.ACCOUNT_ID = A.ID
				                                        AND
				                                T.T_DATE > :previousThreeDaysBackDateCal
				                                 GROUP  BY A.ID) IS NOT NULL THEN
				                           (SELECT SUM(
				                           AT.AMOUNT / T.CURRENCY_FACTOR)
				                            FROM   ACCOUNT_TRANSACTION AT
				                                   LEFT OUTER JOIN TRANSACTION T
				                                     ON T.ID = AT.TRANSACTION_ID
				                            WHERE  AT.ACCOUNT_ID = A.ID
				                                   AND T.T_DATE >
				                         :previousThreeDaysBackDateCal
				                                                                   GROUP  BY
				                           A.ID)
				                           ELSE 0
				                         END               AS PREVOIUS_THREE_DAYS_BACK_AMOUNT,
				       A.TOTAL_BALANCE - CASE
				                           WHEN (SELECT SUM(AT.AMOUNT)
				                                 FROM   ACCOUNT_TRANSACTION AT
				                                        LEFT OUTER JOIN TRANSACTION T
				                                          ON T.ID = AT.TRANSACTION_ID
				                                 WHERE  AT.ACCOUNT_ID = A.ID
				                                        AND
				                                T.T_DATE > :previousTwoDaysBackDateCal
				                                 GROUP  BY A.ID) IS NOT NULL THEN (SELECT SUM(
				                           AT.AMOUNT / T.CURRENCY_FACTOR)
				                            FROM   ACCOUNT_TRANSACTION AT
				                                   LEFT OUTER JOIN TRANSACTION T
				                                     ON T.ID = AT.TRANSACTION_ID
				                            WHERE  AT.ACCOUNT_ID = A.ID
				                                   AND
				                           T.T_DATE > :previousTwoDaysBackDateCal
				                            GROUP  BY A.ID)
				                           ELSE 0
				                         END               AS PREVOIUS_TWO_DAYS_BACK_AMOUNT,
				       A.TOTAL_BALANCE - CASE
				                           WHEN (SELECT SUM(AT.AMOUNT)
				                                 FROM   ACCOUNT_TRANSACTION AT
				                                        LEFT OUTER JOIN TRANSACTION T
				                                          ON T.ID = AT.TRANSACTION_ID
				                                 WHERE  AT.ACCOUNT_ID = A.ID
				                                        AND
				                                T.T_DATE > :previousOneDayBackDateCal
				                                 GROUP  BY A.ID) IS NOT NULL THEN (SELECT SUM(
				                           AT.AMOUNT / T.CURRENCY_FACTOR)
				                            FROM   ACCOUNT_TRANSACTION AT
				                                   LEFT OUTER JOIN TRANSACTION T
				                                     ON T.ID = AT.TRANSACTION_ID
				                            WHERE  AT.ACCOUNT_ID = A.ID
				                                   AND
				                           T.T_DATE > :previousOneDayBackDateCal
				                            GROUP  BY A.ID)
				                           ELSE 0
				                         END               AS PREVOIUS_ONE_DAY_BACK_AMOUNT,
				       A.TOTAL_BALANCE_IN_ACCOUNT_CURRENCY AS CURRENT_DAY_AMOUNT
				FROM   ACCOUNT A
				WHERE  A.ID = :accountId
				       AND A.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getCashExpenseTotal">
		<query-param name="companyId" type="long" />

		<return-scalar column="CASH_EXPENSE_TOTAL" type="double" />
		
		<![CDATA[
				SELECT SUM(T.TOTAL * T.CURRENCY_FACTOR) AS CASH_EXPENSE_TOTAL
				FROM   TRANSACTION T
				WHERE  T.T_TYPE = 26
				       AND T.SAVE_STATUS = 203
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="getCreditCardExpenseTotal">
		<query-param name="companyId" type="long" />

		<return-scalar column="CREDIT_CARD_EXPENSE_TOTAL" type="double" />
		
		<![CDATA[
				SELECT SUM(T.TOTAL * T.CURRENCY_FACTOR) AS CREDIT_CARD_EXPENSE_TOTAL
				FROM   TRANSACTION T
				WHERE  T.T_TYPE = 27
				       AND T.SAVE_STATUS = 203
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="getEmployeeExpenseTotal">
		<query-param name="companyId" type="long" />

		<return-scalar column="EMPLOYEE_EXPENSE_TOTAL" type="double" />
		
		<![CDATA[
				SELECT SUM(T.TOTAL * T.CURRENCY_FACTOR) AS EMPLOYEE_EXPENSE_TOTAL
				FROM   TRANSACTION T
				WHERE  T.T_TYPE = 28
				       AND T.SAVE_STATUS = 203
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="getEmailTemplate">
		<query-param name="companyId" type="long" />
		<query-param name="emailTemplateName" type="encryptedstring" />
		<query-param name="id" type="long" />

		<return-scalar column="EMAIL_TEMPLATE_NAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT T.EMAIL_TEMPLATE_NAME AS TEMPLATE_NAME
				FROM   EMAIL_TEMPLATE T
				WHERE  T.EMAIL_TEMPLATE_NAME = :emailTemplateName
				       AND T.ID != :id
				       AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getBrandingTheme">
		<query-param name="companyId" type="long" />
		<query-param name="themeName" type="encryptedstring" />
		<query-param name="id" type="long" />

		<return-scalar column="THEME_NAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT B.THEME_NAME AS THEME_NAME
				FROM   BRANDING_THEME B
				WHERE  B.THEME_NAME = :themeName
				       AND B.ID != :id
				       AND B.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getWarehouse">
		<query-param name="companyId" type="long" />
		<query-param name="name" type="encryptedstring" />
		<query-param name="id" type="Long" />

		<return-scalar column="NAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT W.NAME AS NAME
				FROM   WAREHOUSE W
				WHERE  W.NAME = :name
				       AND W.COMPANY_ID = :companyId
				       AND W.ID != :id  
				]]>

	</sql-query>

	<sql-query name="canDeleteBrandingTheme">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="BRANDING_THEME_ID" type="long" />
		
		<![CDATA[
				SELECT BT.ID AS BRANDING_THEME_ID
				FROM   BRANDING_THEME BT
				WHERE  BT.ID = :inputId
				       AND BT.COMPANY_ID = :companyId
				LIMIT  2 OFFSET 1  
				]]>


		<!-- <return-scalar column="INVOICE_ID" type="long" /> <return-scalar column="CUSTOMER_CREDIT_MEMO_ID" 
			type="long" /> SELECT BT.ID AS BRANDING_THEME_ID, I.ID AS INVOICE_ID, CCM.ID 
			AS CUSTOMER_CREDIT_MEMO_ID FROM BRANDING_THEME BT LEFT OUTER JOIN INVOICE 
			I ON I.BRANDING_THEME_ID = BT.ID LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM 
			ON CCM.BRANDING_THEME_ID = BT.ID WHERE BT.ID = :inputId LIMIT 1 -->

	</sql-query>

	<sql-query name="canDeleteWarehouse">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="TRANSACTION_ITEM_ID" type="long" />
		<return-scalar column="STOCK_TRANSFER_ID" type="long" />
		<return-scalar column="STOCK_ADJUSTMENT_ID" type="long" />
		
		<![CDATA[
				SELECT C.ID  AS COMPANY_ID,
				       I.ID  AS ITEM_ID,
				       TI.ID AS TRANSACTION_ITEM_ID,
				       ST.ID AS STOCK_TRANSFER_ID,
				       SA.ID AS STOCK_ADJUSTMENT_ID
				FROM   WAREHOUSE W
				       LEFT OUTER JOIN COMPANY C
				         ON C.DEFAULT_WAREHOUSE = W.ID
				       LEFT OUTER JOIN ITEM I
				         ON I.WAREHOUSE = W.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.WARE_HOUSE = W.ID
				       LEFT OUTER JOIN STOCK_TRANSFER ST
				         ON ST.FROM_WAREHOUSE = W.ID
				             OR ST.TO_WAREHOUSE = W.ID
				       LEFT OUTER JOIN STOCK_ADJUSTMENT SA
				         ON SA.WAREHOUSE = W.ID
				WHERE  W.ID = :inputId
				       AND W.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="canDeleteStockTransfer">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="ST_ID" type="long" />
		
		<![CDATA[
				SELECT ST.ID AS ST_ID
				FROM   STOCK_TRANSFER ST
				WHERE  ST.ID IS NULL
				       AND ST.ID = :inputId
				       AND ST.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="canDeleteStockAdjustment">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="SA_ID" type="long" />
		
		<![CDATA[
				SELECT SA.ID AS SA_ID
				FROM   STOCK_ADJUSTMENT SA
				WHERE  SA.ID IS NULL
				       AND SA.ID = :inputId
				       AND SA.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="canDeleteBuildAssembly">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="BA_ID" type="long" />
		
		<![CDATA[
				SELECT BA.ID AS BA_ID
				FROM   BUILD_ASSEMBLY BA
				LEFT JOIN TRANSACTION T 
				ON T.ID=BA.ID
				WHERE  BA.ID IS NULL
				       AND BA.ID = :inputId
				       AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="canDeleteMeasurement">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		
		<![CDATA[
				SELECT C.ID AS COMPANY_ID,
				       I.ID AS ITEM_ID
				FROM   MEASUREMENT M
				       LEFT OUTER JOIN COMPANY C
				         ON C.DEFAULT_MEASUREMENT = M.ID
				       LEFT OUTER JOIN ITEM I
				         ON I.MEASUREMENT = M.ID
				WHERE  M.ID = :inputId
				       AND M.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="canDeletePayTAX">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		
		<![CDATA[
				SELECT PT.ID AS PT_ID
				FROM   PAY_TAX PT
				       LEFT JOIN TRANSACTION T
				         ON T.ID = PT.ID
				WHERE  PT.ID IS NULL
				       AND PT.ID = :inputId
				       AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="canDeleteReceiveVAT">
		<query-param name="companyId" type="long" />
		<query-param name="inputId" type="long" />

		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		
		<![CDATA[
				SELECT RV.ID AS RV_ID
				FROM   RECEIVE_VAT RV
				       LEFT JOIN TRANSACTION T
				         ON T.ID = RV.ID
				WHERE  RV.ID IS NULL
				       AND RV.ID = :inputId
				       AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="canDeleteMakeDeposit">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ESTIMATE_ID" type="long" />
		
		<![CDATA[
				SELECT ES.ID AS ESTIMATE_ID
				FROM   MAKE_DEPOSIT D
				       LEFT JOIN TRANSACTION T
				         ON T.ID = D.ID
				       LEFT JOIN DEPOSIT_ESTIMATES DE
				         ON DE.DEPOSIT_ID = D.ID
				       LEFT JOIN ESTIMATE ES
				         ON ES.ID = DE.ELT
				            AND ES.USED_INVOICE IS NOT NULL
				WHERE  D.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeletePurchaseOrder">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ENTER_BILL_ID" type="long" />
		<return-scalar column="CASH_PURCHASE_ID" type="long" />
		
		<![CDATA[
				SELECT E.USED_BILL AS ENTER_BILL_ID,
					   E.USED_CASHPURCHASE AS CASH_PURCHASE_ID
				FROM   PURCHASE_ORDER E
				       LEFT JOIN TRANSACTION T
				         ON T.ID = E.ID
				WHERE  E.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>

	<sql-query name="canDeleteTAXReturn">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_PAY_ID" type="long" />
		<return-scalar column="TRANSACTION_RECEIVE_ID" type="long" />
		
		<![CDATA[
				SELECT TPT.ID AS TRANSACTION_PAY_ID,
				       TRV.ID AS TRANSACTION_RECEIVE_ID
				FROM   TRANSACTION T
				       LEFT JOIN PAY_TAX PT
				         ON PT.ID = T.ID
				       LEFT JOIN RECEIVE_VAT RV
				         ON RV.ID = T.ID
				       LEFT JOIN TRANSACTION_PAY_TAX TPT
				         ON TPT.PAY_TAX_ID = PT.ID
				       LEFT JOIN TRANSACTION_RECEIVE_VAT TRV
				         ON TRV.RECEIVE_VAT_ID = RV.ID
				WHERE  ( TPT.VAT_RETURN_ID = :inputId
				          OR TRV.TAX_RETURN_ID = :inputId )
				       AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getAllUserActivities">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="timestamp" />
		<query-param name="endDate" type="timestamp" />
		<query-param name="logoutOrLogin" type="boolean" />
		<query-param name="preferences" type="boolean" />
		<query-param name="transactions" type="boolean" />
		<query-param name="budgets" type="boolean" />
		<query-param name="reconciliations" type="boolean" />

		<return-scalar column="ID" type="long" />

		<![CDATA[
				SELECT AT.ID AS ID
				FROM   ACTIVITY AT
				WHERE  ( CASE
				           WHEN :logoutOrLogin THEN ( AT.ACTIVITY_TYPE = 0
				                                       OR AT.ACTIVITY_TYPE = 1 )
				         END
				          OR CASE
				               WHEN :preferences THEN AT.ACTIVITY_TYPE = 5
				             END
				          OR CASE
				               WHEN :transactions THEN ( AT.OBJECT_TYPE BETWEEN 1 AND 30 )
				             END
				          OR CASE
				               WHEN :budgets THEN AT.OBJECT_TYPE = 81
				             END
				          OR CASE
				               WHEN :reconciliations THEN AT.OBJECT_TYPE = 82
				             END )
				       AND ( AT.TIME_STAMP BETWEEN :fromDate AND :endDate )
				       AND AT.COMPANY_ID = :companyId
				ORDER  BY AT.TIME_STAMP DESC  
				]]>

	</sql-query>

	<sql-query name="getCountByCustomiseValues">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="timestamp" />
		<query-param name="endDate" type="timestamp" />
		<query-param name="logoutOrLogin" type="boolean" />
		<query-param name="preferences" type="boolean" />
		<query-param name="transactions" type="boolean" />
		<query-param name="budgets" type="boolean" />
		<query-param name="reconciliations" type="boolean" />

		<return-scalar column="COUNT" type="int" />

		<![CDATA[
				SELECT COUNT(*) AS COUNT
				FROM   ACTIVITY AT
				WHERE  ( CASE
				           WHEN :logoutOrLogin THEN ( AT.ACTIVITY_TYPE = 0
				                                       OR AT.ACTIVITY_TYPE = 1 )
				         END
				          OR CASE
				               WHEN :preferences THEN AT.ACTIVITY_TYPE = 5
				             END
				          OR CASE
				               WHEN :transactions THEN ( AT.OBJECT_TYPE BETWEEN 1 AND 30 )
				             END
				          OR CASE
				               WHEN :budgets THEN AT.OBJECT_TYPE = 81
				             END
				          OR CASE
				               WHEN :reconciliations THEN AT.OBJECT_TYPE = 82
				             END )
				       AND ( AT.TIME_STAMP BETWEEN :fromDate AND :endDate )
				       AND AT.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getCustomerStatement">
		<query-param name="companyId" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TOTAL" type="double" />
		
		<![CDATA[
				SELECT T.ID     AS TRANSACTION_ID,
				       T.T_DATE AS TRANSACTION_DATE,
				       T.T_TYPE AS TRANSACTION_TYPE,
				       T.NUMBER AS TRANSACTION_NUMBER,
				       T.TOTAL  AS TRANSACTION_TOTAL
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON I.ID = T.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON CR.ID = T.ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON RP.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CP
				         ON CP.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = I.CUSTOMER_ID
				             OR C.ID = CS.CUSTOMER_ID
				             OR C.ID = CP.CUSTOMER_ID
				             OR C.ID = CR.CUSTOMER_ID
				             OR C.ID = RP.CUSTOMER_ID
				WHERE  T.T_TYPE IN ( 1, 5, 8, 12, 29 )
				       AND C.ID = :customerId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND T.SAVE_STATUS = 203
				       AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getCustomerPreviousBalance">
		<query-param name="companyId" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="fromDate" type="long" />

		<return-scalar column="TOTAL" type="double" />
		
		<![CDATA[
				SELECT CASE
		         WHEN (SELECT SUM(T.TOTAL)
		               FROM   TRANSACTION T
		                      LEFT OUTER JOIN INVOICE I
		                        ON I.ID = T.ID
		                      LEFT OUTER JOIN CASH_SALES CS
		                        ON CS.ID = T.ID
		                      LEFT OUTER JOIN CUSTOMER_REFUND CR
		                        ON CR.ID = T.ID
		                      LEFT OUTER JOIN JOURNAL_ENTRY JE
		                        ON JE.ID = T.ID
		                      LEFT OUTER JOIN CUSTOMER C
		                        ON C.ID = I.CUSTOMER_ID
		                            OR C.ID = CS.CUSTOMER_ID
		                            OR C.ID = CR.CUSTOMER_ID
		                            OR C.ID = (SELECT JEE.PAYEE_ID
		                                       FROM   JOURNAL_ENTRY JEE
		                                       WHERE  JEE.ID = T.ID
		                                              AND JEE.PAYEE_ID IS NOT NULL)
		               WHERE  T.COMPANY_ID = :companyId
		                      AND C.ID = :customerId
		                      AND CASE
		                            WHEN T.T_TYPE != 16 THEN T.T_DATE < :fromDate
		                            ELSE TRUE
		                          END
		               GROUP  BY C.ID) IS NOT NULL THEN (SELECT SUM(T.TOTAL)
		                                                 FROM   TRANSACTION T
		         LEFT OUTER JOIN INVOICE I
		           ON I.ID = T.ID
		         LEFT OUTER JOIN CASH_SALES CS
		           ON CS.ID = T.ID
		         LEFT OUTER JOIN CUSTOMER_REFUND
		                         CR
		           ON CR.ID = T.ID
		         LEFT OUTER JOIN
		         JOURNAL_ENTRY JE
		           ON JE.ID = T.ID
		         LEFT OUTER JOIN CUSTOMER C
		           ON C.ID = I.CUSTOMER_ID
		               OR C.ID = CS.CUSTOMER_ID
		               OR C.ID = CR.CUSTOMER_ID
		               OR C.ID =
		              (SELECT JEE.PAYEE_ID
		               FROM   JOURNAL_ENTRY JEE
		               WHERE  JEE.ID = T.ID
		                      AND JEE.PAYEE_ID
		                          IS NOT NULL)
		                                                 WHERE
		         T.COMPANY_ID = :companyId
		         AND C.ID = :customerId
		         AND CASE
		               WHEN T.T_TYPE != 16 THEN
		               T.T_DATE < :fromDate
		               ELSE TRUE
		             END
		                                                 GROUP  BY C.ID)
		         ELSE 0
		       END - CASE
		               WHEN (SELECT SUM(T.TOTAL)
		                     FROM   TRANSACTION T
		                            LEFT OUTER JOIN CASH_SALES CS
		                              ON CS.ID = T.ID
		                            LEFT OUTER JOIN CUSTOMER_PREPAYMENT CP
		                              ON CP.ID = T.ID
		                            LEFT OUTER JOIN RECEIVE_PAYMENT RP
		                              ON RP.ID = T.ID
		                            LEFT OUTER JOIN CUSTOMER C
		                              ON C.ID = CS.CUSTOMER_ID
		                                  OR C.ID = CP.CUSTOMER_ID
		                                  OR C.ID = RP.CUSTOMER_ID
		                     WHERE  T.COMPANY_ID = :companyId
		                            AND C.ID = :customerId
		                            AND T.T_DATE < :fromDate
		                     GROUP  BY C.ID) IS NOT NULL THEN (SELECT SUM(T.TOTAL)
		                                                       FROM   TRANSACTION T
		               LEFT OUTER JOIN CASH_SALES CS
		                 ON CS.ID = T.ID
		               LEFT OUTER JOIN CUSTOMER_PREPAYMENT CP
		                 ON CP.ID = T.ID
		               LEFT OUTER JOIN RECEIVE_PAYMENT RP
		                 ON RP.ID = T.ID
		               LEFT OUTER JOIN CUSTOMER C
		                 ON C.ID = CS.CUSTOMER_ID
		                     OR C.ID = CP.CUSTOMER_ID
		                     OR C.ID = RP.CUSTOMER_ID
		                                                       WHERE
		               T.COMPANY_ID = :companyId
		               AND C.ID = :customerId
		               AND T.T_DATE < :fromDate
		                                                       GROUP  BY C.ID)
		               ELSE 0
		             END AS TOTAL  
				]]>

	</sql-query>


	<sql-query name="getTransactionsOfAccount">
		<query-param name="companyId" type="long" />
		<query-param name="accountId" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="openingBalanceAccount" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		
		<![CDATA[
				SELECT AT.TRANSACTION_ID,
				       CASE
				         WHEN A.ACCOUNT_CURRENCY!=C.PRIMARY_CURRENCY THEN SUM(
				         AT.AMOUNT / T.CURRENCY_FACTOR)
				         ELSE SUM(AT.AMOUNT)
				       END AS AMOUNT
				FROM   ACCOUNT_TRANSACTION AT
				       LEFT JOIN TRANSACTION T
				         ON T.ID = AT.TRANSACTION_ID
				       LEFT JOIN COMPANY C
				         ON C.ID = AT.COMPANY_ID
				       LEFT JOIN ACCOUNT A
				         ON A.ID = AT.ACCOUNT_ID
				WHERE  AT.ACCOUNT_ID = :accountId
				       AND T.SAVE_STATUS = 203
				       AND T.ID NOT IN(SELECT RI.TRANSACTION_ID
				                       FROM   RECONCILIATION_ITEM RI
				                              LEFT JOIN RECONCILIATION R
				                                ON R.ID = RI.RECONCILIATION_ID
				                       WHERE  R.ACCOUNT = :accountId
				                       GROUP  BY RI.TRANSACTION_ID)
				       AND AT.COMPANY_ID = :companyId
				       AND T.T_DATE <= :endDate
				       AND AT.TRANSACTION_ID NOT IN(SELECT TRANSACTION_ID
				                                    FROM   ACCOUNT_TRANSACTION ATT
				                                    WHERE
				           ATT.ACCOUNT_ID = :openingBalanceAccount)
				GROUP  BY AT.TRANSACTION_ID,
				          A.ID,
				          T.ID,
				          C.ID
				ORDER  BY T.T_DATE;  
				]]>

	</sql-query>



	<sql-query name="getTAXRateCalculation.for.TaxReturn">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TAX_ITEM_ID" type="long" />
		<return-scalar column="TAX_AGENCY" type="long" />
		<return-scalar column="TAX_GROUP_ENTRY" type="boolean" />
		
		<![CDATA[
				SELECT SUM(TRC.VAT_AMOUNT) AS TAX_AMOUNT,
				       SUM(TRC.LINE_TOTAL) AS NET_AMOUNT,
				       T.ID                AS TRANSACTION_ID,
				       T.T_TYPE            AS TRANSACTION_TYPE,
				       T.T_DATE            AS TRANSACTION_DATE,
				       TAXI.ID             AS TAX_ITEM_ID,
				       TAXI.TAX_AGENCY     AS TAX_AGENCY,
				       TRC.VAT_GROUP_ENTRY AS TAX_GROUP_ENTRY
				FROM   TAX_RATE_CALCULATION TRC
				       LEFT JOIN TRANSACTION T
				         ON TRC.TRANSACTION_ID = T.ID
				       LEFT JOIN TAX_ITEM TAXI
				         ON TRC.TAX_ITEM_ID = TAXI.ID
				WHERE  TRC.TAX_ITEM_ID IS NOT NULL
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND TAXI.COMPANY_ID = :companyId
				       AND TAXI.TAX_AGENCY = :taxAgency
				GROUP  BY TAXI.ID,
				          T.ID,
				          TRC.VAT_GROUP_ENTRY
				ORDER  BY TAXI.ID  
				]]>

	</sql-query>

	<sql-query name="getTAXRateCalculation.for.TaxReturn.vat200">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TAX_RATE" type="double" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		
		<![CDATA[
				SELECT SUM(TRC.VAT_AMOUNT) AS TAX_AMOUNT,
				       SUM(TRC.LINE_TOTAL) AS NET_AMOUNT,
				       TAXI.TAX_RATE       AS TAX_RATE,
				       T.T_TYPE            AS TRANSACTION_TYPE
				FROM   TAX_RATE_CALCULATION TRC
				       LEFT JOIN TRANSACTION T
				         ON TRC.TRANSACTION_ID = T.ID
				       LEFT JOIN TAX_ITEM TAXI
				         ON TRC.TAX_ITEM_ID = TAXI.ID
				WHERE  TRC.TAX_ITEM_ID IS NOT NULL
				       AND TRC.TRANSACTION_DATE BETWEEN :startDate AND :endDate
				       AND TAXI.COMPANY_ID = :companyId
				       AND TAXI.TAX_AGENCY = :taxAgency
				GROUP  BY TAXI.ID,
				          T.ID,
				          TRC.VAT_GROUP_ENTRY
				ORDER  BY TAXI.ID  
				]]>

	</sql-query>

	<sql-query name="getTAXRateCalculation.for.TaxReturn.Exception">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />

		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TAX_ITEM_ID" type="long" />
		<return-scalar column="TAX_AGENCY" type="long" />
		<return-scalar column="TAX_GROUP_ENTRY" type="boolean" />
		
		<![CDATA[
				SELECT SUM(TRC.VAT_AMOUNT) AS TAX_AMOUNT,
				       SUM(TRC.LINE_TOTAL) AS NET_AMOUNT,
				       T.ID                AS TRANSACTION_ID,
				       T.T_TYPE            AS TRANSACTION_TYPE,
				       T.T_DATE            AS TRANSACTION_DATE,
				       TAXI.ID             AS TAX_ITEM_ID,
				       TAXI.TAX_AGENCY     AS TAX_AGENCY,
				       TRC.VAT_GROUP_ENTRY AS TAX_GROUP_ENTRY
				FROM   TAX_RATE_CALCULATION TRC
				       LEFT JOIN TRANSACTION T
				         ON TRC.TRANSACTION_ID = T.ID
				       LEFT JOIN TAX_ITEM TAXI
				         ON TRC.TAX_ITEM_ID = TAXI.ID
				WHERE  TRC.TAX_ITEM_ID IS NOT NULL
				       AND TRC.TRANSACTION_DATE <= (SELECT Max(TR.END_DATE)
				                                    FROM   TAX_RETURN TR
				                                    WHERE  TR.TAX_AGENCY = :taxAgency)
				       AND TAXI.COMPANY_ID = :companyId
				       AND TAXI.TAX_AGENCY = :taxAgency
				       AND TRC.TAX_RETURN IS NULL
				GROUP  BY TAXI.ID,
				          T.ID,
				          TRC.VAT_GROUP_ENTRY
				ORDER  BY TAXI.ID  
				]]>

	</sql-query>


	<sql-query name="getTAXRateCalculation.for.TaxReturn.for.reports">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TAX_ITEM_ID" type="long" />
		<return-scalar column="TAX_RATE" type="double" />
		
		<![CDATA[
				SELECT SUM(TRC.VAT_AMOUNT) AS TAX_AMOUNT,
				       SUM(TRC.LINE_TOTAL) AS NET_AMOUNT,
				       T.ID                AS TRANSACTION_ID,
				       T.NUMBER            AS TRANSACTION_NUMBER,
				       T.T_TYPE            AS TRANSACTION_TYPE,
				       T.T_DATE            AS TRANSACTION_DATE,
				       TAXI.ID             AS TAX_ITEM_ID,
				       TAXI.TAX_RATE       AS TAX_RATE
				FROM   TAX_RATE_CALCULATION TRC
				       LEFT JOIN TRANSACTION T
				         ON TRC.TRANSACTION_ID = T.ID
				       LEFT JOIN TAX_ITEM TAXI
				         ON TRC.TAX_ITEM_ID = TAXI.ID
				WHERE  TRC.TAX_ITEM_ID IS NOT NULL
				       AND TRC.TRANSACTION_DATE BETWEEN :startDate AND :endDate
				       AND TAXI.COMPANY_ID = :companyId
				       AND TAXI.TAX_AGENCY = :taxAgency
				GROUP  BY TAXI.ID,
				          T.ID
				ORDER  BY TAXI.ID  
				]]>

	</sql-query>


	<sql-query name="getTAXRateCalculation.for.TaxReturn.Exception.for.reports">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />

		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TAX_ITEM_ID" type="long" />
		<return-scalar column="TAX_RATE" type="double" />
		
		<![CDATA[
				SELECT SUM(TRC.VAT_AMOUNT) AS TAX_AMOUNT,
				       SUM(TRC.LINE_TOTAL) AS NET_AMOUNT,
				       T.ID                AS TRANSACTION_ID,
				       T.NUMBER            AS TRANSACTION_NUMBER,
				       T.T_TYPE            AS TRANSACTION_TYPE,
				       T.T_DATE            AS TRANSACTION_DATE,
				       TAXI.ID             AS TAX_ITEM_ID,
				       TAXI.TAX_RATE       AS TAX_RATE
				FROM   TAX_RATE_CALCULATION TRC
				       LEFT JOIN TRANSACTION T
				         ON TRC.TRANSACTION_ID = T.ID
				       LEFT JOIN TAX_ITEM TAXI
				         ON TRC.TAX_ITEM_ID = TAXI.ID
				WHERE  TRC.TAX_ITEM_ID IS NOT NULL
				       AND TRC.TRANSACTION_DATE <= (SELECT Max(TR.END_DATE)
				                                    FROM   TAX_RETURN TR
				                                    WHERE  TR.TAX_AGENCY = :taxAgency)
				       AND TAXI.COMPANY_ID = :companyId
				       AND TAXI.TAX_AGENCY = :taxAgency
				       AND TRC.TAX_RETURN IS NULL
				GROUP  BY TAXI.ID,
				          T.ID
				ORDER  BY TAXI.ID  
				]]>

	</sql-query>

	<sql-query name="get.CompanyId.Tradingname.and.Country.of.supportUser">
		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="TRADING_NAME" type="encryptedstring" />
		<return-scalar column="REGISTRED_COUNTRY" type="encryptedstring" />
		
		<![CDATA[
				SELECT B.COMPANY_ID        AS COMPANY_ID,
				       B.TRADING_NAME      TRADING_NAME,
				       B.REGISTRED_COUNTRY REGISTRED_COUNTRY
				FROM   (SELECT C.ID                      AS COMPANY_ID,
				               C.TRADING_NAME            TRADING_NAME,
				               C.REGISTRED_COUNTRY       REGISTRED_COUNTRY,
				               Max(T.LAST_MODIFIED_DATE) T_DATE,
				               COUNT(T)                  T_COUNT
				        FROM   COMPANY C
				               LEFT JOIN TRANSACTION T
				                 ON T.COMPANY_ID = C.ID
				        GROUP  BY C.ID,
				                  C.TRADING_NAME,
				                  C.REGISTRED_COUNTRY) AS B
				GROUP  BY COMPANY_ID,
				          TRADING_NAME,
				          REGISTRED_COUNTRY,
				          T_DATE,
				          T_COUNT
				ORDER  BY T_COUNT = 0,
				          T_DATE DESC  
				]]>

	</sql-query>

	<sql-query name="get.NonEncrypted.CompanyNames.by.client">
		<query-param name="userIds" type="long" />

		<return-scalar column="ID" type="long" />
		<return-scalar column="TRADING_NAME" type="string" />
		<![CDATA[
				SELECT C.ID,
				       C.TRADING_NAME
				FROM   COMPANY C
				WHERE  C.CREATED_BY IN ( :userIds )
				       AND C.SECRET_KEY IS NULL
				       AND C.IS_LOCKED=FALSE
				       AND C.IS_DELETED=FALSE
				ORDER  BY C.TRADING_NAME  
				]]>

	</sql-query>

	<sql-query name="get.CompanyId.Tradingname.and.Country.of.user">
		<query-param name="userIds" type="long" />

		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="TRADING_NAME" type="string" />
		<return-scalar column="TRADING_COUNTRY" type="string" />
		
		<![CDATA[
				SELECT B.COMPANY_ID        AS COMPANY_ID,
				       B.TRADING_NAME      TRADING_NAME,
				       B.TRADING_COUNTRY TRADING_COUNTRY
				FROM   (SELECT C.ID                AS COMPANY_ID,
				               C.TRADING_NAME      TRADING_NAME,
				               C.TRADING_COUNTRY TRADING_COUNTRY,
				               Max(A.TIME_STAMP)   A_DATE
				        FROM   COMPANY C
				               LEFT JOIN ACTIVITY A
				                 ON A.COMPANY_ID = C.ID
				               LEFT JOIN USERS U
				                 ON U.COMPANY_ID = C.ID
				        WHERE  U.ID IN :userIds AND
				        	   c.IS_DELETED=FALSE
				        GROUP  BY C.ID,
				                  C.TRADING_NAME,
				                  C.TRADING_COUNTRY
				        ORDER  BY A_DATE DESC) AS B
				GROUP  BY COMPANY_ID,
				          TRADING_NAME,
				          TRADING_COUNTRY
				ORDER  BY Max(A_DATE) DESC  
				]]>

	</sql-query>

	<sql-query name="get.ApiCompany.details">
		<query-param name="userIds" type="long" />

		<return-scalar column="COMPANY_ID" type="long" />
		<return-scalar column="TRADING_NAME" type="string" />
		<return-scalar column="TRADING_COUNTRY" type="string" />
		<return-scalar column="IS_ENCRYPTED" type="boolean" />
		
		<![CDATA[
				SELECT B.COMPANY_ID        AS COMPANY_ID,
				       B.TRADING_NAME      TRADING_NAME,
				       B.TRADING_COUNTRY TRADING_COUNTRY,
				       (B.SECRET_KEY IS NOT NULL) AS IS_ENCRYPTED
				FROM   (SELECT C.ID                AS COMPANY_ID,
				               C.TRADING_NAME      TRADING_NAME,
				               C.TRADING_COUNTRY TRADING_COUNTRY,
				               Max(A.TIME_STAMP)   A_DATE,
				               C.SECRET_KEY SECRET_KEY
				        FROM   COMPANY C
				               LEFT JOIN ACTIVITY A
				                 ON A.COMPANY_ID = C.ID
				               LEFT JOIN USERS U
				                 ON U.COMPANY_ID = C.ID
				        WHERE  U.ID IN :userIds
				        GROUP  BY C.ID,
				                  C.TRADING_NAME,
				                  C.TRADING_COUNTRY
				        ORDER  BY A_DATE DESC) AS B
				GROUP  BY COMPANY_ID,
				          TRADING_NAME,
				          TRADING_COUNTRY,
				          B.SECRET_KEY
				ORDER  BY Max(A_DATE) DESC  
				]]>

	</sql-query>

	<sql-query name="get.all.reconciliations.group.by.account.id">
		<query-param name="company_Id" type="long" />

		<return-scalar column="ACCOUNT_ID" type="long" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNT_TYPE" type="int" />
		<return-scalar column="START_DATE" type="long" />
		<return-scalar column="END_DATE" type="long" />
		
		<![CDATA[
				SELECT A.ID            AS ACCOUNT_ID,
				       A.NAME          AS ACCOUNT_NAME,
				       A.A_TYPE        AS ACCOUNT_TYPE,
				       Min(START_DATE) AS START_DATE,
				       Max(END_DATE)   AS END_DATE
				FROM   RECONCILIATION R
				       LEFT JOIN ACCOUNT A
				         ON A.ID = R.ACCOUNT
				WHERE  R.COMPANY_ID = :company_Id
				GROUP  BY A.ID;  
				]]>

	</sql-query>

	<sql-query name="getAllTAXReturnEntries.groupby.transaction.id">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="IS_VOID" type="boolean" />
		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TAX_ITEM" type="long" />
		
		<![CDATA[
				SELECT T.ID                 AS TRANSACTION_ID,
				       TRE.TRANSACTION_TYPE AS TRANSACTION_TYPE,
				       TRE.TRANSACTION_DATE AS TRANSACTION_DATE,
				       CASE
				         WHEN( T.ID IS NOT NULL ) THEN CASE
				                                         WHEN T.SAVE_STATUS = 204 THEN TRUE
				                                         ELSE FALSE
				                                       END
				         ELSE TRUE
				       END                  AS IS_VOID,
				       SUM(TRE.TAX_AMOUNT)  TAX_AMOUNT,
				       SUM(TRE.NET_AMOUNT)  AS NET_AMOUNT,
				       TI.ID                AS TAX_ITEM
				FROM   TAX_RETURN_ENTRY TRE
				       LEFT JOIN TRANSACTION T
				         ON T.ID = TRE.TRANSACTION_ID
				       LEFT JOIN TAX_ITEM TI
				         ON TI.ID = TRE.TAXITEM_ID
				       LEFT JOIN TAXAGENCY TA
				         ON TA.ID = TRE.TAXAGENCY_ID
				WHERE  TA.COMPANY_ID = :companyId
				       AND TI.TAX_AGENCY = :taxAgency
				GROUP  BY TI.ID,
				          TRE.TRANSACTION_TYPE,
				          TRE.TRANSACTION_DATE,
				          T.ID;  
				]]>

	</sql-query>

	<sql-query name="get.reconciliations.by.accountId_by_dates">

		<query-param name="account_Id" type="long" />
		<query-param name="company_Id" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="RECONCILATION_ID" type="long" />
		<return-scalar column="BANKNAME" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		
		<![CDATA[
				SELECT RI.ID                 AS RECONCILATION_ID,
				       A.NAME                AS BANKNAME,
				       RI.TRANSACTION_TYPE   AS TYPE,
				       RI.TRANSACTION_NUMBER AS TRANSACTION_NUMBER,
				       RI.TRANSACTION_DATE   AS TRANSACTION_DATE,
				       RI.TRANSACTION_ID     AS TRANSACTION_ID,
				       RI.AMOUNT             AS AMOUNT
				FROM   RECONCILIATION_ITEM RI
				       LEFT JOIN RECONCILIATION R
				         ON R.ID = RI.RECONCILIATION_ID
				       LEFT JOIN ACCOUNT A
				         ON A.ID = :account_Id
				WHERE  RI.TRANSACTION_DATE BETWEEN :startDate AND :endDate
				       AND R.ACCOUNT = :account_Id
				       AND R.COMPANY_ID = :company_Id  
				]]>

	</sql-query>

	<sql-query name="getAllTAXReturnEntries.groupby.transaction.id.for.reports">
		<query-param name="companyId" type="long" />
		<query-param name="taxAgency" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="IS_VOID" type="boolean" />
		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="NET_AMOUNT" type="double" />
		<return-scalar column="TAX_ITEM" type="long" />
		<return-scalar column="TAX_ITEM_NAME" type="encryptedstring" />
		<return-scalar column="TAX_RATE" type="double" />
		
		<![CDATA[
				SELECT T.ID                 AS TRANSACTION_ID,
				       T.NUMBER             AS TRANSACTION_NUMBER,
				       TRE.TRANSACTION_TYPE AS TRANSACTION_TYPE,
				       TRE.TRANSACTION_DATE AS TRANSACTION_DATE,
				       CASE
				         WHEN( T.ID IS NOT NULL ) THEN CASE
				                                         WHEN T.SAVE_STATUS = 204 THEN TRUE
				                                         ELSE FALSE
				                                       END
				         ELSE TRUE
				       END                  AS IS_VOID,
				       SUM(TRE.TAX_AMOUNT)  TAX_AMOUNT,
				       SUM(TRE.NET_AMOUNT)  AS NET_AMOUNT,
				       TI.ID                AS TAX_ITEM,
				       TIG.NAME             AS TAX_ITEM_NAME,
				       TI.TAX_RATE          AS TAX_RATE
				FROM   TAX_RETURN_ENTRY TRE
				       LEFT JOIN TRANSACTION T
				         ON T.ID = TRE.TRANSACTION_ID
				       LEFT JOIN TAX_ITEM TI
				         ON TI.ID = TRE.TAXITEM_ID
				       LEFT JOIN TAX_ITEM_GROUPS TIG
				         ON TIG.ID = TI.ID
				       LEFT JOIN TAXAGENCY TA
				         ON TA.ID = TRE.TAXAGENCY_ID
				WHERE  TA.COMPANY_ID = :companyId
				       AND TI.TAX_AGENCY = :taxAgency
				GROUP  BY T.ID,
				          TI.ID,
				          TIG.ID,
				          TRE.TRANSACTION_TYPE,
				          TRE.TRANSACTION_DATE;  
				]]>

	</sql-query>

	<sql-query name="update.primay.currency.in.company">
		<query-param name="companyId" type="long" />
		<query-param name="currencyId" type="long" />
		
		<![CDATA[
				UPDATE TRANSACTION
				SET    CURRENCY = :currencyId
				WHERE  COMPANY_ID = :companyId;
				
				UPDATE ACCOUNT
				SET    ACCOUNT_CURRENCY = :currencyId
				WHERE  COMPANY_ID = :companyId;  
				]]>

	</sql-query>

	<sql-query
		name="getMostRecentTransactionCurrencyFactor.orderby.id.basedon.currency">
		<query-param name="companyId" type="long" />
		<query-param name="transactionDate" type="long" />
		<query-param name="currency" type="long" />

		<return-scalar column="CURRENCY_FACTOR" type="double" />
		
		<![CDATA[
				SELECT T.CURRENCY_FACTOR
				FROM   TRANSACTION T
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_DATE <= :transactionDate
				       AND T.CURRENCY = :currency
				ORDER  BY T.ID DESC
				LIMIT  1
				]]>

	</sql-query>

	<query name="getPortletPageConfiguration">
		<query-param name="pageName" type="string" />
		<query-param name="userId" type="long" />
		from com.vimukti.accounter.core.PortletPageConfiguration p where
		p.pageName=:pageName AND p.user.id=:userId
	</query>

	<sql-query name="getWhoIOweVendors">
		<query-param name="companyId" type="long" />
		
		<![CDATA[
				SELECT P.ID
				FROM   PAYEE P
				WHERE  P.BALANCE > 0
				       AND P.TYPE = 2
				       AND P.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getWhoOwesMeCustomers">
		<query-param name="companyId" type="long" />
		
		<![CDATA[
				SELECT P.ID
				FROM   PAYEE P
				WHERE  P.BALANCE > 0
				       AND P.TYPE = 1
				       AND P.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<query name="getCustomersOrderByName">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Customer c where c.company=:company
		and c.isActive=true
		order by c.name
	</query>

	<query name="getVendorsOrderByName">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Vendor c where c.isActive=true and
		c.company=:company
		order by c.name
	</query>

	<sql-query name="getRecentTransactionList">
		<query-param name="companyId" type="long" />
		<query-param name="limit" type="int" />
		
		<![CDATA[
				SELECT T.ID,
				       T.T_TYPE,
				       T.TOTAL,
				       C.FULL_NAME,
				       T.T_DATE,
				       T.CURRENCY,
				       CASE
				         WHEN T.T_TYPE = 7 THEN E.ESTIMATETYPE
				         ELSE 0
				       END AS ESTIMATE_TYPE
				FROM   TRANSACTION T
				       LEFT JOIN USERS U
				         ON U.ID = T.LAST_MODIFIER
				       LEFT JOIN CLIENT C
				         ON C.ID = U.CLIENT_ID
				       LEFT JOIN ESTIMATE E
				         ON E.ID = T.ID
				WHERE  T.COMPANY_ID = :companyId
				       AND (CASE WHEN T.T_TYPE = 7 THEN E.ESTIMATETYPE NOT IN (4,5) 
				       ELSE TRUE END) AND T.SAVE_STATUS NOT IN ( 201, 202 )
				ORDER  BY T.CREATED_DATE DESC
				LIMIT  :limit  
				]]>

	</sql-query>



	<sql-query name="getAuditHistory">
		<query-param name="companyId" type="long" />
		<query-param name="objectType" type="int" />
		<query-param name="objectID" type="long" />
		<query-param name="activityID" type="long" />

		<return-scalar column="TIME" type="timestamp" />
		<return-scalar column="USER_NAME" type="encryptedstring" />
		<return-scalar column="AUDIT_HISTORY" type="text" />
		
		<![CDATA[
				SELECT A.TIME_STAMP   AS TIME,
				       A.USER_NAME    AS USER_NAME,
				       A.AUDITHISTORY AS AUDIT_HISTORY
				FROM   ACTIVITY A
				WHERE  A.COMPANY_ID = :companyId
				       AND A.OBJECT_TYPE = :objectType
				       AND A.ID <= :activityID
				       AND A.OBJECT_ID = :objectID  
				]]>

	</sql-query>


	<query name="getTaxreturnByTransactionid">
		<query-param name="transaction" type="Transaction" />
		from com.vimukti.accounter.core.TAXReturnEntry tr where
		tr.transaction=:transaction
	</query>

	<sql-query name="getRecordExpensesAccounts">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		
		<![CDATA[
				SELECT A.NAME         AS ACCOUNT_NAME,
				       SUM(AT.AMOUNT) AS AMOUNT
				FROM   ACCOUNT_TRANSACTION AT
				       LEFT JOIN ACCOUNT A
				         ON AT.ACCOUNT_ID = A.ID
				       LEFT JOIN TRANSACTION T
				         ON T.ID = AT.TRANSACTION_ID AND AT.COMPANY_ID=T.COMPANY_ID
				WHERE  ( A.A_TYPE = 15
				          OR A.A_TYPE = 16
				          OR A.A_TYPE = 18 )
				       AND AT.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				GROUP  BY A.NAME
				ORDER  BY AMOUNT DESC  
				]]>

	</sql-query>

	<sql-query name="deleteCompany">
		<query-param name="companyId" type="long" />
		<return-scalar column="IS_DELETED" type="boolean" />
		IS_DELETED = call delete_company(:companyId)
	</sql-query>

	<sql-query name="createSubscriptionFunction">
		
		<![CDATA[
				CREATE OR REPLACE FUNCTION
				CREATE_SUBSCRIPTIONS() RETURNS BOOLEAN AS 
				$$DECLARE
				R RECORD;
				_ID	BIGINT;
				BEGIN
				FOR R IN SELECT * FROM CLIENT
				LOOP
					IF R.CLIENT_SUBSCRIPTION IS NULL THEN INSERT INTO CLIENT_SUBSCRIPTION (
					SUBSCRIPTION_ID, LAST_MODIFIED, CREATED_DATE, EXPIRED_DATE, PREMIUM_TYPE) VALUES
					(1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, (DATE('NOW') + INTERVAL '2 YEAR'), 0)
					RETURNING ID INTO _ID ;
					
					UPDATE CLIENT
					SET    CLIENT_SUBSCRIPTION = _ID
					WHERE  CLIENT.ID = R.ID;  
				END IF;
				END LOOP;
				RETURN
				TRUE;
				END;
				$$ LANGUAGE PLPGSQL;
				]]>

	</sql-query>

	<sql-query name="createDeleteCompanyFunction">
		<![CDATA[
		CREATE OR REPLACE FUNCTION delete_company(cid
		bigint) RETURNS boolean
		AS
		$BODY$begin

		SET CONSTRAINTS ALL DEFERRED;
		
		DELETE FROM company_fields
		WHERE  company_id = cid;

		DELETE FROM payee_fields
		USING  payee
		WHERE  payee_id = payee.id
			   AND payee.company_id = cid;

		DELETE FROM cheque_layout
		WHERE  company_id = cid;

		DELETE FROM attachments
		WHERE  company_id = cid;

		DELETE FROM message_or_task
		WHERE  company_id = cid;

		DELETE FROM account_amounts
		USING  account
		WHERE  account_id = account.id
			   AND account.company_id = cid;

		DELETE FROM account_transaction
		WHERE  company_id = cid;
		
		DELETE FROM payee_update
		WHERE company_id = cid;
		
		DELETE FROM item_update
		WHERE company_id = cid;

		DELETE FROM adjustment_reason
		WHERE  company_id = cid;

		DELETE FROM reconciliation_item
		USING  reconciliation
		WHERE  reconciliation_id = reconciliation.id
			   AND reconciliation.company_id = cid;

		DELETE FROM reconciliation
		WHERE  company_id = cid;

		DELETE FROM bank_account
		USING  account
		WHERE  bank_account.id = account.id
			   AND account.company_id = cid;

		DELETE FROM bank
		WHERE  company_id = cid;

		DELETE FROM branding_theme
		WHERE  company_id = cid;

		DELETE FROM budgetitem
		WHERE  company_id = cid;

		DELETE FROM budget
		WHERE  company_id = cid;

		DELETE FROM cash_purchase_orders
		USING  TRANSACTION 
		WHERE  cash_purchase_orders.cash_purchase_id=TRANSACTION.id
			   and TRANSACTION.company_id = cid;
		
		DELETE FROM cash_purchase_estimates
		USING  TRANSACTION 
		WHERE  cash_purchase_estimates.cash_purchase_id=TRANSACTION.id
			   and TRANSACTION.company_id = cid;
			   
		DELETE FROM cash_purchase
		USING  TRANSACTION
		WHERE  cash_purchase.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM cash_sales
		USING  TRANSACTION
		WHERE  cash_sales.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM credit_card_charges
		USING  TRANSACTION
		WHERE  credit_card_charges.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM creditrating
		WHERE  company_id = cid;

		DELETE FROM customer_credit_memo
		USING  TRANSACTION
		WHERE  customer_credit_memo.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM customer_group
		WHERE  company_id = cid;

		DELETE FROM customer_prepayment
		USING  TRANSACTION
		WHERE  customer_prepayment.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM customer_refund
		USING  TRANSACTION
		WHERE  customer_refund.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM customfield
		WHERE  company_id = cid;

		DELETE FROM depreciation
		WHERE  company_id = cid;

		DELETE FROM enter_bill_orders
		USING  TRANSACTION
		WHERE  enter_bill_id = TRANSACTION.id
		       AND TRANSACTION.company_id = cid; 
		
		DELETE FROM enter_bill
		USING  TRANSACTION
		WHERE  enter_bill.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM enterbill_estimates
		USING  estimate,
			   TRANSACTION
		WHERE  enterbill_estimates.elt = estimate.id
			   AND TRANSACTION.id = estimate.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM fiscal_year
		WHERE  company_id = cid;

		DELETE FROM fixed_asset
		WHERE  company_id = cid;

		DELETE FROM fixed_asset_history
		WHERE  company_id = cid;
		
		DELETE FROM invoice_estimates
		USING  estimate,
			   TRANSACTION
		WHERE  invoice_estimates.estimate_id = estimate.id
			   AND TRANSACTION.id = estimate.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM invoice
		USING  TRANSACTION
		WHERE  invoice.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM estimate
		USING  TRANSACTION
		WHERE  estimate.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM item_receipt
		USING  TRANSACTION
		WHERE  item_receipt.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;


		DELETE FROM itemgroup
		WHERE  company_id = cid;

		DELETE FROM journal_entry
		USING  TRANSACTION
		WHERE  journal_entry.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM location
		WHERE  company_id = cid;

		DELETE FROM measurement
		WHERE  company_id = cid;

		DELETE FROM pay_expense
		USING  account
		WHERE  account_id = account.id
			   AND account.company_id = cid;

		DELETE FROM payee_address
		USING  payee
		WHERE  payee_address.payee_id = payee.id
			   AND payee.company_id = cid;

		DELETE FROM payee_contact
		USING  payee
		WHERE  payee_contact.payee_id = payee.id
			   AND payee.company_id = cid;

		DELETE FROM payee_customfields
		USING  payee
		WHERE  payee_customfields.payee_id = payee.id
			   AND payee.company_id = cid;

		DELETE FROM paymentterms
		WHERE  company_id = cid;

		DELETE FROM pricelevel
		WHERE  company_id = cid;

		DELETE FROM purchase_order
		USING  TRANSACTION
		WHERE  purchase_order.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM recurring_transaction
		WHERE  company_id = cid;

		DELETE FROM reminder
		WHERE  company_id = cid;

		DELETE FROM sales_person
		WHERE  company_id = cid;

		DELETE FROM shippingmethod
		WHERE  company_id = cid;

		DELETE FROM shippingterms
		WHERE  company_id = cid;

		DELETE FROM stock_adjustment
		WHERE  company_id = cid;
		
		DELETE FROM build_assembly
		USING  TRANSACTION
		WHERE  build_assembly.id = TRANSACTION.id
		       AND TRANSACTION.company_id = cid; 

		DELETE FROM inventory_assembly_item
		USING  item
		WHERE  inventory_assembly_item_id = item.id
			   AND item.company_id = cid;

		DELETE FROM inventory_assembly
		USING  item
		WHERE  inventory_assembly.id = item.id
			   AND item.company_id = cid;

		DELETE FROM item
		WHERE  company_id = cid;


		DELETE FROM stock_transfer_item
		WHERE  company_id = cid;

		DELETE FROM tax_adjustment
		USING  TRANSACTION
		WHERE  tax_adjustment.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM tax_code
		WHERE  company_id = cid;

		DELETE FROM tax_group_tax_item
		USING  tax_group
		WHERE  tax_group_id = tax_group.id
			   AND tax_group.company_id = cid;

		DELETE FROM tax_group
		WHERE  company_id = cid;

		DELETE FROM tax_item
		WHERE  company_id = cid;

		DELETE FROM tax_item_groups
		WHERE  company_id = cid;

		DELETE FROM tax_rate_calculation
		USING  TRANSACTION
		WHERE  transaction_id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM transaction_pay_tax
		USING  tax_return,
			   TRANSACTION
		WHERE  tax_return.id = transaction_pay_tax.vat_return_id
			   AND TRANSACTION.id = tax_return.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM tax_return
		USING  TRANSACTION
		WHERE  tax_return.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM tax_return_entry
		USING  TRANSACTION
		WHERE  tax_return_id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM taxagency
		WHERE  company_id = cid;

		DELETE FROM taxrates
		WHERE  company_id = cid;

		DELETE FROM transaction_credits_and_payments
		USING  credits_and_payments,
			   TRANSACTION
		WHERE  transaction_credits_and_payments.credits_and_payments_id =
					  credits_and_payments.id
			   AND credits_and_payments.transaction_id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;
		
		DELETE FROM transaction_credits_and_payments
		USING  transaction_paybill
		WHERE  transaction_credits_and_payments.transaction_paybill_id =
					  transaction_paybill.id
			   AND transaction_paybill.company_id = cid;

		DELETE FROM transaction_credits_and_payments
		USING  transaction_paybill
		WHERE  transaction_credits_and_payments.transaction_paybill_id =
					  transaction_paybill.id
			   AND transaction_paybill.company_id = cid;

		DELETE FROM credits_and_payments
		USING  TRANSACTION
		WHERE  transaction_id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM transaction_history
		USING  TRANSACTION
		WHERE  transaction_id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;
			   
		DELETE FROM inventory_purchase
		USING  transaction_item,
		       TRANSACTION
		WHERE  transaction_item_id = transaction_item.id
		       AND TRANSACTION.id = transaction_item.transaction_id
		       AND TRANSACTION.company_id = cid;  

		DELETE FROM transaction_item
		USING  TRANSACTION
		WHERE  transaction_id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM transaction_deposit_item
		USING  make_deposit,
			   TRANSACTION
		WHERE  transaction_deposit_item.make_deposit_id = make_deposit.id
			   AND TRANSACTION.id = make_deposit.id
			   AND TRANSACTION.company_id = cid;
		
		DELETE FROM deposit_estimates
		USING  TRANSACTION 
		WHERE  deposit_estimates.deposit_id=TRANSACTION.id
			   and TRANSACTION.company_id = cid;
		
		DELETE FROM make_deposit
		USING  TRANSACTION
		WHERE  make_deposit.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM transfer_fund
		USING  TRANSACTION
		WHERE  transfer_fund.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM transaction_make_deposit_entries
		USING  TRANSACTION
		WHERE  transaction_id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM transaction_pay_tax
		USING  pay_tax,
			   TRANSACTION
		WHERE  pay_tax_id = pay_tax.id
			   AND TRANSACTION.id = pay_tax.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM pay_tax
		USING  TRANSACTION
		WHERE  pay_tax.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM transaction_paybill
		USING  pay_bill,
			   TRANSACTION
		WHERE  paybill_id = pay_bill.id
			   AND TRANSACTION.id = pay_bill.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM pay_bill
		USING  TRANSACTION
		WHERE  pay_bill.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;
			   
		DELETE FROM vendor_payment
		USING  TRANSACTION
		WHERE  vendor_payment.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM transaction_credits_and_payments
		USING  transaction_receive_payment,
			   TRANSACTION
		WHERE  transaction_receive_payment.id =
					  transaction_credits_and_payments.transaction_receive_payment_id
			   AND transaction_receive_payment.transaction_id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM transaction_receive_payment
		USING  TRANSACTION
		WHERE  transaction_id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM receive_payment
		USING  TRANSACTION
		WHERE  receive_payment.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM transaction_receive_vat
		USING  receive_vat,
			   TRANSACTION
		WHERE  transaction_receive_vat.receive_vat_id = receive_vat.id
			   AND TRANSACTION.id = receive_vat.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM receive_vat
		USING  TRANSACTION
		WHERE  receive_vat.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;
			   
		DELETE FROM tdsdeductormasters
		WHERE  company_id = cid;
		
		DELETE FROM tdsresponsibleperson
		WHERE  company_id = cid;  
		
		DELETE FROM tdstransactionitem
		USING  TRANSACTION
		WHERE  transaction_id = TRANSACTION.id
		       AND TRANSACTION.company_id = cid; 
		       
		DELETE FROM tds_chalan_detail
		USING  TRANSACTION
		WHERE  tds_chalan_detail.id = TRANSACTION.id
		       AND TRANSACTION.company_id = cid;  

		DELETE FROM unit
		WHERE  company_id = cid;

		DELETE FROM unit_of_measure
		WHERE  company_id = cid;

		DELETE FROM nominal_code_range
		WHERE  company_id = cid;

		DELETE FROM vatreturnbox
		WHERE  company_id = cid;

		DELETE FROM vendor
		WHERE  company_id = cid;

		DELETE FROM vendor_credit_memo
		USING  TRANSACTION
		WHERE  vendor_credit_memo.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;

		DELETE FROM vendor_group
		WHERE  company_id = cid;

		DELETE FROM warehouse
		WHERE  company_id = cid;
		
		DELETE FROM write_checks_estimates
		USING  TRANSACTION 
		WHERE  write_checks_estimates.write_checks_id=TRANSACTION.id
			   and TRANSACTION.company_id = cid;

		DELETE FROM write_checks
		USING  TRANSACTION
		WHERE  write_checks.id = TRANSACTION.id
			   AND TRANSACTION.company_id = cid;
		
		DELETE FROM job
		WHERE  company_id = cid;

		DELETE FROM customer
		WHERE  company_id = cid;

		DELETE FROM portlet_configuration_portletdata
		USING  portlet_configuration,
			   portlet_page_configuration,
			   users
		WHERE  portlet_configuration.id = portlet_configuration_portletdata.id
			   AND portlet_configuration.portlet_config_id =
				   portlet_page_configuration.id
			   AND portlet_page_configuration.user_id = users.id
			   AND users.company_id = cid;

		DELETE FROM portlet_configuration
		USING  portlet_page_configuration,
			   users
		WHERE  portlet_configuration.portlet_config_id = portlet_page_configuration.id
			   AND portlet_page_configuration.user_id = users.id
			   AND users.company_id = cid;

		DELETE FROM portlet_page_configuration
		USING  users
		WHERE  user_id = users.id
			   AND users.company_id = cid;
	
		DELETE FROM attendance_or_production_items
		USING ATTENDANCE_MANAGEMENT_ITEM AMI
		LEFT JOIN PAYEE E ON AMI.EMPLOYEE =E.ID 
		WHERE E.COMPANY_ID = cid;

		DELETE FROM ATTENDANCE_MANAGEMENT_ITEM
		USING PAYEE E
		WHERE ATTENDANCE_MANAGEMENT_ITEM.EMPLOYEE =E.ID
		AND E.COMPANY_ID = cid;
		
		DELETE FROM PAY_ROLL_UNIT 
		WHERE COMPANY_ID = cid;
		
		DELETE FROM PAY_STRUCTURE_ITEM
		USING PAY_STRUCTURE 
		WHERE PAY_STRUCTURE_ITEM.PAY_STRUCTURE =PAY_STRUCTURE.ID
		AND PAY_STRUCTURE.COMPANY_ID = cid;
		
		DELETE FROM ATTENDANCE_PAYHEAD 
		USING PAY_HEAD PH
		WHERE PH.ID = ATTENDANCE_PAYHEAD.ID
		AND PH.COMPANY_ID =cid;

		DELETE FROM USER_DEFINED_PAY_HEAD 
		USING PAY_HEAD PH
		WHERE PH.ID = USER_DEFINED_PAY_HEAD.ID
		AND PH.COMPANY_ID =cid;
		
		DELETE FROM COMPUTATION_SLABS 
		USING PAY_HEAD PH
		WHERE PH.ID = COMPUTATION_SLABS.PAY_HEAD_ID
		AND PH.COMPANY_ID =cid;

		DELETE FROM FORMULA_FUNCTION
		USING PAY_HEAD PH
		WHERE PH.ID = FORMULA_FUNCTION.PAY_HEAD_ID
		AND PH.COMPANY_ID =cid; 
		
		DELETE FROM COMPUTATION_PAY_HEAD 
		USING PAY_HEAD PH
		WHERE PH.ID = COMPUTATION_PAY_HEAD.ID
		AND PH.COMPANY_ID =cid;

		DELETE FROM FLAT_RATE_PAY_HEAD 
		USING PAY_HEAD PH
		WHERE PH.ID = FLAT_RATE_PAY_HEAD.ID
		AND PH.COMPANY_ID =cid;
		
		DELETE FROM PAY_STRUCTURE_ITEM 
		USING PAY_HEAD PH
		WHERE PH.ID = PAY_STRUCTURE_ITEM.PAY_HEAD
		AND PH.COMPANY_ID =cid;

		DELETE FROM EMPLOYEE_PAYHEAD_COMPONENT
                USING PAY_HEAD PH
		WHERE PH.ID = EMPLOYEE_PAYHEAD_COMPONENT.PAY_HEAD
		AND PH.COMPANY_ID =cid;
		
		DELETE FROM PAY_HEAD 
		WHERE COMPANY_ID = cid; 

		DELETE FROM ATTENDANCE_OR_PRODUCTION_TPE
		WHERE COMPANY_ID = cid;
		
		DELETE FROM PAY_STRUCTURE 
		WHERE COMPANY_ID=cid;
		
		DELETE FROM EMPLOYEE_PAYMENT_DETAILS
		USING PAYEE
		WHERE PAYEE.ID=EMPLOYEE_PAYMENT_DETAILS.EMPLOYEE
		AND PAYEE.COMPANY_ID = cid;
		
		DELETE FROM TRANSACTION_PAY_EMPLOYEE
		WHERE COMPANY_ID = cid;
		
		DELETE FROM PAY_EMPLOYEE
		USING TRANSACTION T
		WHERE PAY_EMPLOYEE.ID = T.ID
		AND T.COMPANY_ID = cid;	
		
		DELETE FROM PAY_RUN
		USING TRANSACTION T
		WHERE PAY_RUN.ID = T.ID
		AND T.company_id = cid;	
		
		DELETE FROM EMPLOYEE
		USING PAYEE P 
		WHERE P.COMPANY_ID = cid AND P.ID = EMPLOYEE.ID;
		
		DELETE FROM EMPLOYEE_GROUP
		WHERE COMPANY_ID = cid;
		
		DELETE FROM account
		WHERE  company_id = cid;
		
		DELETE FROM TRANSACTION
		WHERE  company_id = cid;

		DELETE FROM accounter_class
		WHERE  company_id = cid;

		DELETE FROM payee
		WHERE  company_id = cid;

		DELETE FROM users
		WHERE  company_id = cid;

		DELETE FROM currency
		WHERE  company_id = cid;
		
		DELETE FROM activity
		WHERE  company_id = cid;

		DELETE FROM email_account
		WHERE  company_id = cid;  
		
		DELETE from email_template
		WHERE  company_id = cid;
		       
		DELETE FROM company
		WHERE  id = cid;  

		return
		true;
		end;$BODY$
		LANGUAGE plpgsql VOLATILE;
		]]>
	</sql-query>


	<!-- To generate the Invoices List which includes Cash Sales, Customer Credit 
		Memos, Invoices and Write Checks -->
	<sql-query name="getInvoicesListByPayee">
		<query-param name="companyId" type="long" />
		<query-param name="payeeId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT T.CURRENCY   AS CURRENCY_ID,
				       T.ID         AS TRANSACTION_ID,
				       T.T_TYPE     AS TRANSACTION_TYPE,
				       T.T_DATE     AS TRANSACTION_DATE,
				       T.NUMBER     TRANSACTION_NUMBER,
				       P.NAME       AS CUSTOMER_NAME,
				       T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         ELSE NULL
				       END          AS DUE_DATE,
				       T.TOTAL      AS TOTAL_PRICE,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.BALANCE_DUE
				         ELSE 0.0
				       END          AS BALANCE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END          AS ISVOIDED,
				       T.STATUS     AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = I.CUSTOMER_ID
				             OR C.ID = CS.CUSTOMER_ID
				             OR C.ID = CCM.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE IN( 1, 4, 8 )
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND I.CUSTOMER_ID = :payeeId
				ORDER  BY DUE_DATE  
				]]>

	</sql-query>

	<sql-query name="getInvoicesListByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />

		<![CDATA[
				SELECT T.CURRENCY   AS CURRENCY_ID,
				       T.MEMO       AS TRANSACTION_MEMO,
				       T.ID         AS TRANSACTION_ID,
				       T.T_TYPE     AS TRANSACTION_TYPE,
				       T.T_DATE     AS TRANSACTION_DATE,
				       T.NUMBER     TRANSACTION_NUMBER,
				       P.NAME       AS CUSTOMER_NAME,
				       T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         ELSE NULL
				       END          AS DUE_DATE,
				       T.TOTAL      AS TOTAL_PRICE,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.BALANCE_DUE
				         ELSE 0.0
				       END          AS BALANCE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END          AS ISVOIDED,
				       T.SAVE_STATUS     AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = I.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       Left JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       Left JOIN ITEM IT ON IT.ID=TI.ITEM_ID
				WHERE  T.T_TYPE = 8
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND T.SAVE_STATUS != 202
				       and IT.id =:consultantId
				ORDER  BY DUE_DATE
				]]>

	</sql-query>

	<sql-query name="getOpenInvoicesListByItem">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="itemId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="ESTIMATE_TYPE" type="int" />
		
		<![CDATA[
				SELECT T.CURRENCY    AS CURRENCY_ID,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      TRANSACTION_NUMBER,
				       CASE
				         WHEN T.T_TYPE = 7 THEN E.ESTIMATETYPE
				         ELSE 0
				       END           AS ESTIMATE_TYPE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       TI.QTY_VALUE  AS QUANTITY,
				       TI.QTY_UNIT   AS UNIT,
				       TI.LINE_TOTAL AS AMOUNT
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ESTIMATE E
				         ON E.ID = T.ID AND E.ESTIMATETYPE NOT IN (4,5)
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				WHERE  T.T_TYPE = 8
				       AND T.SAVE_STATUS != 202
				       AND T.SAVE_STATUS != 204
				       AND T.SAVE_STATUS != 201
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :itemId
				       AND I.BALANCE_DUE > 0
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="getOpenInvoicesListByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT T.CURRENCY   AS CURRENCY_ID,
				       T.MEMO       AS TRANSACTION_MEMO,
				       T.ID         AS TRANSACTION_ID,
				       T.T_TYPE     AS TRANSACTION_TYPE,
				       T.T_DATE     AS TRANSACTION_DATE,
				       T.NUMBER     TRANSACTION_NUMBER,
				       P.NAME       AS CUSTOMER_NAME,
				       T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         ELSE NULL
				       END          AS DUE_DATE,
				       T.TOTAL      AS TOTAL_PRICE,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.BALANCE_DUE
				         ELSE 0.0
				       END          AS BALANCE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END          AS ISVOIDED,
				       T.SAVE_STATUS     AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = I.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       LEFT JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       LEFT JOIN ITEM IT ON IT.ID=TI.ITEM_ID
				WHERE  T.T_TYPE = 8
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :consultantId
				       AND I.BALANCE_DUE > 0
				ORDER  BY DUE_DATE  
				]]>

	</sql-query>

	<sql-query name="getDraftInvoicesListByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT T.CURRENCY   AS CURRENCY_ID,
				       T.MEMO       AS TRANSACTION_MEMO,
				       T.ID         AS TRANSACTION_ID,
				       T.T_TYPE     AS TRANSACTION_TYPE,
				       T.T_DATE     AS TRANSACTION_DATE,
				       T.NUMBER     TRANSACTION_NUMBER,
				       P.NAME       AS CUSTOMER_NAME,
				       T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         ELSE NULL
				       END          AS DUE_DATE,
				       T.TOTAL      AS TOTAL_PRICE,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.BALANCE_DUE
				         ELSE 0.0
				       END          AS BALANCE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END          AS ISVOIDED,
				       T.SAVE_STATUS     AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = I.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       LEFT JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       LEFT JOIN ITEM IT ON IT.ID=TI.ITEM_ID
				WHERE  T.T_TYPE = 8
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :consultantId
				       AND T.SAVE_STATUS = 201
				ORDER  BY DUE_DATE  
				]]>

	</sql-query>

	<sql-query name="getOverdueInvoicesListByItem">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="itemId" type="long" />
		<query-param name="currentDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="ESTIMATE_TYPE" type="int" />
		
		<![CDATA[
				SELECT T.CURRENCY    AS CURRENCY_ID,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      TRANSACTION_NUMBER,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       TI.QTY_VALUE  AS QUANTITY,
				       TI.QTY_UNIT   AS UNIT,
				       TI.LINE_TOTAL AS AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 7 THEN E.ESTIMATETYPE
				         ELSE 0
				       END           AS ESTIMATE_TYPE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ESTIMATE E
				         ON E.ID = T.ID AND E.ESTIMATETYPE NOT IN (4,5)
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				WHERE  T.SAVE_STATUS NOT IN ( 204, 202, 201 )
				       AND T.T_TYPE = 8
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND I.DUE_DATE < :currentDate
				       AND IT.ID = :itemId
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="getOverdueInvoicesListByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />
		<query-param name="currentDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />

		<![CDATA[
				SELECT T.CURRENCY   AS CURRENCY_ID,
				       T.MEMO       AS TRANSACTION_MEMO,
				       T.ID         AS TRANSACTION_ID,
				       T.T_TYPE     AS TRANSACTION_TYPE,
				       T.T_DATE     AS TRANSACTION_DATE,
				       T.NUMBER     TRANSACTION_NUMBER,
				       P.NAME       AS CUSTOMER_NAME,
				       T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         ELSE NULL
				       END          AS DUE_DATE,
				       T.TOTAL      AS TOTAL_PRICE,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.BALANCE_DUE
				         ELSE 0.0
				       END          AS BALANCE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END          AS ISVOIDED,
				       T.SAVE_STATUS     AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = I.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       LEFT JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       LEFT JOIN ITEM IT ON IT.ID=TI.ITEM_ID
				WHERE  T.SAVE_STATUS <> 204
				       AND T.T_TYPE = 8
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND I.DUE_DATE <= :currentDate
				       AND IT.ID = :consultantId
				ORDER  BY DUE_DATE  
				]]>

	</sql-query>


	<sql-query name="getCashSalesByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		
		<![CDATA[
				SELECT T.MEMO       AS TRANSACTION_MEMO,
				       T.CURRENCY   AS CURRENCY_ID,
				       T.ID         AS TRANSACTION_ID,
				       T.T_TYPE     AS TRANSACTION_TYPE,
				       T.T_DATE     AS TRANSACTION_DATE,
				       T.NUMBER     AS TRANSACTION_NUMBER,
				       P.NAME       AS CUSTOMER_NAME,
				       T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,
				       NULL         AS DUE_DATE,
				       T.TOTAL      AS TOTAL_PRICE,
				       0.0          AS BALANCE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END          AS ISVOIDED,
				       T.SAVE_STATUS     AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CS.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       Left JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       Left JOIN ITEM IT ON IT.ID=TI.ITEM_ID  
				WHERE  T.T_TYPE = 1
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :consultantId  
				]]>

	</sql-query>

	<sql-query name="getDraftCashSalesByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT T.MEMO       AS TRANSACTION_MEMO,
				       T.CURRENCY   AS CURRENCY_ID,
				       T.ID         AS TRANSACTION_ID,
				       T.T_TYPE     AS TRANSACTION_TYPE,
				       T.T_DATE     AS TRANSACTION_DATE,
				       T.NUMBER     AS TRANSACTION_NUMBER,
				       P.NAME       AS CUSTOMER_NAME,
				       T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,
				       NULL         AS DUE_DATE,
				       T.TOTAL      AS TOTAL_PRICE,
				       0.0          AS BALANCE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END          AS ISVOIDED,
				       T.SAVE_STATUS     AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CS.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       LEFT JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       LEFT JOIN ITEM IT ON IT.ID=TI.ITEM_ID
				WHERE  T.T_TYPE = 1
				       AND T.COMPANY_ID = :companyId
				       AND T.SAVE_STATUS = 201
				       AND T.SAVE_STATUS != 202
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :consultantId  
				]]>

	</sql-query>

	<sql-query name="getAllCustomerCreditMemosByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT T.MEMO       AS TRANSACTION_MEMO,
				       T.CURRENCY   AS CURRENCY_ID,
				       T.ID         AS TRANSACTION_ID,
				       T.T_TYPE     AS TRANSACTION_TYPE,
				       T.T_DATE     AS TRANSACTION_DATE,
				       T.NUMBER     AS TRANSACTION_NUMBER,
				       P.NAME       AS CUSTOMER_NAME,
				       T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,
				       T.TOTAL      AS TOTAL_PRICE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END          AS ISVOIDED,
				       NULL         AS DUE_DATE,
				       0.0          AS BALANCE,
				       T.SAVE_STATUS     AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CCM.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       Left JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       Left JOIN ITEM IT ON IT.ID=TI.ITEM_ID  
				WHERE  T.T_TYPE = 4
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :consultantId  
				]]>

	</sql-query>

	<sql-query name="getOpendCustomerCreditMemosByItem">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="itemId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="ESTIMATE_TYPE" type="int" />
		
		<![CDATA[
				SELECT T.CURRENCY    AS CURRENCY_ID,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      TRANSACTION_NUMBER,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       TI.QTY_VALUE  AS QUANTITY,
				       TI.QTY_UNIT   AS UNIT,
				       TI.LINE_TOTAL AS AMOUNT,
				       0 AS ESTIMATE_TYPE
				FROM   TRANSACTION T				     
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				WHERE  T.T_TYPE = 4
				       AND T.STATUS = 101
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :itemId
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="getOpendCustomerCreditMemosByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT T.MEMO       AS TRANSACTION_MEMO,
				       T.CURRENCY   AS CURRENCY_ID,
				       T.ID         AS TRANSACTION_ID,
				       T.T_TYPE     AS TRANSACTION_TYPE,
				       T.T_DATE     AS TRANSACTION_DATE,
				       T.NUMBER     AS TRANSACTION_NUMBER,
				       P.NAME       AS CUSTOMER_NAME,
				       T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,
				       T.TOTAL      AS TOTAL_PRICE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END          AS ISVOIDED,
				       NULL         AS DUE_DATE,
				       0.0          AS BALANCE,
				       T.SAVE_STATUS     AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CCM.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       Left JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       LEFT JOIN ITEM IT ON IT.ID=TI.ITEM_ID  
				WHERE  T.T_TYPE = 4
				       AND T.STATUS = 101
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :consultantId  
				]]>

	</sql-query>

	<sql-query name="getDraftCustomerCreditMemosByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT T.MEMO       AS TRANSACTION_MEMO,
				       T.CURRENCY   AS CURRENCY_ID,
				       T.ID         AS TRANSACTION_ID,
				       T.T_TYPE     AS TRANSACTION_TYPE,
				       T.T_DATE     AS TRANSACTION_DATE,
				       T.NUMBER     AS TRANSACTION_NUMBER,
				       P.NAME       AS CUSTOMER_NAME,
				       T.NET_AMOUNT AS TRANSACTION_NET_AMOUNT,
				       T.TOTAL      AS TOTAL_PRICE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END          AS ISVOIDED,
				       NULL         AS DUE_DATE,
				       0.0          AS BALANCE,
				       T.SAVE_STATUS     AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CCM.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       LEFT JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       LEFT JOIN ITEM IT ON IT.ID=TI.ITEM_ID
				WHERE  T.T_TYPE = 4
				       AND T.SAVE_STATUS = 201
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :consultantId  
				]]>

	</sql-query>

	<sql-query name="getAllReceivePaymentsByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="IS_VOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD_NAME" type="encryptedstring" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		
		<![CDATA[
				SELECT NULL             AS DUE_DATE,
				       RPL.TRANSACTION_ID             AS TRANSACTION_ID,
				       RPL.TRANSACTION_MEMO           AS TRANSACTION_MEMO,
				       RPL.TRANSACTION_TYPE           AS TRANSACTION_TYPE,
				       RPL.TRANSACTION_NUMBER         AS TRANSACTION_NUMBER,
				       RPL.TRANSACTION_DATE           AS TRANSACTION_DATE,
				       RPL.TRANSACTION_NET_AMOUNT     AS TRANSACTION_NET_AMOUNT,
				       RPL.CUSTOMER_NAME              AS CUSTOMER_NAME,
				       RPL.PAYMENT_METHOD_NAME        AS PAYMENT_METHOD_NAME,
				      	    CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END              AS IS_VOIDED,
				       T.SAVE_STATUS         AS TRANSACTION_STATUS,
				       RP.CHECK_NUMBER  AS CHECK_NUMBER,
				       T.CURRENCY       AS CURRENCY			   
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
					    LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
						 LEFT OUTER JOIN CUSTOMER_PREPAYMENT CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON (C.ID = I.CUSTOMER_ID AND 
							  C.ID = RP.CUSTOMER_ID
        			          OR C.ID = CP.CUSTOMER_ID)
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       LEFT JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       LEFT JOIN ITEM IT ON IT.ID = TI.ITEM_ID

              LEFT JOIN  (SELECT TRP.INVOICE_ID   AS INVOICE_ID,
				       T.MEMO           AS TRANSACTION_MEMO,
				       T.ID             AS TRANSACTION_ID,
				       T.T_TYPE         AS TRANSACTION_TYPE,
				       T.T_DATE         AS TRANSACTION_DATE,
				       T.NUMBER         AS TRANSACTION_NUMBER,
				       P.NAME           AS CUSTOMER_NAME,
				       T.PAYMENT_METHOD AS PAYMENT_METHOD_NAME,
				       T.TOTAL          AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END              AS IS_VOIDED,
				       T.SAVE_STATUS         AS TRANSACTION_STATUS,
				       RP.CHECK_NUMBER  AS CHECK_NUMBER,
				       T.CURRENCY       AS CURRENCY
				FROM   TRANSACTION T
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON ( C.ID = RP.CUSTOMER_ID
				               OR C.ID = CP.CUSTOMER_ID )
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       LEFT OUTER JOIN TRANSACTION_RECEIVE_PAYMENT TRP
					   ON TRP.TRANSACTION_ID = T.ID
				WHERE  ( T.T_TYPE = 12
				          OR T.T_TYPE = 29 )
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId) AS RPL
					  ON RPL.INVOICE_ID = T.ID
		WHERE  T.T_TYPE = 8
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND T.SAVE_STATUS != 202
				       AND I.PAYMENTS != 0
				       AND IT.id =:consultantId
				]]>

	</sql-query>

	<sql-query name="getReceivePaymentsbyTypeByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />
		<query-param name="paymentmethod" type="encryptedstring" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="IS_VOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD_NAME" type="encryptedstring" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		
		<![CDATA[
				SELECT NULL             AS DUE_DATE,
				       RPL.TRANSACTION_ID             AS TRANSACTION_ID,
				       RPL.TRANSACTION_MEMO           AS TRANSACTION_MEMO,
				       RPL.TRANSACTION_TYPE           AS TRANSACTION_TYPE,
				       RPL.TRANSACTION_NUMBER         AS TRANSACTION_NUMBER,
				       RPL.TRANSACTION_DATE           AS TRANSACTION_DATE,
				       RPL.TRANSACTION_NET_AMOUNT     AS TRANSACTION_NET_AMOUNT,
				       RPL.CUSTOMER_NAME              AS CUSTOMER_NAME,
				       RPL.PAYMENT_METHOD_NAME        AS PAYMENT_METHOD_NAME,
				      	    CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END              AS IS_VOIDED,
				       T.SAVE_STATUS         AS TRANSACTION_STATUS,
				       RP.CHECK_NUMBER  AS CHECK_NUMBER,
				       T.CURRENCY       AS CURRENCY			   
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
					    LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
						 LEFT OUTER JOIN CUSTOMER_PREPAYMENT CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON (C.ID = I.CUSTOMER_ID AND 
							  C.ID = RP.CUSTOMER_ID
        			          OR C.ID = CP.CUSTOMER_ID)
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       LEFT JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       LEFT JOIN ITEM IT ON IT.ID = TI.ITEM_ID

              LEFT JOIN  (SELECT TRP.INVOICE_ID   AS INVOICE_ID,
				       T.MEMO           AS TRANSACTION_MEMO,
				       T.ID             AS TRANSACTION_ID,
				       T.T_TYPE         AS TRANSACTION_TYPE,
				       T.T_DATE         AS TRANSACTION_DATE,
				       T.NUMBER         AS TRANSACTION_NUMBER,
				       P.NAME           AS CUSTOMER_NAME,
				       T.PAYMENT_METHOD AS PAYMENT_METHOD_NAME,
				       T.TOTAL          AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END              AS IS_VOIDED,
				       T.SAVE_STATUS         AS TRANSACTION_STATUS,
				       RP.CHECK_NUMBER  AS CHECK_NUMBER,
				       T.CURRENCY       AS CURRENCY
				FROM   TRANSACTION T
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON ( C.ID = RP.CUSTOMER_ID
				               OR C.ID = CP.CUSTOMER_ID )
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       LEFT OUTER JOIN TRANSACTION_RECEIVE_PAYMENT TRP
					   ON TRP.TRANSACTION_ID = T.ID
				WHERE  ( T.T_TYPE = 12
				          OR T.T_TYPE = 29 )
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId) AS RPL
					  ON RPL.INVOICE_ID = T.ID
		WHERE  T.T_TYPE = 8
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND T.SAVE_STATUS != 202
				        AND RPL.PAYMENT_METHOD_NAME LIKE :paymentmethod
				       AND I.PAYMENTS != 0
				       AND IT.id =:consultantId
				]]>

	</sql-query>

	<sql-query name="getAllCustomerRefundsByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT T.MEMO     AS TRANSACTION_MEMO,
				       T.CURRENCY AS CURRENCY_ID,
				       T.ID       AS TRANSACTION_ID,
				       T.T_TYPE   AS TRANSACTION_TYPE,
				       T.T_DATE   AS TRANSACTION_DATE,
				       T.NUMBER   AS TRANSACTION_NUMBER,
				       P.NAME     AS CUSTOMER_NAME,
				       T.TOTAL    AS TRANSACTION_NET_AMOUNT,
				       T.TOTAL    AS TOTAL_PRICE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END        AS ISVOIDED,
				       NULL       AS DUE_DATE,
				       0.0        AS BALANCE,
				       T.SAVE_STATUS   AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CUSTOMER_REFUND CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CCM.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE = 5
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND C.ID = :customerId  
				]]>

	</sql-query>

	<sql-query name="getDraftCustomerRefundsByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT T.MEMO     AS TRANSACTION_MEMO,
				       T.CURRENCY AS CURRENCY_ID,
				       T.ID       AS TRANSACTION_ID,
				       T.T_TYPE   AS TRANSACTION_TYPE,
				       T.T_DATE   AS TRANSACTION_DATE,
				       T.NUMBER   AS TRANSACTION_NUMBER,
				       P.NAME     AS CUSTOMER_NAME,
				       T.TOTAL    AS TRANSACTION_NET_AMOUNT,
				       T.TOTAL    AS TOTAL_PRICE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END        AS ISVOIDED,
				       NULL       AS DUE_DATE,
				       0.0        AS BALANCE,
				       T.SAVE_STATUS   AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CUSTOMER_REFUND CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CCM.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE = 5
				       AND T.SAVE_STATUS = 201
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND C.ID = :customerId  
				]]>

	</sql-query>

	<sql-query name="getCustomerRefundsByTypeByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="paymentmethod" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT T.MEMO     AS TRANSACTION_MEMO,
				       T.CURRENCY AS CURRENCY_ID,
				       T.ID       AS TRANSACTION_ID,
				       T.T_TYPE   AS TRANSACTION_TYPE,
				       T.T_DATE   AS TRANSACTION_DATE,
				       T.NUMBER   AS TRANSACTION_NUMBER,
				       P.NAME     AS CUSTOMER_NAME,
				       T.TOTAL    AS TRANSACTION_NET_AMOUNT,
				       T.TOTAL    AS TOTAL_PRICE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END        AS ISVOIDED,
				       NULL       AS DUE_DATE,
				       0.0        AS BALANCE,
				       T.SAVE_STATUS   AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CUSTOMER_REFUND CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CCM.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE = 5
				       AND T.PAYMENT_METHOD LIKE :paymentmethod
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND C.ID = :customerId  
				]]>

	</sql-query>

	<sql-query name="getAllTransactionsByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS TRANSACTION_STATUS,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         ELSE NULL
				       END           AS DUE_DATE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       P.NAME       AS CUSTOMER_NAME,
				       T.TOTAL      AS TOTAL_PRICE,
				       T.CURRENCY    AS CURRENCY
				FROM   TRANSACTION T
				       LEFT JOIN INVOICE I
				         ON I.ID = T.ID
				       LEFT JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON CCM.ID = T.ID
				       LEFT JOIN CUSTOMER_REFUND CR
				         ON CR.ID = T.ID
				       LEFT JOIN ESTIMATE E
				         ON E.ID = T.ID AND E.ESTIMATETYPE NOT IN (4,5) 
				       LEFT JOIN RECEIVE_PAYMENT RP
				         ON RP.ID = T.ID
				       LEFT JOIN CUSTOMER_PREPAYMENT CP
				         ON CP.ID = T.ID
				       LEFT JOIN WRITE_CHECKS WC
				       	 ON WC.ID = T.ID
				       LEFT JOIN PAYEE P
				         ON P.ID = I.CUSTOMER_ID
				             OR P.ID = CS.CUSTOMER_ID
				             OR P.ID = CCM.CUSTOMER_ID
				             OR P.ID = CR.CUSTOMER_ID
				             OR P.ID = E.CUSTOMER_ID
				             OR P.ID = RP.CUSTOMER_ID
				             OR P.ID = CP.CUSTOMER_ID
				             OR P.ID = WC.CUSTOMER_ID
				       Left JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       Left JOIN ITEM IT ON IT.ID=TI.ITEM_ID
				WHERE  T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :consultantId  
				]]>

	</sql-query>

	<sql-query name="getCustomerCreditMemos">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		<return-scalar column="REMAING_CREDITS" type="double" />
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       T.CURRENCY    AS CURRENCY_ID,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS CUSTOMER_NAME,
				       T.NET_AMOUNT  AS TRANSACTION_NET_AMOUNT,
				       T.TOTAL       AS TOTAL_PRICE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       NULL          AS DUE_DATE,
				       0.0           AS BALANCE,
				       T.STATUS      AS TRANSACTION_STATUS,
				       CCM.BALANCE_DUE AS REMAING_CREDITS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CCM.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE = 4
				       AND CASE
				             WHEN 1 = :viewType THEN ( CCM.BALANCE_DUE > 0.0
				                                       AND T.STATUS != 2
				                                       AND T.SAVE_STATUS !=204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 3 = :viewType THEN ( T.SAVE_STATUS = 204 )
				             WHEN 4 = :viewType THEN ( T.SAVE_STATUS = 201 )
				             ELSE TRUE
				           END
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate 
				ORDER BY T.T_DATE DESC, T.NUMBER DESC   
				]]>

	</sql-query>

	<sql-query name="getInvoicesOnly">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<query-param name="todayDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       T.CURRENCY    AS CURRENCY_ID,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS CUSTOMER_NAME,
				       T.NET_AMOUNT  AS TRANSACTION_NET_AMOUNT,
				       I.DUE_DATE    AS DUE_DATE,
				       T.TOTAL       AS TOTAL_PRICE,
				       I.BALANCE_DUE AS BALANCE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = I.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE = 8
				       AND CASE
				             WHEN 1 = :viewType THEN ( I.BALANCE_DUE > 0.0
				                                       AND T.STATUS != 2
				                                       AND T.SAVE_STATUS !=204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 2 = :viewType THEN ( I.BALANCE_DUE > 0.0
				                                       AND I.DUE_DATE < :todayDate
				                                       AND T.SAVE_STATUS !=204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 3 = :viewType THEN ( T.SAVE_STATUS = 204 )
				             WHEN 4 = :viewType THEN ( T.SAVE_STATUS = 201 )
				             ELSE TRUE
				           END
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				ORDER BY T.T_DATE DESC, T.NUMBER DESC
				]]>

	</sql-query>

	<sql-query name="getCashSalesList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       T.CURRENCY    AS CURRENCY_ID,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS CUSTOMER_NAME,
				       T.NET_AMOUNT  AS TRANSACTION_NET_AMOUNT,
				       NULL          AS DUE_DATE,
				       T.TOTAL       AS TOTAL_PRICE,
				       0.0           AS BALANCE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CS.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE = 1
				       AND CASE
				             WHEN 1 = :viewType THEN ( T.SAVE_STATUS !=204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 3 = :viewType THEN ( T.SAVE_STATUS = 204 )
				             WHEN 4 = :viewType THEN ( T.SAVE_STATUS = 201 )
				             ELSE TRUE
				           END
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate 
				ORDER BY T.T_DATE DESC, T.NUMBER DESC  
				]]>

	</sql-query>

	<sql-query name="getCustomerReceivePaymentsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD_NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="IS_VOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		
		<![CDATA[
				SELECT T.ID             AS TRANSACTION_ID,
				       T.T_TYPE         AS TRANSACTION_TYPE,
				       T.T_DATE         AS TRANSACTION_DATE,
				       T.NUMBER         AS TRANSACTION_NUMBER,
				       P.NAME           AS CUSTOMER_NAME,
				       T.PAYMENT_METHOD AS PAYMENT_METHOD_NAME,
				       T.TOTAL          AS AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END              AS IS_VOIDED,
				       T.STATUS         AS TRANSACTION_STATUS,
				       RP.CHECK_NUMBER  AS CHECK_NUMBER,
				       T.CURRENCY       AS CURRENCY
				FROM   TRANSACTION T
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = RP.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE = 12
				       AND CASE
				             WHEN 2 = :viewType THEN ( T.SAVE_STATUS != 204 )
				             WHEN 3 = :viewType THEN T.SAVE_STATUS = 204
				             ELSE TRUE
				           END
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				ORDER BY T.T_DATE DESC, T.NUMBER DESC 
				]]>

	</sql-query>

	<sql-query name="getCustomerPrepaymentsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD_NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="IS_VOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		
		<![CDATA[
				SELECT T.ID             AS TRANSACTION_ID,
				       T.T_TYPE         AS TRANSACTION_TYPE,
				       T.T_DATE         AS TRANSACTION_DATE,
				       T.NUMBER         AS TRANSACTION_NUMBER,
				       P.NAME           AS CUSTOMER_NAME,
				       T.PAYMENT_METHOD AS PAYMENT_METHOD_NAME,
				       T.TOTAL          AS AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END              AS IS_VOIDED,
				       T.STATUS         AS TRANSACTION_STATUS,
				       CP.CHECK_NUMBER  AS CHECK_NUMBER,
				       T.CURRENCY       AS CURRENCY
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CP.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE = 29
				       AND CASE
				             WHEN 2 = :viewType THEN ( T.SAVE_STATUS != 204 )
				             WHEN 3 = :viewType THEN T.SAVE_STATUS = 204
				             ELSE TRUE
				           END
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate  
				ORDER BY T.T_DATE DESC, T.NUMBER DESC
				]]>

	</sql-query>

	<sql-query name="getTDSPayBillTransactionsList">
		<query-param name="companyId" type="long" />

		<return-scalar column="VENDOR_ID" type="long" />
		<return-scalar column="TDS_TOTAL" type="double" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		
		<![CDATA[
				SELECT PB.VENDOR_ID AS VENDOR_ID,
				       PB.TDS_TOTAL AS TDS_TOTAL,
				       T.TOTAL      AS TOTAL,
				       T.T_DATE     AS TRANSACTION_DATE,
				       T.ID         AS TRANSACTION_ID
				FROM   PAY_BILL PB
				       LEFT JOIN TRANSACTION T
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN TDSTRANSACTIONITEM TTI
				         ON TTI.TRANSACTION_ID = T.ID
				WHERE  PB.TDS_TOTAL!=0
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND TTI IS NULL  
				]]>

	</sql-query>

	<sql-query name="getTDSReceivePaymentTransactionsList">
		<query-param name="companyId" type="long" />

		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="TDS_TOTAL" type="double" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		
		<![CDATA[
				SELECT RP.CUSTOMER_ID AS CUSTOMER_ID,
				       RP.TDS_TOTAL   AS TDS_TOTAL,
				       T.TOTAL        AS TOTAL,
				       T.T_DATE       AS TRANSACTION_DATE,
				       T.ID           AS TRANSACTION_ID
				FROM   RECEIVE_PAYMENT RP
				       LEFT JOIN TRANSACTION T
				         ON T.ID = RP.ID
				       LEFT OUTER JOIN TDSTRANSACTIONITEM TTI
				         ON TTI.TRANSACTION_ID = T.ID
				WHERE  RP.TDS_TOTAL!=0
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND TTI IS NULL  
				]]>

	</sql-query>

	<sql-query name="getCashPurchaseListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS         AS SAVE_STATUS,
				       T.MEMO                AS TRANSACTION_MEMO,
				       CP.PAYFROM_ACCOUNT_ID AS TRANSACTION_ACCOUNT,
				       T.ID                  AS TRANSACTION_ID,
				       T.T_TYPE              AS TRANSACTION_TYPE,
				       NULL                  AS DUE_DATE,
				       T.NUMBER              AS TRANSACTION_NUMBER,
				       P.NAME                AS VENDOR_NAME,
				       T.TOTAL               AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                   AS ISVOIDED,
				       T.STATUS              AS TRANSACTION_STATUS,
				       T.T_DATE              AS TRANSACTION_DATE,
				       0                     AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 2
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getDraftCashPurchaseListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS         AS SAVE_STATUS,
				       T.MEMO                AS TRANSACTION_MEMO,
				       CP.PAYFROM_ACCOUNT_ID AS TRANSACTION_ACCOUNT,
				       T.ID                  AS TRANSACTION_ID,
				       T.T_TYPE              AS TRANSACTION_TYPE,
				       NULL                  AS DUE_DATE,
				       T.NUMBER              AS TRANSACTION_NUMBER,
				       P.NAME                AS VENDOR_NAME,
				       T.TOTAL               AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                   AS ISVOIDED,
				       T.STATUS              AS TRANSACTION_STATUS,
				       T.T_DATE              AS TRANSACTION_DATE,
				       0                     AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 2
				       AND T.SAVE_STATUS = 201
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getBillsListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       NULL          AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       EB.DUE_DATE   AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = EB.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 6
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getOpenBillsListByItem">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="itemId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="ESTIMATE_TYPE" type="int" />

		<![CDATA[
				SELECT T.CURRENCY    AS CURRENCY_ID,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      TRANSACTION_NUMBER,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       TI.QTY_VALUE  AS QUANTITY,
				       TI.QTY_UNIT   AS UNIT,
				       TI.LINE_TOTAL AS AMOUNT,
				       0 AS ESTIMATE_TYPE
				FROM   TRANSACTION T				       
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				WHERE  T.T_TYPE = 6
				       AND T.SAVE_STATUS != 202
				       AND T.SAVE_STATUS != 201
				       AND T.SAVE_STATUS != 204
				       AND EB.BALANCE_DUE > 0.0
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :itemId
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="getOpenBillsListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       NULL          AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       EB.DUE_DATE   AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = EB.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 6
				       AND T.SAVE_STATUS != 202
				       AND T.SAVE_STATUS != 201
				       AND EB.BALANCE_DUE > 0.0
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getDraftBillsListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       NULL          AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       EB.DUE_DATE   AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = EB.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 6
				       AND T.SAVE_STATUS = 201
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getOverDueBillsListByItem">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="itemId" type="long" />
		<query-param name="currentDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="ESTIMATE_TYPE" type="int" />
		
		<![CDATA[
				SELECT T.CURRENCY    AS CURRENCY_ID,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      TRANSACTION_NUMBER,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       TI.QTY_VALUE  AS QUANTITY,
				       TI.QTY_UNIT   AS UNIT,
				       TI.LINE_TOTAL AS AMOUNT,
				       0 AS ESTIMATE_TYPE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				WHERE  T.T_TYPE = 6
				       AND T.SAVE_STATUS != 202
				       AND EB.BALANCE_DUE > 0.0
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND EB.DUE_DATE < :currentDate
				       AND IT.ID = :itemId
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="getOverDueBillsListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<query-param name="currentDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       NULL          AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       EB.DUE_DATE   AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = EB.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 6
				       AND T.SAVE_STATUS != 202
				       AND EB.BALANCE_DUE > 0.0
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND EB.DUE_DATE < :currentDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>


	<sql-query name="getAllPayBillsListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS          AS SAVE_STATUS,
				       PB.PAYFROM_ID          AS TRANSACTION_ACCOUNT,
				       T.MEMO                 AS TRANSACTION_MEMO,
				       T.ID                   AS TRANSACTION_ID,
				       T.T_TYPE               AS TRANSACTION_TYPE,
				       PB.BILL_DUE_ONORBEFORE AS DUE_DATE,
				       T.NUMBER               AS TRANSACTION_NUMBER,
				       P.NAME                 AS VENDOR_NAME,
				       T.TOTAL                AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                    AS ISVOIDED,
				       T.STATUS               AS TRANSACTION_STATUS,
				       T.T_DATE               AS TRANSACTION_DATE,
				       0                      AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = PB.VENDOR_ID
				         OR V.ID = VP.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE IN (11, 25)
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getAllChequesListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       WC.ACCOUNT_ID AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       NULL          AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = WC.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 15
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getDraftChequesListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       WC.ACCOUNT_ID AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       NULL          AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = WC.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 15
				       AND T.SAVE_STATUS = 201
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getPurchaseOrderListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       NULL          AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       NULL   AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN PURCHASE_ORDER PO
				         ON T.ID = PO.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = PO.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 22
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>
	</sql-query>

	<sql-query name="getOpenPurchaseOrderListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       NULL          AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       NULL   AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN PURCHASE_ORDER PO
				         ON T.ID = PO.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = PO.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 22
				     AND  T.SAVE_STATUS
						!= 202 AND T.STATUS =101 AND
						T.SAVE_STATUS
						!= 204 AND
						T.SAVE_STATUS
						!= 201
				        AND T.COMPANY_ID = :companyId
				        AND T.T_DATE BETWEEN :fromDate AND :toDate
				        AND V.ID = :vendorId  
				]]>
	</sql-query>

	<sql-query name="getDraftPurchaseOrderListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       NULL          AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       NULL   AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN PURCHASE_ORDER PO
				         ON T.ID = PO.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = PO.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 22
				       AND T.SAVE_STATUS = 201
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getAllTransactionsListByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT NULL          AS VENDOR_NAME,
				       T.SAVE_STATUS AS SAVE_STATUS,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       CASE WHEN P1.CURRENCY = CM.PRIMARY_CURRENCY THEN
				       T.TOTAL * T.CURRENCY_FACTOR 
				       ELSE T.TOTAL END AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       CASE
				         WHEN T.T_TYPE = 2 THEN CP.PAYFROM_ACCOUNT_ID
				         WHEN T.T_TYPE = 15 THEN WC.ACCOUNT_ID
				         WHEN T.T_TYPE = 27 THEN CCC.PAYFROM_ACCOUNT_ID
				         WHEN T.T_TYPE = 11 THEN PB.PAYFROM_ID
				         ELSE NULL
				       END           AS TRANSACTION_ACCOUNT,
				       CASE
				         WHEN T.T_TYPE = 2 THEN CP.DELIVERY_DATE
				         WHEN T.T_TYPE = 6 THEN EB.DUE_DATE
				         WHEN T.T_TYPE = 11 THEN PB.BILL_DUE_ONORBEFORE
				         ELSE NULL
				       END           AS DUE_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT JOIN PURCHASE_ORDER PO
				         ON T.ID = PO.ID
				       LEFT JOIN VENDOR V
				         ON V.ID = WC.VENDOR_ID
				             OR V.ID = CP.VENDOR_ID
				             OR V.ID = CCC.VENDOR_ID
				             OR V.ID = PB.VENDOR_ID
				             OR V.ID = VP.VENDOR_ID
				             OR V.ID = EB.VENDOR_ID
				             OR V.ID = VCM.VENDOR_ID
				             OR V.ID = PO.VENDOR_ID
				
				LEFT OUTER JOIN PAYEE P1 ON P1.ID =:vendorId
				LEFT OUTER JOIN COMPANY CM ON CM.ID =:companyId
				
				WHERE  T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getAllCreditMemosByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       NULL          AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       NULL          AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = VCM.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 14
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getDraftCreditMemosByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       NULL          AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       NULL          AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.STATUS      AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = VCM.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 14
				       AND T.SAVE_STATUS != 202
				       AND T.SAVE_STATUS = 201
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getAllExpensesByItem">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="itemId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="ESTIMATE_TYPE" type="int" />
		
		<![CDATA[
				SELECT T.CURRENCY    AS CURRENCY_ID,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      TRANSACTION_NUMBER,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       TI.QTY_VALUE  AS QUANTITY,
				       TI.QTY_UNIT   AS UNIT,
				       TI.LINE_TOTAL AS AMOUNT,
				       0 AS ESTIMATE_TYPE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				WHERE  T.T_TYPE IN ( 27, 26 )
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :itemId  
				]]>

	</sql-query>

	<sql-query name="getAllExpensesByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT NULL              AS VENDOR_NAME,
				       T.SAVE_STATUS     AS SAVE_STATUS,
				       T.MEMO            AS TRANSACTION_MEMO,
				       T.ID              AS TRANSACTION_ID,
				       T.T_TYPE          AS TRANSACTION_TYPE,
				       NULL              AS DUE_DATE,
				       T.NUMBER          AS TRANSACTION_NUMBER,
				       CASE WHEN P1.CURRENCY = CM.PRIMARY_CURRENCY
				       THEN T.TOTAL * T.CURRENCY_FACTOR 
				       ELSE T.TOTAL END AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END               AS ISVOIDED,
				       T.STATUS          AS TRANSACTION_STATUS,
				       T.T_DATE          AS TRANSACTION_DATE,
				       0                 AS EXPENSE_STATUS,
				       CASE
				         WHEN T.T_TYPE = 26 THEN CP.PAYFROM_ACCOUNT_ID
				         WHEN T.T_TYPE = 27 THEN CCC.PAYFROM_ACCOUNT_ID
				         ELSE NULL
				       END               AS TRANSACTION_ACCOUNT,
				       CASE
				         WHEN T.T_TYPE = 26 THEN CP.DELIVERY_DATE
				         ELSE NULL
				       END               AS DUE_DATE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CCC.VENDOR_ID
				             OR V.ID = CP.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				LEFT OUTER JOIN PAYEE P1 ON P1.ID =:vendorId
				LEFT OUTER JOIN COMPANY CM ON CM.ID =:companyId
				WHERE  T.T_TYPE IN ( 27, 26 )
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId
				ORDER  BY T.ID  
				]]>

	</sql-query>


	<sql-query name="getAllCreditExpensesByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT NULL                   AS VENDOR_NAME,
				       T.SAVE_STATUS          AS SAVE_STATUS,
				       T.MEMO                 AS TRANSACTION_MEMO,
				       T.ID                   AS TRANSACTION_ID,
				       T.T_TYPE               AS TRANSACTION_TYPE,
				       NULL                   AS DUE_DATE,
				       T.NUMBER               AS TRANSACTION_NUMBER,
				        CASE WHEN P1.CURRENCY = CM.PRIMARY_CURRENCY
				        THEN T.TOTAL * T.CURRENCY_FACTOR 
				       ELSE T.TOTAL END AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                    AS ISVOIDED,
				       T.STATUS               AS TRANSACTION_STATUS,
				       T.T_DATE               AS TRANSACTION_DATE,
				       0                      AS EXPENSE_STATUS,
				       CCC.PAYFROM_ACCOUNT_ID AS TRANSACTION_ACCOUNT,
				       NULL                   AS DUE_DATE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CCC.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				LEFT OUTER JOIN PAYEE P1 ON P1.ID =:vendorId
				LEFT OUTER JOIN COMPANY CM ON CM.ID =:companyId
				WHERE  T.T_TYPE = 27
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getDraftCreditExpensesByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT NULL                   AS VENDOR_NAME,
				       T.SAVE_STATUS          AS SAVE_STATUS,
				       T.MEMO                 AS TRANSACTION_MEMO,
				       T.ID                   AS TRANSACTION_ID,
				       T.T_TYPE               AS TRANSACTION_TYPE,
				       CCC.DELIVERY_DATE      AS DUE_DATE,
				       T.NUMBER               AS TRANSACTION_NUMBER,
				       CASE WHEN P1.CURRENCY = CM.PRIMARY_CURRENCY
				       THEN T.TOTAL * T.CURRENCY_FACTOR 
				       ELSE T.TOTAL END AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                    AS ISVOIDED,
				       T.STATUS               AS TRANSACTION_STATUS,
				       T.T_DATE               AS TRANSACTION_DATE,
				       0                      AS EXPENSE_STATUS,
				       CCC.PAYFROM_ACCOUNT_ID AS TRANSACTION_ACCOUNT,
				       NULL                   AS DUE_DATE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CCC.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				LEFT OUTER JOIN PAYEE P1 ON P1.ID =:vendorId
				LEFT OUTER JOIN COMPANY CM ON CM.ID =:companyId
				WHERE  T.T_TYPE = 27
				       AND T.SAVE_STATUS = 201
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getAllCashExpensesByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT NULL                  AS VENDOR_NAME,
				       T.SAVE_STATUS         AS SAVE_STATUS,
				       T.MEMO                AS TRANSACTION_MEMO,
				       T.ID                  AS TRANSACTION_ID,
				       T.T_TYPE              AS TRANSACTION_TYPE,
				       NULL                  AS DUE_DATE,
				       T.NUMBER              AS TRANSACTION_NUMBER,
				       CASE WHEN P1.CURRENCY = CM.PRIMARY_CURRENCY
				       THEN T.TOTAL * T.CURRENCY_FACTOR 
				       ELSE T.TOTAL END AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                   AS ISVOIDED,
				       T.STATUS              AS TRANSACTION_STATUS,
				       T.T_DATE              AS TRANSACTION_DATE,
				       0                     AS EXPENSE_STATUS,
				       CP.PAYFROM_ACCOUNT_ID AS TRANSACTION_ACCOUNT,
				       NULL                  AS DUE_DATE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
			    LEFT OUTER JOIN PAYEE P1 ON P1.ID =:vendorId
				LEFT OUTER JOIN COMPANY CM ON CM.ID =:companyId
				WHERE  T.T_TYPE = 26
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="getDraftCashExpensesByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="vendorId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT NULL                  AS VENDOR_NAME,
				       T.SAVE_STATUS         AS SAVE_STATUS,
				       T.MEMO                AS TRANSACTION_MEMO,
				       T.ID                  AS TRANSACTION_ID,
				       T.T_TYPE              AS TRANSACTION_TYPE,
				       NULL                  AS DUE_DATE,
				       T.NUMBER              AS TRANSACTION_NUMBER,
				       CASE WHEN P1.CURRENCY = CM.PRIMARY_CURRENCY
				       THEN T.TOTAL * T.CURRENCY_FACTOR 
				       ELSE T.TOTAL END AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                   AS ISVOIDED,
				       T.STATUS              AS TRANSACTION_STATUS,
				       T.T_DATE              AS TRANSACTION_DATE,
				       0                     AS EXPENSE_STATUS,
				       CP.PAYFROM_ACCOUNT_ID AS TRANSACTION_ACCOUNT,
				       NULL                  AS DUE_DATE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				LEFT OUTER JOIN PAYEE P1 ON P1.ID =:vendorId
				LEFT OUTER JOIN COMPANY CM ON CM.ID =:companyId
				WHERE  T.T_TYPE = 26
				       AND T.SAVE_STATUS = 201
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :vendorId  
				]]>

	</sql-query>

	<sql-query name="update.TaxReturnEntry.make.Transaction.null">
		<query-param name="transactionId" type="long" />
		
		<![CDATA[
				UPDATE TAX_RETURN_ENTRY
				SET    TRANSACTION_ID = NULL
				WHERE  TRANSACTION_ID = :transactionId  
				]]>

	</sql-query>

	<sql-query name="getIncomeExpensePortletInfo">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="INCOME_AMOUNT" type="double" />
		<return-scalar column="EXPENSE_AMOUNT" type="double" />
		
		<![CDATA[
				SELECT SUM(CASE
				             WHEN A.A_TYPE = 14 THEN AT.AMOUNT
				           END)AS INCOME_AMOUNT,
				       SUM(CASE
				             WHEN  ( A.A_TYPE = 15
				        	  OR A.A_TYPE = 16
				         	  OR A.A_TYPE = 18 ) THEN AT.AMOUNT
				           END)AS EXPENSE_AMOUNT
				FROM   ACCOUNT_TRANSACTION AT
				       LEFT JOIN ACCOUNT A
				         ON A.ID = AT.ACCOUNT_ID
				       LEFT JOIN TRANSACTION T
				         ON T.ID = AT.TRANSACTION_ID
				WHERE  ( T.T_DATE BETWEEN :startDate AND :endDate )
				       AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getCustomersBySales">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="limit" type="int" />

		<return-scalar column="CUSTOMER" type="encryptedstring" />
		<return-scalar column="TRANSACTIONS" type="int" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		
		<![CDATA[
				SELECT C.NAME         AS CUSTOMER,
				       COUNT(T.TOTAL) AS TRANSACTIONS,
				       SUM(T.TOTAL)   AS TOTAL,
				       C.CURRENCY     AS CURRENCY
				FROM   TRANSACTION T
				       LEFT JOIN INVOICE I
				         ON I.ID = T.ID
				       LEFT JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT JOIN PAYEE C
				         ON ( C.ID = I.CUSTOMER_ID
				               OR C.ID = CS.CUSTOMER_ID )
				WHERE  C.ID IS NOT NULL
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.COMPANY_ID = :companyId
				GROUP  BY C.ID,
				          C.NAME,
				          C.CURRENCY
				ORDER  BY TOTAL DESC
				LIMIT  :limit  
				]]>

	</sql-query>

	<sql-query name="getVendorsBySales">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="limit" type="int" />

		<return-scalar column="VENDOR" type="encryptedstring" />
		<return-scalar column="TRANSACTIONS" type="int" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		
		<![CDATA[
				SELECT C.NAME         AS VENDOR,
				       COUNT(T.TOTAL) AS TRANSACTIONS,
				       SUM(T.TOTAL)   AS TOTAL,
				       C.CURRENCY     AS CURRENCY
				FROM   TRANSACTION T
				       LEFT JOIN ENTER_BILL EB
				         ON EB.ID = T.ID
				       LEFT JOIN CASH_PURCHASE CP
				         ON CP.ID = T.ID
				       LEFT JOIN CREDIT_CARD_CHARGES CC
				         ON CC.ID = T.ID
				       LEFT JOIN PAYEE C
				         ON ( C.ID = EB.VENDOR_ID
				               OR C.ID = CP.VENDOR_ID
				               OR C.ID = CC.VENDOR_ID )
				WHERE  C.ID IS NOT NULL
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.COMPANY_ID = :companyId
				GROUP  BY C.ID,
				          C.NAME,
				          C.CURRENCY
				ORDER  BY TOTAL DESC
				LIMIT  :limit  
				]]>

	</sql-query>

	<sql-query name="getIncomeAccounts">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		
		<![CDATA[
				SELECT A.NAME         AS NAME,
				       SUM(AT.AMOUNT) AS AMOUNT
				FROM   ACCOUNT_TRANSACTION AT
				       LEFT JOIN ACCOUNT A
				         ON AT.ACCOUNT_ID = A.ID
				       LEFT JOIN TRANSACTION T
				         ON T.ID = AT.TRANSACTION_ID
				WHERE  ( A.A_TYPE = 14
				          OR A.A_TYPE = 17 )
				       AND AT.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				GROUP  BY A.NAME
				ORDER  BY AMOUNT DESC  
				]]>

	</sql-query>

	<sql-query name="getItemsBySalesQuantity">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="limit" type="int" />

		<return-scalar column="ITEM" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		
		<![CDATA[
				SELECT I.NAME   AS ITEM,
				       SUM(CASE
				             WHEN T.T_TYPE IN ( 1, 4, 5, 7,
				                                8, 12, 21, 29 ) THEN TI.QTY_VALUE
				             ELSE 0
				           END) AS QUANTITY
				FROM   ITEM I
				       LEFT JOIN TRANSACTION_ITEM TI
				         ON TI.ITEM_ID = I.ID
				       LEFT JOIN TRANSACTION T
				         ON T.ID = TI.TRANSACTION_ID
				WHERE  I.IS_SELL_ITEM = TRUE
				       AND I.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				GROUP  BY I.ID,
				          I.NAME
				ORDER  BY QUANTITY DESC
				LIMIT  :limit  
				]]>

	</sql-query>

	<sql-query name="getItemsByPurchaseQuantity">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="limit" type="int" />

		<return-scalar column="ITEM" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		
		<![CDATA[
				SELECT I.NAME,
				       SUM(CASE
				             WHEN T.T_TYPE IN ( 2, 3, 6, 9,
				                                11, 14, 22, 23,
				                                26, 27, 28 ) THEN TI.QTY_VALUE
				             ELSE 0
				           END)
				FROM   ITEM I
				       LEFT JOIN TRANSACTION_ITEM TI
				         ON TI.ITEM_ID = I.ID
				       LEFT JOIN TRANSACTION T
				         ON T.ID = TI.TRANSACTION_ID
				WHERE  I.IS_BUY_ITEM = TRUE
				       AND I.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				GROUP  BY I.ID,
				          I.NAME
				ORDER  BY QUANTITY DESC
				LIMIT  :limit  
				]]>

	</sql-query>

	<sql-query name="getAccountBalances">
		<query-param name="companyId" type="long" />
		<query-param name="accountId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ACCOUNT" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		
		<![CDATA[
				SELECT A.NAME   AS ACCOUNT,
				       SUM(CASE
				             WHEN AT.ID IS NOT NULL THEN AT.AMOUNT
				             ELSE 0
				           END) AS AMOUNT
				FROM   ACCOUNT A
				       LEFT JOIN ACCOUNT_TRANSACTION AT
				         ON AT.ACCOUNT_ID = A.ID
				       LEFT JOIN TRANSACTION T
				         ON T.ID = AT.TRANSACTION_ID
				WHERE  A.COMPANY_ID = :companyId
				       AND ( CASE
				               WHEN T.ID IS NOT NULL THEN T.T_DATE BETWEEN
				                                          :startDate AND :endDate
				               ELSE TRUE
				             END )
				       AND A.ID = :accountId
				GROUP  BY A.ID,
				          A.NAME  
				]]>

	</sql-query>

	<sql-query name="getAllQuotesByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />
		<query-param name="estimateType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />
		
		<![CDATA[
				SELECT T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      TRANSACTION_NUMBER,
				       P.NAME        AS CUSTOMER_NAME,
				       T.NET_AMOUNT  AS TRANSACTION_NET_AMOUNT,
				       NULL          AS DUE_DATE,
				       T.TOTAL       AS TOTAL_PRICE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.SAVE_STATUS AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ESTIMATE E
				         ON T.ID = E.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = E.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				        Left JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				        Left JOIN ITEM IT ON IT.ID=TI.ITEM_ID
				WHERE  T.T_TYPE = 7
				       AND T.SAVE_STATUS != 202
				       AND E.ESTIMATETYPE = :estimateType
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :consultantId  
				]]>

	</sql-query>

	<sql-query name="getAllSalesOrdersByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="estimateType" type="int" />
		<query-param name="status" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />

		<![CDATA[
				SELECT T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      TRANSACTION_NUMBER,
				       P.NAME        AS CUSTOMER_NAME,
				       T.NET_AMOUNT  AS TRANSACTION_NET_AMOUNT,
				       NULL          AS DUE_DATE,
				       T.TOTAL       AS TOTAL_PRICE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.SAVE_STATUS AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ESTIMATE E
				         ON T.ID = E.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = E.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.T_TYPE = 7
				       AND T.SAVE_STATUS != 202
				      	and
						(:status=1 or
						:status=T.SAVE_STATUS or
						(:status=T.STATUS and T.SAVE_STATUS !=201 and
						T.SAVE_STATUS != 204))
				       AND E.ESTIMATETYPE = :estimateType
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND C.ID = :customerId  
				]]>

	</sql-query>

	<sql-query name="getDraftQuotesByConsultant">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="consultantId" type="long" />
		<query-param name="estimateType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TOTAL_PRICE" type="double" />

		<![CDATA[
				SELECT T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      TRANSACTION_NUMBER,
				       P.NAME        AS CUSTOMER_NAME,
				       T.NET_AMOUNT  AS TRANSACTION_NET_AMOUNT,
				       NULL          AS DUE_DATE,
				       T.TOTAL       AS TOTAL_PRICE,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.SAVE_STATUS AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ESTIMATE E
				         ON T.ID = E.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = E.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				       LEFT JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID=T.id
				       LEFT JOIN ITEM IT ON IT.ID=TI.ITEM_ID
				WHERE  T.T_TYPE = 7
				       AND T.SAVE_STATUS != 202
				       AND E.ESTIMATETYPE = :estimateType
				       AND T.SAVE_STATUS = 201
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :consultantId  
				]]>

	</sql-query>

	<sql-query name="getAllChequesListByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		
		<![CDATA[
				SELECT WC.ACCOUNT_ID AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       NULL          AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.SAVE_STATUS AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN CUSTOMER V
				         ON V.ID = WC.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 15
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :customerId  
				]]>

	</sql-query>

	<sql-query name="getDraftChequesListByCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="customerId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="TRANSACTION_NET_AMOUNT" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="TRANSACTION_ACCOUNT" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="EXPENSE_STATUS" type="int" />
		
		<![CDATA[
				SELECT WC.ACCOUNT_ID AS TRANSACTION_ACCOUNT,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       NULL          AS DUE_DATE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       P.NAME        AS VENDOR_NAME,
				       T.TOTAL       AS TRANSACTION_NET_AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.SAVE_STATUS AS TRANSACTION_STATUS,
				       T.T_DATE      AS TRANSACTION_DATE,
				       0             AS EXPENSE_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN CUSTOMER V
				         ON V.ID = WC.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.T_TYPE = 15
				       AND T.SAVE_STATUS = 201
				       AND T.SAVE_STATUS != 202
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND V.ID = :customerId  
				]]>

	</sql-query>

	<sql-query name="getClientByCompany">
		<query-param name="clientEmail" type="string" />
		<query-param name="companyName" type="string" />
		
		<![CDATA[
				SELECT C.ID
				FROM   CLIENT C
				       LEFT JOIN USERS U
				         ON U.CLIENT_ID = C.ID
				       LEFT JOIN COMPANY COM
				         ON COM.ID = U.COMPANY_ID
				WHERE  C.EMAIL_ID = :clientEmail
				       AND Lower(COM.TRADING_NAME) = :companyName
				LIMIT  1;  
				]]>

	</sql-query>

	<sql-query name="getPurchaseLineItems">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DESCRIPTION" type="encryptedstring" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TAX_CODE" type="encryptedstring" />
		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="CURRENCY" type="encryptedstring" />
		<return-scalar column="CURRENCY_FACTOR" type="double" />
		<return-scalar column="LINE_NUMBER" type="long" />
		
		<![CDATA[
				SELECT V.NAME              AS NAME,
				       T.T_DATE            AS TRANSACTION_DATE,
				       T.NUMBER            AS TRANSACTION_NUMBER,
				       I.SALES_DESCRIPTION AS DESCRIPTION,
				       CASE
				         WHEN ( T.AMOUNTS_INCLUDE_VAT ) THEN TI.LINE_TOTAL - TI.VAT_FRACTION
				         ELSE TI.LINE_TOTAL
				       END                 AS TOTAL,
				       TC.NAME             AS TAX_CODE,
				       TI.VAT_FRACTION     AS TAX_AMOUNT,
				       CUR.FORMAL_NAME     AS CURRENCY,
				       T.CURRENCY_FACTOR   AS CURRENCY_FACTOR,
				       TI.IDX              AS LINE_NUMBER
				FROM   TRANSACTION_ITEM TI
				       LEFT JOIN ITEM I
				         ON I.ID = TI.ITEM_ID
				       LEFT JOIN TRANSACTION T
				         ON T.ID = TI.TRANSACTION_ID
				       LEFT JOIN ENTER_BILL EB
				         ON EB.ID = T.ID
				       LEFT JOIN CASH_PURCHASE CP
				         ON CP.ID = T.ID
				       LEFT JOIN CREDIT_CARD_CHARGES CCC
				         ON CCC.ID = T.ID
				       LEFT JOIN PAYEE V
				         ON ( V.ID = EB.VENDOR_ID
				               OR V.ID = CP.VENDOR_ID
				               OR V.ID = CCC.VENDOR_ID )
				       LEFT JOIN TAX_CODE TC
				         ON TC.ID = TI.TAX_CODE
				       LEFT JOIN CURRENCY CUR
				         ON CUR.ID = T.CURRENCY
				WHERE  I.IS_BUY_ITEM
				       AND I.ID IS NOT NULL
				       AND ( T.T_DATE BETWEEN :startDate AND :endDate )
				       AND I.COMPANY_ID = :companyId
				ORDER  BY T.T_DATE  
				]]>

	</sql-query>

	<sql-query name="getSupplyLineItems">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DESCRIPTION" type="encryptedstring" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TAX_CODE" type="encryptedstring" />
		<return-scalar column="TAX_AMOUNT" type="double" />
		<return-scalar column="CURRENCY" type="string" />
		<return-scalar column="CURRENCY_FACTOR" type="double" />
		<return-scalar column="COUNTRY" type="encryptedstring" />
		<return-scalar column="LINE_NUMBER" type="long" />
		
		<![CDATA[
				SELECT C.NAME              AS NAME,
				       T.T_DATE            AS TRANSACTION_DATE,
				       T.NUMBER            AS TRANSACTION_NUMBER,
				       I.SALES_DESCRIPTION AS DESCRIPTION,
				       CASE
				         WHEN ( T.AMOUNTS_INCLUDE_VAT ) THEN TI.LINE_TOTAL - TI.VAT_FRACTION
				         ELSE TI.LINE_TOTAL
				       END                 AS TOTAL,
				       TC.NAME             AS TAX_CODE,
				       TI.VAT_FRACTION     AS TAX_AMOUNT,
				       T.CURRENCY          AS CURRENCY,
				       T.CURRENCY_FACTOR   AS CURRENCY_FACTOR,
				       PA.COUNTRY          AS COUNTRY,
				       TI.IDX              AS LINE_NUMBER
				FROM   TRANSACTION_ITEM TI
				       LEFT JOIN ITEM I
				         ON I.ID = TI.ITEM_ID
				       LEFT JOIN TRANSACTION T
				         ON T.ID = TI.TRANSACTION_ID
				       LEFT JOIN INVOICE INV
				         ON INV.ID = T.ID
				       LEFT JOIN ESTIMATE E
				         ON E.ID = T.ID
				       LEFT JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT JOIN PAYEE C
				         ON ( C.ID = INV.CUSTOMER_ID
				               OR C.ID = E.CUSTOMER_ID
				               OR C.ID = CS.CUSTOMER_ID )
				       LEFT JOIN PAYEE_ADDRESS PA
				         ON PA.PAYEE_ID = C.ID
				       LEFT JOIN TAX_CODE TC
				         ON TC.ID = TI.TAX_CODE
				WHERE  I.IS_SELL_ITEM = TRUE
				       AND C.ID IS NOT NULL
				       AND ( T.T_DATE BETWEEN :startDate AND :endDate )
				       AND I.COMPANY_ID = :companyId
				ORDER  BY T.T_DATE  
				]]>

	</sql-query>

	<sql-query name="getGLLineItems">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="ACCOUNT_ID" type="encryptedstring" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DESC" type="encryptedstring" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="CREDIT" type="double" />
		<return-scalar column="DEBIT" type="double" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		
		<![CDATA[
				SELECT T.T_DATE        AS TRANSACTION_DATE,
				       A.A_NUMBER      AS ACCOUNT_ID,
				       A.NAME          AS ACCOUNT_NAME,
				       T.MEMO          AS TRANSACTION_DESC,
				       P.NAME          AS NAME,
				       T.ID            AS TRANSACTION_ID,
				       CASE
				         WHEN AT.AMOUNT > 0 THEN AT.AMOUNT
				         ELSE 0
				       END             AS CREDIT,
				       CASE
				         WHEN AT.AMOUNT < 0 THEN AT.AMOUNT
				         ELSE 0
				       END             AS DEBIT,
				       A.TOTAL_BALANCE AS BALANCE,
				       T.NUMBER        AS TRANSACTION_NUMBER,
				       T.T_TYPE        AS TRANSACTION_TYPE
				FROM   ACCOUNT_TRANSACTION AT
				       LEFT JOIN ACCOUNT A
				         ON A.ID = AT.ACCOUNT_ID
				       LEFT JOIN TRANSACTION T
				         ON T.ID = AT.TRANSACTION_ID
				       LEFT JOIN CASH_PURCHASE CP
				         ON CP.ID = T.ID
				       LEFT JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON CCM.ID = T.ID
				       LEFT JOIN CUSTOMER_PREPAYMENT CPP
				         ON CPP.ID = T.ID
				       LEFT JOIN CUSTOMER_REFUND CR
				         ON CR.ID = T.ID
				       LEFT JOIN INVOICE I
				         ON I.ID = T.ID
				       LEFT JOIN ENTER_BILL EB
				         ON EB.ID = T.ID
				       LEFT JOIN CREDIT_CARD_CHARGES CCC
				         ON CCC.ID = T.ID
				       LEFT JOIN PAY_BILL PB
				         ON PB.ID = T.ID
				       LEFT JOIN VENDOR_PAYMENT VP
				         ON VP.ID = T.ID
				       LEFT JOIN RECEIVE_PAYMENT RP
				         ON RP.ID = T.ID
				       LEFT JOIN TAX_ADJUSTMENT TA
				         ON TA.ID = T.ID
				       LEFT JOIN TAX_RETURN TR
				         ON TR.ID = T.ID
				       LEFT JOIN VENDOR_CREDIT_MEMO VCM
				         ON VCM.ID = T.ID
				       LEFT JOIN WRITE_CHECKS WC
				         ON WC.ID = T.ID
				       LEFT JOIN PAY_TAX PT
				         ON PT.ID = T.ID
				       LEFT JOIN RECEIVE_VAT RV
				         ON RV.ID = T.ID
				       LEFT JOIN PAYEE P
				         ON ( P.ID = CP.VENDOR_ID
				               OR P.ID = CS.CUSTOMER_ID
				               OR P.ID = CCM.CUSTOMER_ID
				               OR P.ID = CPP.CUSTOMER_ID
				               OR P.ID = CR.CUSTOMER_ID
				               OR P.ID = I.CUSTOMER_ID
				               OR P.ID = EB.VENDOR_ID
				               OR P.ID = CCC.VENDOR_ID
				               OR P.ID = PB.VENDOR_ID
				               OR P.ID = VP.VENDOR_ID
				               OR P.ID = RP.CUSTOMER_ID
				               OR P.ID = TA.TAX_AGENCY_ID
				               OR P.ID = TR.TAX_AGENCY
				               OR P.ID = VCM.VENDOR_ID
				               OR P.ID = WC.CUSTOMER_ID
				               OR P.ID = WC.VENDOR_ID
				               OR P.ID = WC.TAX_AGENCY_ID )
				WHERE  T.T_DATE BETWEEN :startDate AND :endDate
				       AND AT.COMPANY_ID = :companyId
				ORDER  BY A.ID,
				          T.T_DATE;  
				]]>

	</sql-query>

	<sql-query name="getTAXReturnObj">
		<query-param name="taxreturnID" type="long" />

		<return-scalar column="id" type="long" />
		
		<![CDATA[
				SELECT *
				FROM   TAX_RETURN
				WHERE  ID = :taxreturnID  
				]]>

	</sql-query>

	<sql-query name="getTAXReturnObjByTaxAgency">
		<query-param name="taxAgencyID" type="long" />

		<return-scalar column="id" type="long" />
		
		<![CDATA[
				SELECT *
				FROM   TAX_RETURN
				WHERE  TAX_AGENCY = :taxAgencyID  
				]]>

	</sql-query>

	<sql-query name="delete.Estimate.from.drafts">
		<query-param name="estimateId" type="long" />
		
		<![CDATA[
				DELETE FROM INVOICE_ESTIMATES
				WHERE  ESTIMATE_ID = :estimateId  
				]]>

	</sql-query>

	<sql-query name="getPayeeWriteChecks">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<query-param name="payeeType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="PAYMENT_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		<return-scalar column="ISSUE_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="AMOUNT_PAID" type="double" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS    AS SAVE_STATUS,
				       T.ID             AS TRANSACTION_ID,
				       T.T_TYPE         AS TRANSACTION_TYPE,
				       T.T_DATE         AS PAYMENT_DATE,
				       T.NUMBER         AS TRANSACTION_NUMBER,
				       T.STATUS         AS TRANSACTION_STATUS,
				       T.T_DATE         AS ISSUE_DATE,
				       WC.IN_FAVOUR_OF  AS NAME,
				       T.PAYMENT_METHOD AS PAYMENT_METHOD,
				       T.TOTAL          AS AMOUNT_PAID,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END              AS ISVOIDED,
				       WC.CHECK_NUMBER  AS CHECK_NUMBER,
				       T.CURRENCY       AS CURRENCY
				FROM   WRITE_CHECKS WC
				       LEFT JOIN TRANSACTION T
				         ON T.ID = WC.ID
				       LEFT JOIN PAYEE P
				         ON ( P.ID = ( CASE
				                         WHEN :payeeType = 1 THEN WC.CUSTOMER_ID
				                         WHEN :payeeType = 2 THEN WC.VENDOR_ID
				                         ELSE WC.TAX_AGENCY_ID
				                       END ) )
				WHERE  T.COMPANY_ID = :companyId
				       AND CASE
				             WHEN 0 = :viewType THEN ( ( T.STATUS = 0
				                                          OR T.STATUS = 1 )
				                                       AND T.SAVE_STATUS != 204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 2 = :viewType THEN ( T.STATUS = 2
				                                       AND T.SAVE_STATUS != 204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 3 = :viewType THEN ( T.SAVE_STATUS = 204 )
				             WHEN 4 = :viewType THEN ( T.SAVE_STATUS = 201 )
				             ELSE TRUE
				           END
				       AND T.SAVE_STATUS != 202
				       AND ( :payeeType = WC.PAY_TO_TYPE
				              OR ( :payeeType = 0
				                   AND WC.PAY_TO_TYPE = 4 ) )
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				 ORDER BY T.T_DATE DESC, T.NUMBER DESC      
				]]>

	</sql-query>


	<sql-query name="getDepositsList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="IN_ACCOUNT" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.SAVE_STATUS AS SAVE_STATUS,
				       T.ID          AS TRANSACTION_ID,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       A.NAME        AS IN_ACCOUNT,
				       T.TOTAL       AS AMOUNT,
				       T.CURRENCY    AS CURRENCY
				FROM   MAKE_DEPOSIT MD
				       LEFT JOIN TRANSACTION T
				         ON T.ID = MD.ID
				       LEFT JOIN ACCOUNT A
				         ON A.ID = MD.DEPOSIT_TO
				WHERE  T.COMPANY_ID = :companyId
				       AND CASE
				             WHEN 0 = :viewType THEN ( ( T.STATUS = 0
				                                          OR T.STATUS = 1 )
				                                       AND T.SAVE_STATUS != 204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 2 = :viewType THEN ( T.STATUS = 2
				                                       AND T.SAVE_STATUS != 204
				                                       AND T.SAVE_STATUS!=201 )
				             WHEN 3 = :viewType THEN ( T.SAVE_STATUS = 204 )
				             WHEN 4 = :viewType THEN ( T.SAVE_STATUS = 201 )
				             ELSE TRUE
				           END
				       AND T.SAVE_STATUS != 202
				       AND T.T_DATE BETWEEN :fromDate AND :toDate 
				ORDER BY T.T_DATE DESC, T.NUMBER DESC
				]]>

	</sql-query>

	<sql-query name="getTransfersList">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />
		<query-param name="payeeType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="IN_ACCOUNT" type="encryptedstring" />
		<return-scalar column="FROM_ACCOUNT" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="SAVE_STATUS" type="int" />
		
		<![CDATA[
			SELECT t.save_status       AS save_status,
			       t.id                AS transaction_id,
			       t.t_date            AS transaction_date,
			       t.t_type            AS transaction_type,
			       t.NUMBER            AS transaction_number,
			       a1.name             AS in_account,
			       a2.name             AS from_account,
			       t.total             AS amount,
			       a2.account_currency AS currency
			FROM   transfer_fund tf
			       LEFT JOIN TRANSACTION t
			         ON t.id = tf.id
			       LEFT JOIN ACCOUNT a1
			         ON a1.id = tf.deposit_in_id
			       LEFT JOIN ACCOUNT a2
			         ON a2.id = tf.deposit_from_id
			WHERE  t.company_id = :companyId
			       AND CASE
			             WHEN 0 = :viewType THEN ( ( t.status = 0
			                                          OR t.status = 1 )
			                                       AND t.save_status != 204
			                                       AND t.save_status != 201 )
			             WHEN 2 = :viewType THEN ( t.status = 2
			                                       AND t.save_status != 204
			                                       AND t.save_status != 201 )
			             WHEN 3 = :viewType THEN ( t.save_status = 204 )
			             WHEN 4 = :viewType THEN ( t.save_status = 201 )
			             ELSE true
			           END
			       AND t.save_status != 202
			       AND t.t_date BETWEEN :fromDate AND :toDate  
		ORDER BY T.T_DATE DESC, T.NUMBER DESC
		]]>

	</sql-query>

	<sql-query name="createInventoryPurchaseHistory">
	
		<![CDATA[
				CREATE OR REPLACE VIEW INVENTORY_PURCHASE_HISTORY_VIEW AS
				SELECT T.COMPANY_ID                      AS COMPANY_ID,
				       T.ID                              AS TRANSACTION_ID,
				       TI.ID                             AS TRANSACTION_ITEM_ID,
				       TI.UNIT_PRICE * T.CURRENCY_FACTOR AS UNIT_PRICE,
				       TI.QTY_VALUE                      AS QUANTITY,
				       TI.QTY_UNIT                       AS QTY_UNIT,
				       IT.ID                             AS ITEM_ID,
				       T.T_DATE                          AS TRANSACTION_DATE,
				       (SELECT factor
				        FROM   unit u
				        WHERE  u.id = TI.QTY_UNIT)       AS UNIT_FACTOR,
				       (SELECT u1.factor
				        FROM   unit u1
				               left join unit u2
				                 ON u1.measurement_id = u2.measurement_id
				        WHERE  u2.id = TI.QTY_UNIT
				               AND u1.is_default = TRUE) AS DEFAULT_UNIT_FACTOR
				FROM   TRANSACTION_ITEM TI
				       left outer join TRANSACTION T
				         ON T.ID = TI.TRANSACTION_ID
				       left outer join ITEM IT
				         ON TI.TYPE = 1
				            AND IT.TYPE IN ( 2, 4 )
				            AND IT.ID = TI.ITEM_ID
				WHERE  T.SAVE_STATUS NOT IN ( 201, 202, 204 )
				       AND ( T.T_TYPE IN ( 2, 6, 4, 26, 27 )
				              OR CASE
				                   WHEN T.T_TYPE = 36 THEN TI.QTY_VALUE >= 0
				                   ELSE FALSE
				                 END )
				       AND IT.TYPE IN ( 2, 4 )  
		]]>

	</sql-query>

	<sql-query name="getPurchasesOfItem.for.LIFO">
		<query-param name="inventoryId" type="long" />

		<return-scalar column="QUANTITY_VALUE" type="double" />
		<return-scalar column="QUANTITY_UNIT" type="long" />
		<return-scalar column="COST" type="double" />
		
		<![CDATA[
			SELECT qty_value  AS QUANTITY_VALUE,
			       qty_unit   AS QUANTITY_UNIT,
			       unit_price AS COST
			FROM   item_update iu
			       left join TRANSACTION t
			              ON t.id = iu.TRANSACTION
			       left join item i
			              ON i.id = iu.item
			WHERE  I.TYPE IN ( 2, 4 )
			       AND i.id = :inventoryId
			       AND T.t_type IN ( 2, 6, 4, 26, 27, 36, 37 )
			       AND T.save_status NOT IN ( 201, 202, 204 )
			       AND qty_value > 0
			ORDER  BY t.t_date DESC, t.number DESC;  
				]]>

	</sql-query>

	<sql-query name="getPurchasesOfItem">
		<query-param name="inventoryId" type="long" />

		<return-scalar column="QUANTITY_VALUE" type="double" />
		<return-scalar column="QUANTITY_UNIT" type="long" />
		<return-scalar column="COST" type="double" />
		
		<![CDATA[
			SELECT qty_value  AS QUANTITY_VALUE,
			       qty_unit   AS QUANTITY_UNIT,
			       unit_price AS COST
			FROM   item_update iu
			       left join TRANSACTION t
			              ON t.id = iu.TRANSACTION
			       left join item i
			              ON i.id = iu.item
			WHERE  I.TYPE IN ( 2, 4 )
			       AND i.id = :inventoryId
			       AND T.t_type IN ( 2, 6, 4, 26, 27, 36, 37 )
			       AND T.save_status NOT IN ( 201, 202, 204 )
			       AND qty_value > 0
			ORDER  BY t.t_date ASC, t.number ASC; 
				]]>

	</sql-query>

	<sql-query name="getAverageCost.of.Item">
		<query-param name="inventoryId" type="long" />
		<query-param name="unitFactor" type="double" />
		<query-param name="defaultUnitFactor" type="double" />

		<return-scalar column="COST" type="double" />
		
		<![CDATA[
				SELECT ( Sum(unit_price * ( ( qty_value * :unitFactor ) / :defaultUnitFactor )) / 
				         Sum((qty_value * :unitFactor ) / :defaultUnitFactor) ) AS cost 
				FROM   item_update 		
				WHERE  item = :inventoryId and qty_value > 0  
				]]>

	</sql-query>

	<sql-query name="update.averagePurchaseCost.of.Item">
		<query-param name="itemId" type="long" />
		
		<![CDATA[
			UPDATE item
			SET    average_cost = Coalesce((SELECT ( SUM(unit_price * qty_value) / SUM(
			                                         qty_value) )
			                                              AS avg_cost
			                                FROM   transaction_item ti
			                                       left join TRANSACTION t
			                                              ON ti.transaction_id = t.id
			                                WHERE  ti.TYPE = 1
			                                       AND t.t_type IN ( 2, 6, 14 )
			                                       AND t.save_status NOT IN
			                                           ( 201, 202, 204 )
			                                       AND ti.item_id = :itemId
			                                GROUP  BY item_id), 0)
			WHERE  id = :itemId  
		]]>

	</sql-query>


	<sql-query name="getAssetValueOfAllInventory">
		<query-param name="companyId" type="long" />

		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ASSET_VALUE" type="double" />
		
		<![CDATA[
				SELECT IT.ID          AS ITEM_ID,
				       SUM(AT.AMOUNT) AS ASSET_VALUE
				FROM   ACCOUNT_TRANSACTION AT
				       LEFT JOIN TRANSACTION T
				         ON AT.TRANSACTION_ID = T.ID
				       LEFT JOIN TRANSACTION_ITEM TI
				         ON TI.TYPE = 1
				            AND TI.TRANSACTION_ID = T.ID
				       LEFT JOIN ITEM IT
				         ON IT.TYPE IN ( 2, 4 )
				            AND IT.ID = TI.ITEM_ID
				WHERE  AT.ACCOUNT_ID = IT.ASSETS_ACCOUNT_ID
				       AND AT.COMPANY_ID = :companyId
				       AND T.COMPANY_ID = :companyId
				       AND IT.COMPANY_ID = :companyId
				GROUP  BY IT.ID;  
				]]>

	</sql-query>

	<sql-query name="getInventoryHistoryView">
		
		<![CDATA[
				CREATE OR REPLACE VIEW INVENTORY_HISTORY_VIEW AS
				SELECT t.id                                        AS transaction_id,
				       ti.id                                       AS transaction_item_id,
				       it.company_id                               AS company,
				       it.id                                       AS item_id,
				       t.t_date		                               AS transaction_date,
				       t.t_type                                    AS transaction_type,
				       t.number                                    AS transaction_number,
				       CASE
				         WHEN t.t_type IN ( 1, 4, 8 ) THEN -ti.qty_value
				         ELSE ti.qty_value
				       END                                         AS qty_value,
				       ti.qty_unit,
				       ti.unit_price * t.currency_factor           AS cost,
				       ti.description                              AS description,
				       it.NAME                                     AS item_name,
				       it.on_hand_qty_value                        AS item_total_quantity,
				       it.on_hand_qty_unit                         AS item_units,
				       it.preffered_vendor                         AS preffered_vendor,
				       it.sales_price                              AS item_sale_price,
				       p.id                                        AS payee_id,
				       p.NAME                                      AS payee_name,
				       it.TYPE                                     AS item_type,
				       it.re_order_point_value                     AS re_order_point_value,
				       it.re_order_point_unit                      AS re_order_point_unit,
				       it.purchase_description                     AS item_purchase_description,
				       it.as_of_date                               AS asofdate,
				       it.measurement                              AS item_measurement,
				       un.TYPE                                     AS unit
				FROM   item it
				       left join transaction_item ti
				         ON ti.TYPE = 1
				            AND it.TYPE IN ( 2, 4 )
				            AND ti.item_id = it.id
				       left join transaction t
				         ON ti.transaction_id = t.id
				       left join invoice i
				         ON i.id = t.id
				       left join cash_sales cs
				         ON cs.id = t.id
				       left join customer_credit_memo ccm
				         ON ccm.id = t.id
				       left join enter_bill eb
				         ON eb.id = t.id
				       left join vendor_credit_memo vcm
				         ON vcm.id = t.id
				       left join cash_purchase cp
				         ON cp.id = t.id
				       left join credit_card_charges cc
				         ON cc.id = t.id
				       left outer join estimate e 
				         ON e.id=t.id   AND e.estimatetype = 6
				       left outer join purchase_order po
				        ON po.id=t.id
				       left join customer c
				         ON c.id = cs.customer_id
				             OR c.id = ccm.customer_id
				             OR c.id = i.customer_id
				             OR c.id = e.customer_id
				       left join vendor v
				         ON v.id = cp.vendor_id
				             OR v.id = vcm.vendor_id
				             OR v.id = eb.vendor_id
				             OR ( v.id = cc.vendor_id
				                  AND cc.vendor_id IS NOT NULL )
				       left join payee p
				         ON p.id = c.id
				             OR p.id = v.id
				       left join unit un
				         ON ( un.measurement_id = it.measurement
				              AND un.is_default = true )
				WHERE  ti.id IS NOT NULL
				       AND ( t.t_type IN ( 1, 2, 4, 6,
				                           8,14,22,26, 27, 36 ,7)
				             AND t.save_status NOT IN ( 201, 202 ) )
				ORDER  BY t.t_date,
				          t.id;  
				]]>

	</sql-query>

	<sql-query name="getInventoryValutionDetails">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="itemID" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="QTY_VALUE" type="double" />
		<return-scalar column="QTY_UNIT" type="string" />
		<return-scalar column="COST" type="double" />
		<return-scalar column="ITEM_TOTAL_QUANTITY" type="double" />
		<return-scalar column="ITEM_UNITS" type="string" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="PAYEE_NAME" type="encryptedstring" />
		<return-scalar column="PAYEE_ID" type="long" />
		<return-scalar column="AVG_COST" type="double" />
		<return-scalar column="ESTIMATE_TYPE" type="int" />
		<![CDATA[
			 SELECT t.id                                       AS TRANSACTION_ID,
			       t.t_date                                   AS TRANSACTION_DATE,
			       t.t_type                                   AS TRANSACTION_TYPE,
			       t.number                                   AS TRANSACTION_NUMBER,
			       ( ( qu.factor / ohu.factor ) * qty_value ) AS QTY_VALUE,
			       ohu.TYPE                                   AS QTY_UNIT,
			       unit_price                                 AS COST,
			       i.on_hand_qty_value                        AS ITEM_TOTAL_QUANTITY,
			       ohu.TYPE                                   AS ITEM_UNITS,
			       i.name                                     AS ITEM_NAME,
			       i.id                                       AS ITEM_ID,
			       p.name                                     AS PAYEE_NAME,
			       p.id                                       AS PAYEE_ID,
			       i.average_cost                             AS AVG_COST,
			       E.estimatetype                             AS ESTIMATE_TYPE
			FROM   inventory_history ih
			       left join TRANSACTION t
			              ON t.id = ih.TRANSACTION
			       left join item i
			              ON i.id = ih.item
			       left join payee p
			              ON p.id = ih.payee
			       left join estimate e
			              ON e.id = t.id
			       left join unit ohu
			              ON ohu.id = i.on_hand_qty_unit
			       left join unit qu
			              ON qu.id = ih.qty_unit
			WHERE  T.t_date BETWEEN :fromDate AND :toDate
			       AND T.save_status NOT IN ( 201, 202, 204 )
			       AND T.company_id = :companyId
			       AND I.company_id = :companyId
			       AND CASE
			             WHEN 0 = :itemID THEN TRUE
			             ELSE ( ih.item = :itemID )
			           END
			ORDER  BY i.id,
			          t.t_date,
			          t.id;   
				]]>

	</sql-query>

	<sql-query name="getInventoryTotalAsset">
		<query-param name="wareHouseId" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />

		<return-scalar column="ASSET_TOTAL" type="double" />
		
		<![CDATA[
			SELECT SUM(asset_value) AS ASSET_TOTAL
			FROM   (SELECT SUM(ih.asset_value) AS ASSET_VALUE
			        FROM   inventory_history ih
			               left join item i
			                      ON i.id = ih.item
			               left join TRANSACTION t
			                      ON t.id = ih.TRANSACTION
			        WHERE  i.company_id = :companyId
			               AND CASE
			                     WHEN 0 != :wareHouseId THEN ih.warehouse = :wareHouseId
			                     ELSE TRUE
			                   END
			               AND CASE
			                     WHEN t.id IS NULL THEN TRUE
			                     ELSE t.t_date BETWEEN :fromDate AND :toDate
			                   END
			        GROUP  BY i.id) AS foo  
				]]>

	</sql-query>


	<sql-query name="getInventoryValutionSummary">
		<query-param name="wareHouseId" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />

		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="DESCRIPTION" type="encryptedstring" />
		<return-scalar column="ITEM_TOTAL_QUANTITY" type="double" />
		<return-scalar column="ITEM_UNITS" type="string" />
		<return-scalar column="COST" type="double" />
		<return-scalar column="ITEM_SALE_PRICE" type="double" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ASSET_VALUE" type="double" />
		<return-scalar column="TOTAL_RETAIL" type="double" />
		
		<![CDATA[
			 SELECT i.name                    AS ITEM_NAME,
			       i.purchase_description    AS DESCRIPTION,
			       SUM(ih.qty_value)         AS ITEM_TOTAL_QUANTITY,
			       u .TYPE                   AS ITEM_UNITS,
			       i.average_cost            AS COST,
			       i.sales_price             AS ITEM_SALE_PRICE,
			       i.id                      AS ITEM_ID,
			       SUM(ih.asset_value)       AS ASSET_VALUE,
			       (SELECT SUM(sales_price * on_hand_qty_value)
			        FROM   item
			        WHERE  TYPE IN ( 2, 4 )) AS TOTAL_RETAIL
			FROM   inventory_history ih
			       left join item i
			              ON i.id = ih.item
			       left join TRANSACTION t
			              ON t.id = ih.TRANSACTION
			       left join unit u
			              ON u.id = i.on_hand_qty_unit
			WHERE  i.company_id = :companyId
			       AND CASE
			             WHEN 0 != :wareHouseId THEN ih.warehouse = :wareHouseId
			             ELSE TRUE
			           END
			       AND CASE
			             WHEN t.id IS NULL THEN TRUE
			             ELSE t.t_date BETWEEN :fromDate AND :toDate
			           END
			GROUP  BY i.id,
			          u.id  
				]]>

	</sql-query>

	<sql-query name="getInventoryStockStatusByItem">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />

		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="DESCRIPTION" type="encryptedstring" />
		<return-scalar column="PREFFERED_VENDOR" type="encryptedstring" />
		<return-scalar column="ITEM_TOTAL_QUANTITY" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ASSEMBLIES" type="long" />
		<return-scalar column="PURCHASE_ORDERS" type="long" />
		<return-scalar column="SALES_ORDERS" type="long" />
		<return-scalar column="REORDER_POIN" type="int" />
		<return-scalar column="UNIT" type="string" />
		
		
		
		<![CDATA[
				SELECT item_name,
				       item_purchase_description AS description,
				       p.name                    AS preffered_vendor,
				       item_total_quantity,
				       item_id,
				       (SELECT COUNT(*)
				        FROM   inventory_history_view ihv2
				        WHERE  ihv2.transaction_type = 37
				               AND ihv2.item_id = v.item_id
				        GROUP  BY ihv2.item_id)  AS assemblies,
				       (SELECT COUNT(*)
				        FROM   inventory_history_view ihv2
				        WHERE  ihv2.transaction_type = 22
				               AND ihv2.item_id = v.item_id
				        GROUP  BY ihv2.item_id)  AS purchase_orders,
				       (SELECT COUNT(*)
				        FROM   inventory_history_view ihv2
				               LEFT JOIN estimate e
				                 ON e.id = ihv2.transaction_id
				        WHERE  ihv2.transaction_type = 7
				               AND e.estimatetype = 6
				               AND ihv2.item_id = v.item_id
				        GROUP  BY ihv2.item_id)  AS sales_orders,
				        v.re_order_point_value   AS reorder_poin,
				        v.unit 					 AS unit
				FROM   inventory_history_view v
				       LEFT JOIN payee p
				         ON p.id = v.preffered_vendor 
				WHERE  v.company = :companyId
				       AND ( v.transaction_date BETWEEN :fromDate AND :toDate )
				GROUP  BY v.item_id,
				          v.item_name,
				          v.item_purchase_description,
				          v.preffered_vendor,
				          v.item_total_quantity,v.re_order_point_value,p.id,v.unit;  
		]]>

	</sql-query>

	<sql-query name="getInventoryStockStatusByVendor">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />

		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="DESCRIPTION" type="encryptedstring" />
		<return-scalar column="PREFFERED_VENDOR" type="encryptedstring" />
		<return-scalar column="ITEM_TOTAL_QUANTITY" type="long" />
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ASSEMBLIES" type="long" />
		<return-scalar column="PURCHASE_ORDERS" type="long" />
		<return-scalar column="SALES_ORDERS" type="long" />
		<return-scalar column="REORDER_POIN" type="int" />
		<return-scalar column="UNIT" type="string" />
		
		<![CDATA[
				SELECT item_name,
				       item_purchase_description AS description,
				       p.name                    AS preffered_vendor,
				       item_total_quantity,
				       item_id,
				       (SELECT COUNT(*)
				        FROM   inventory_history_view ihv2
				        WHERE  ihv2.transaction_type = 37
				               AND ihv2.item_id = v.item_id
				        GROUP  BY ihv2.item_id)  AS assemblies,
				       (SELECT COUNT(*)
				        FROM   inventory_history_view ihv2
				        WHERE  ihv2.transaction_type = 22
				               AND ihv2.item_id = v.item_id
				        GROUP  BY ihv2.item_id)  AS purchase_orders,
				       (SELECT COUNT(*)
				        FROM   inventory_history_view ihv2
				               LEFT JOIN estimate e
				                 ON e.id = ihv2.transaction_id
				        WHERE  ihv2.transaction_type = 7
				               AND e.estimatetype = 6
				               AND ihv2.item_id = v.item_id
				        GROUP  BY ihv2.item_id)  AS sales_orders,
				       v.reorder_point           AS reorder_poin,
				       v.unit 					 AS unit
				FROM   inventory_history_view v
				       LEFT JOIN payee p
				         ON p.id = v.preffered_vendor
				WHERE  v.company = :companyId
				       AND ( v.transaction_date BETWEEN :fromDate AND :toDate )
				GROUP  BY v.preffered_vendor,
				          v.item_name,
				          v.item_purchase_description,
				          v.item_total_quantity,
				          v.reorder_point, 
				          v.item_id,
				          p.id, v.unit;   
		]]>

	</sql-query>

	<sql-query name="getClirntCompanyCount">
		<query-param name="clientId" type="long" />

		<return-scalar column="COMPANY_COUNT" type="long" />
		
		<![CDATA[
				SELECT COUNT(RES) AS COMPANY_COUNT
				FROM   (SELECT CL.ID
				        FROM   CLIENT CL
				               LEFT JOIN USERS U
				                 ON U.CLIENT_ID = CL.ID
				               LEFT JOIN COMPANY C
				                 ON C.ID = U.COMPANY_ID
				        WHERE  CL.ID = :clientId
				        GROUP  BY CL.ID,
				                  U.ID,
				                  C.ID) AS RES  
				]]>

	</sql-query>

	<sql-query name="getBankDepositDetails">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="PAYEE_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		
		<![CDATA[
				SELECT T.ID     AS TRANSACTION_ID,
				       T.T_TYPE AS TRANSACTION_TYPE,
				       T.NUMBER AS TRANSACTION_NUMBER,
				       T.T_DATE AS TRANSACTION_DATE,
				       P.NAME   AS PAYEE_NAME,
				       A.NAME   AS ACCOUNT_NAME,
				       CASE
				         WHEN ( A.IS_INCREASE ) THEN -AT.AMOUNT
				         ELSE AT.AMOUNT
				       END      AS AMOUNT
				FROM   ACCOUNT_TRANSACTION AT
				       LEFT JOIN ACCOUNT A
				         ON A.ID = AT.ACCOUNT_ID
				       LEFT JOIN TRANSACTION T
				         ON T.ID = AT.TRANSACTION_ID
				       LEFT JOIN CUSTOMER_PREPAYMENT CPP
				         ON CPP.ID = T.ID
				       LEFT JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT JOIN CUSTOMER_REFUND CR
				         ON CR.ID = T.ID
				       LEFT JOIN RECEIVE_PAYMENT RP
				         ON RP.ID = T.ID
				       LEFT JOIN PAYEE P
				         ON P.ID = CPP.CUSTOMER_ID
				             OR P.ID = CS.CUSTOMER_ID
				             OR P.ID = CR.CUSTOMER_ID
				             OR P.ID = RP.CUSTOMER_ID
				WHERE  A.COMPANY_ID = :companyId
				       AND T.T_TYPE IN ( 1, 5, 8, 10,
				                         12, 21, 29, 24, 35 )
				       AND ( A.A_TYPE = 2
				              OR AT.TRANSACTION_ID IN (SELECT AT2.TRANSACTION_ID
				                                       FROM   ACCOUNT_TRANSACTION AT2
				                                              LEFT JOIN ACCOUNT A2
				                                                ON A2.ID = AT2.ACCOUNT_ID
				                                       WHERE  A2.A_TYPE = 2) )
				       AND ( T.T_DATE BETWEEN :startDate AND :endDate )
				ORDER  BY AT.TRANSACTION_ID,
				          AMOUNT DESC;  
				]]>

	</sql-query>

	<sql-query name="getBankCheckDetails">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="paymentMethodCheque" type="encryptedstring" />
		<query-param name="paymentMethodCheck" type="encryptedstring" />


		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		
		<![CDATA[
				SELECT T.ID                        AS TRANSACTION_ID,
				       T.T_TYPE                    AS TRANSACTION_TYPE,
				       T.NUMBER                    AS TRANSACTION_NUMBER,
				       T.T_DATE                    AS TRANSACTION_DATE,
				       P.NAME                      AS NAME,
				       T.TOTAL * T.CURRENCY_FACTOR AS AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 15 THEN W.CHECK_NUMBER
				         WHEN T_TYPE IN( 2, 26, 28 ) THEN CP.CHECK_NUMBER
				         WHEN T_TYPE = 5 THEN CR.CHECK_NUMBER
				         WHEN T.T_TYPE = 17 THEN PT.CHECK_NUMBER
				         WHEN T_TYPE = 11 THEN PB.CHECK_NUMBER
				         WHEN T_TYPE IN( 3, 27 ) THEN CCC.CHECK_NUMBER
				         WHEN T.T_TYPE = 31 THEN RV.CHECK_NUMBER
				         WHEN T.T_TYPE = 29 THEN CPP.CHECK_NUMBER
				         WHEN T.T_TYPE = 12 THEN RP.CHECK_NUMBER
				         WHEN T.T_TYPE = 25 THEN VP.CHECK_NUMBER
				       END                         AS CHECK_NUMBER
				FROM   TRANSACTION T
				       LEFT JOIN WRITE_CHECKS W
				         ON W.ID = T.ID
				       LEFT JOIN CASH_PURCHASE CP
				         ON CP.ID = T.ID
				       LEFT JOIN CUSTOMER_REFUND CR
				         ON CR.ID = T.ID
				       LEFT JOIN PAY_TAX PT
				         ON PT.ID = T.ID
				       LEFT JOIN PAY_BILL PB
				         ON PB.ID = T.ID
				       LEFT JOIN VENDOR_PAYMENT VP
				         ON VP.ID = T.ID
				       LEFT JOIN CREDIT_CARD_CHARGES CCC
				         ON CCC.ID = T.ID
				       LEFT JOIN RECEIVE_VAT RV
				         ON RV.ID = T.ID
				       LEFT JOIN CUSTOMER_PREPAYMENT CPP
				         ON CPP.ID = T.ID
				       LEFT JOIN RECEIVE_PAYMENT RP
				         ON RP.ID = T.ID
				       LEFT JOIN PAYEE P
				         ON P.ID = W.VENDOR_ID
				             OR P.ID = W.CUSTOMER_ID
				             OR P.ID = CP.VENDOR_ID
				             OR P.ID = CR.CUSTOMER_ID
				             OR P.ID = PT.TAX_AGENCY_ID
				             OR P.ID = PB.VENDOR_ID
				             OR P.ID = VP.VENDOR_ID
				             OR P.ID = CCC.VENDOR_ID
				             OR P.ID = RV.TAX_AGENCY_ID
				             OR P.ID = CPP.CUSTOMER_ID
				             OR P.ID = RP.CUSTOMER_ID
				WHERE  T.COMPANY_ID = :companyId
				       AND (T.PAYMENT_METHOD = :paymentMethodCheque OR T.PAYMENT_METHOD =:paymentMethodCheck)
				       AND T.SAVE_STATUS NOT IN (201,202,204)
				       AND (  T.T_DATE BETWEEN :startDate AND :endDate);  
				]]>

	</sql-query>

	<sql-query name="getTransactionForItem">
		<query-param name="companyId" type="long" />
		<query-param name="transactionType" type="int" />
		<query-param name="saveStatus" type="int" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="itemId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="ESTIMATE_TYPE" type="int" />
		
		<![CDATA[
				SELECT T.ID          AS TRANSACTION_ID,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       T.MEMO        AS TRANSACTION_MEMO,
				       TI.QTY_VALUE  AS QUANTITY,
				       TI.QTY_UNIT   AS UNIT,
				       TI.LINE_TOTAL AS AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.CURRENCY    AS CURRENCY_ID,
				       CASE
				         WHEN T.T_TYPE = 7 THEN E.ESTIMATETYPE
				         ELSE 0
				       END           AS ESTIMATE_TYPE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ESTIMATE E
				         ON E.ID = T.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				WHERE  TI.TYPE = 1
				       AND IT.ID = :itemId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND CASE
				             WHEN :transactionType !=0 THEN T.T_TYPE = :transactionType
				             ELSE TRUE
				           END
				       AND CASE
				             WHEN :saveStatus !=0 THEN T.SAVE_STATUS = :saveStatus
				             ELSE TRUE
				           END
				       AND T.COMPANY_ID = :companyId
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="getEstimatesForItem">
		<query-param name="companyId" type="long" />
		<query-param name="saveStatus" type="int" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="itemId" type="long" />
		<query-param name="estimateType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="ESTIMATE_TYPE" type="int" />
		
		<![CDATA[
				SELECT T.ID          AS TRANSACTION_ID,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.NUMBER      AS TRANSACTION_NUMBER,
				       T.MEMO        AS TRANSACTION_MEMO,
				       TI.QTY_VALUE  AS QUANTITY,
				       TI.QTY_UNIT   AS UNIT,
				       TI.LINE_TOTAL AS AMOUNT,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       T.CURRENCY    AS CURRENCY_ID,
				       CASE
				         WHEN T.T_TYPE = 7 THEN E.ESTIMATETYPE
				         ELSE 0
				       END           AS ESTIMATE_TYPE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ESTIMATE E
				         ON E.ID = T.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				WHERE  TI.TYPE = 1
				       AND IT.ID = :itemId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND T.T_TYPE = 7
				       AND CASE
				             WHEN :saveStatus !=0 THEN T.SAVE_STATUS = :saveStatus
				             ELSE TRUE
				           END
				       AND T.COMPANY_ID = :companyId
				       AND E.ESTIMATETYPE = :estimateType
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="getPurchaseOrderForItem">
		<query-param name="companyId" type="long" />
		<query-param name="saveStatus" type="int" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="itemId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />

		SELECT T.ID AS TRANSACTION_ID,
		T.T_DATE AS TRANSACTION_DATE,
		T.T_TYPE AS
		TRANSACTION_TYPE,
		T.NUMBER AS TRANSACTION_NUMBER,
		T.MEMO AS
		TRANSACTION_MEMO,
		TI.QTY_VALUE AS QUANTITY,
		TI.QTY_UNIT AS UNIT,
		TI.LINE_TOTAL AS AMOUNT,
		CASE
		WHEN
		T.SAVE_STATUS = 204
		THEN TRUE
		ELSE
		FALSE
		END AS ISVOIDED,
		T.CURRENCY AS CURRENCY_ID

		FROM TRANSACTION T
		LEFT OUTER
		JOIN PURCHASE_ORDER E ON E.ID = T.ID
		LEFT OUTER JOIN TRANSACTION_ITEM
		TI ON TI.TRANSACTION_ID = T.ID
		LEFT OUTER JOIN ITEM IT ON IT.ID =
		TI.ITEM_ID

		WHERE TI.TYPE = 1 AND IT.ID =:itemId AND T.T_DATE BETWEEN
		:fromDate AND
		:toDate
		AND T.T_TYPE =22 AND
		CASE WHEN :saveStatus !=0
		THEN
		T.SAVE_STATUS=:saveStatus
		ELSE TRUE
		END
		AND T.COMPANY_ID =:companyId
		AND
		T.SAVE_STATUS !=202
		ORDER BY T.ID
	</sql-query>

	<sql-query name="getDraftBillsListByItem">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="itemId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ISVOIDED" type="boolean" />
		<return-scalar column="TRANSACTION_MEMO" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		<return-scalar column="ESTIMATE_TYPE" type="int" />
		
		<![CDATA[
				SELECT T.CURRENCY    AS CURRENCY_ID,
				       T.MEMO        AS TRANSACTION_MEMO,
				       T.ID          AS TRANSACTION_ID,
				       T.T_TYPE      AS TRANSACTION_TYPE,
				       T.T_DATE      AS TRANSACTION_DATE,
				       T.NUMBER      TRANSACTION_NUMBER,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END           AS ISVOIDED,
				       TI.QTY_VALUE  AS QUANTITY,
				       TI.QTY_UNIT   AS UNIT,
				       TI.LINE_TOTAL AS AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 7 THEN E.ESTIMATETYPE
				         ELSE 0
				       END           AS ESTIMATE_TYPE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ESTIMATE E
				         ON E.ID = T.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				WHERE  T.T_TYPE = 6
				       AND T.SAVE_STATUS = 201
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :fromDate AND :toDate
				       AND IT.ID = :itemId
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="getDepreciatingFixedAssets">
		<query-param name="fromDate" type="long" />
		<query-param name="fromTo" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT T.ID     AS TRANSACTION_ID,
				       T.T_TYPE AS TRANSACTION_TYPE,
				       T.NUMBER AS TRANSACTION_NUMBER,
				       T.TOTAL  AS ORIGINAL_AMOUNT,
				       T.T_DATE AS TRANSACTION_DATE,
				       P.NAME   AS CUSTOMER_NAME
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ESTIMATE E
				         ON T.ID = E.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = E.CUSTOMER_ID
				WHERE  T.STATUS !=2
				       AND T.SAVE_STATUS != 202
				       AND T.T_TYPE IN ( 7 )
				       AND P.ID = :customerId
				       AND T.COMPANY_ID = :companyId
				ORDER  BY T.T_DATE  
				]]>

	</sql-query>

	<sql-query name="getSalesOrdersList">
		<query-param name="customerId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="REMAINING_TOTAL" type="double" />
		<return-scalar column="ESTIMATE_TYPE" type="int" />
		<return-scalar column="STATUS" type="int" />
		
		<![CDATA[
				SELECT T.STATUS                                        AS STATUS,
				       T.ID                                            AS TRANSACTION_ID,
				       T.T_TYPE                                        AS TRANSACTION_TYPE,
				       T.NUMBER                                        AS TRANSACTION_NUMBER,
				       T.TOTAL                                         AS ORIGINAL_AMOUNT,
				       T.T_DATE                                        AS TRANSACTION_DATE,
				       P.NAME                                          AS CUSTOMER_NAME,
				       E.ESTIMATETYPE                                  AS ESTIMATE_TYPE,
				       ( T.TOTAL - (SELECT SUM(TI.INVOICED + ( TI.VAT_FRACTION * (
				                                               TI.INVOICED / TI.LINE_TOTAL ) ))
				                    FROM   TRANSACTION_ITEM TI
				                    WHERE  TI.TRANSACTION_ID = T.ID) ) AS REMAINING_TOTAL
				FROM   TRANSACTION T
				       LEFT OUTER JOIN COMPANY C
				         ON C.ID = :companyId
				       LEFT OUTER JOIN ESTIMATE E
				         ON T.ID = E.ID
				            AND T.STATUS IN ( 0, 2 )
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = E.CUSTOMER_ID
				WHERE  T.T_TYPE = 7
				       AND P.ID = :customerId
				       AND T.COMPANY_ID = :companyId
				       AND T.SAVE_STATUS NOT IN ( 202, 201, 204 )
				       AND E.ESTIMATETYPE = 6
				ORDER  BY T.T_DATE  
				]]>

	</sql-query>

	<sql-query name="list.TAXAdjustments">
		<query-param name="companyId" type="long" />
		<query-param name="fromDate" type="long" />
		<query-param name="toDate" type="long" />
		<query-param name="viewType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="TAX_AGENCY" type="long" />
		<return-scalar column="TAX_ITEM" type="long" />
		<return-scalar column="ACCOUNT" type="long" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="CURRENCY" type="long" />
	<![CDATA[
		SELECT T.ID AS TRANSACTION_ID, 
		T.T_DATE AS DATE,
		A.TAX_AGENCY_ID AS TAX_AGENCY,
		A.TAX_ITEM AS TAX_ITEM,
		A.ADJUSTMENT_ACCOUNT AS ACCOUNT,
		T.TOTAL AS TOTAL,
		T.CURRENCY AS CURRENCY
		
		FROM TAX_ADJUSTMENT A
			 LEFT JOIN TRANSACTION T
			 	ON T.ID = A.ID
		WHERE T.COMPANY_ID = :companyId
			   AND CASE
				             WHEN 1 = :viewType THEN ( A.BALANCE_DUE > 0.0
				                                       AND T.STATUS != 2
				                                       AND T.SAVE_STATUS !=204
				                                       AND T.SAVE_STATUS!=201 )
				           
				             WHEN 3 = :viewType THEN ( T.SAVE_STATUS = 204 )
				             
				             ELSE TRUE
				           END
			  AND T.T_DATE BETWEEN :fromDate AND :toDate
		ORDER  BY T.T_DATE DESC, T.NUMBER DESC
		]]>
	</sql-query>
	<sql-query name="getPresentRecurringTransactions">
		<return-scalar column="RECURRING_ID" type="long" />
		<![CDATA[
				SELECT r.id as RECURRING_ID
				FROM   recurring_transaction r
				       left join company c
				         ON c.id = r.company_id
				WHERE  r.stopped = false
					   AND r.status!=2
				       AND r.recurring_type != 2
				       AND ( ( Cast(
				       				To_char(Cast(
				       						Trim(Substr(Cast(c.timezone AS TEXT), 4, 5)) AS
				                                 INTERVAL
				                   			)
				                            + Now() AT TIME ZONE 'GMT', 'YYYYMMDD')
				                    AS  BIGINT
				                    ) >
				                     r.next_schedule_on - r.days_before_remind )
				              OR ( To_char(Cast(
				              					Trim(Substr(Cast(c.timezone AS TEXT), 4, 5)) AS
				                                INTERVAL
				                                ) +
				                                 Now() AT TIME ZONE 'GMT', 'YYYYMMDD') = Cast(
				                       r.next_schedule_on AS TEXT) ) )
				ORDER  BY r.next_schedule_on    
		]]>
	</sql-query>

	<sql-query name="getPrevTransaction">
		<query-param name="company" type="long" />
		<query-param name="id" type="long" />
		<query-param name="type" type="int" />
		<query-param name="subType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<![CDATA[
			SELECT T.ID AS TRANSACTION_ID 
				FROM TRANSACTION T 
				LEFT JOIN TRANSACTION T1 ON T1.ID =  :id
				LEFT JOIN ESTIMATE E ON E.ID = T.ID 
					WHERE 
					CASE 
						WHEN T.T_DATE > T1.T_DATE
						THEN FALSE 
					ELSE 
						CASE 
							WHEN T.T_DATE < T1.T_DATE
							THEN TRUE
						ELSE
							CASE 
								WHEN T.NUMBER > T1.NUMBER
								THEN FALSE 
							ELSE 
								CASE 
									WHEN T.NUMBER < T1.NUMBER
									THEN TRUE
								ELSE
									CASE 
										WHEN :id != 0 
										THEN T.ID < :id
									ELSE 
										TRUE 
									END 
								END
							END 
						END 
					END 
					AND T.T_TYPE = :type 
					AND	
						CASE 
							WHEN T.T_TYPE = 7 
							THEN E.ESTIMATETYPE = :subType 
						ELSE 
							TRUE 
						END 
					AND T.COMPANY_ID = :company 
					ORDER BY T.T_DATE DESC,T.NUMBER DESC,T.ID DESC LIMIT 1
		]]>
	</sql-query>

	<sql-query name="getNextTransaction">
		<query-param name="company" type="long" />
		<query-param name="id" type="long" />
		<query-param name="type" type="int" />
		<query-param name="subType" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<![CDATA[
			SELECT T.ID AS TRANSACTION_ID 
				FROM TRANSACTION T 
				LEFT JOIN TRANSACTION T1 ON T1.ID = :id
				LEFT JOIN ESTIMATE E ON E.ID = T.ID 
					WHERE 
					CASE 
						WHEN T.T_DATE < T1.T_DATE
						THEN FALSE 
					ELSE 
						CASE 
							WHEN T.T_DATE > T1.T_DATE
							THEN TRUE
						ELSE
							CASE 
								WHEN T.NUMBER < T1.NUMBER
								THEN FALSE 
							ELSE 
								CASE 
									WHEN T.NUMBER > T1.NUMBER
									THEN TRUE
								ELSE
									CASE 
										WHEN :id != 0 
										THEN T.ID > :id
									ELSE 
										TRUE 
									END 
								END
							END 
						END 
					END 
					AND T.T_TYPE = :type 
					AND	
						CASE 
							WHEN T.T_TYPE = 7 
							THEN E.ESTIMATETYPE = :subType 
						ELSE 
							TRUE 
						END 
					AND T.COMPANY_ID = :company 
					ORDER BY T.T_DATE ,T.NUMBER ,T.ID LIMIT 1
		]]>
	</sql-query>

	<sql-query name="getUnitPricesByCustomer">
		<query-param name="company" type="long" />
		<query-param name="customer" type="long" />
		<query-param name="item" type="long" />

		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="UNIT_PRICE" type="double" />
		<![CDATA[
			SELECT T.NUMBER AS TRANSACTION_NUMBER,
					PRICES.TRANSACTION_DATE AS TRANSACTION_DATE,
					PRICES.UNIT_PRICE AS UNIT_PRICE
					
					FROM (SELECT 	MAX(T.ID) AS ID,
									MAX(Cast(T.T_DATE AS TEXT)) AS TRANSACTION_DATE,
									TI.UNIT_PRICE AS UNIT_PRICE
										FROM TRANSACTION_ITEM TI 
											LEFT JOIN TRANSACTION T ON T.ID = TI.TRANSACTION_ID 
											LEFT JOIN ITEM IT ON IT.ID = TI.ITEM_ID
											LEFT JOIN INVOICE I ON I.ID = T.ID
											LEFT JOIN CASH_SALES CS ON CS.ID = T.ID
								
											LEFT JOIN PAYEE P ON (P.ID = I.CUSTOMER_ID OR P.ID = CS.CUSTOMER_ID)
								
											WHERE TI.ITEM_ID = :item AND P.ID = :customer AND T.COMPANY_ID = :company
											GROUP BY UNIT_PRICE) AS PRICES
											LEFT JOIN TRANSACTION T ON T.ID = PRICES.ID
											ORDER BY PRICES.TRANSACTION_DATE DESC ,PRICES.ID DESC ,PRICES.UNIT_PRICE DESC LIMIT 5
		]]>
	</sql-query>

	<sql-query name="getUnitPricesByVendor">
		<query-param name="company" type="long" />
		<query-param name="vendor" type="long" />
		<query-param name="item" type="long" />

		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="UNIT_PRICE" type="double" />
		<![CDATA[
			SELECT T.NUMBER AS TRANSACTION_NUMBER,
					PRICES.TRANSACTION_DATE AS TRANSACTION_DATE,
					PRICES.UNIT_PRICE AS UNIT_PRICE
					
					FROM (SELECT 	MAX(T.ID) AS ID,
									MAX(T.T_DATE) AS TRANSACTION_DATE,
									TI.UNIT_PRICE AS UNIT_PRICE
										FROM TRANSACTION_ITEM TI 
											LEFT JOIN TRANSACTION T ON T.ID = TI.TRANSACTION_ID 
											LEFT JOIN ITEM IT ON IT.ID = TI.ITEM_ID
											LEFT JOIN ENTER_BILL EB ON EB.ID = T.ID
											LEFT JOIN CASH_PURCHASE CP ON CP.ID = T.ID
								
											LEFT JOIN PAYEE P ON (P.ID = EB.VENDOR_ID OR P.ID = CP.VENDOR_ID)
								
											WHERE TI.ITEM_ID = :item AND P.ID = :vendor AND T.COMPANY_ID = :company
											GROUP BY UNIT_PRICE ) AS PRICES
											LEFT JOIN TRANSACTION T ON T.ID = PRICES.ID
											ORDER BY PRICES.TRANSACTION_DATE DESC ,PRICES.ID DESC ,PRICES.UNIT_PRICE DESC LIMIT 5
		]]>
	</sql-query>

	<sql-query name="canDeleteEmployee">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="PAY_STRUCTURE" type="long" />
		<return-scalar column="EPD_ID" type="long" />
		<return-scalar column="AMI_ID" type="long" />
		<return-scalar column="PE_ID" type="long" />
		
		<![CDATA[		
			SELECT PS.ID  AS PAY_STRUCTURE, 
			       EPD.ID AS EPD_ID, 
			       AMI.ID AS AMI_ID, 
			       PE.ID  AS PE_ID 
			FROM   EMPLOYEE E 
			       LEFT OUTER JOIN PAYEE P 
			         ON P.ID = E.ID 
			       LEFT OUTER JOIN PAY_STRUCTURE PS 
			         ON PS.EMPLOYEE = E.ID 
			       LEFT OUTER JOIN EMPLOYEE_PAYMENT_DETAILS EPD 
			         ON EPD.EMPLOYEE = E.ID 
			       LEFT OUTER JOIN ATTENDANCE_MANAGEMENT_ITEM AMI 
			         ON AMI.EMPLOYEE = E.ID 
			       LEFT OUTER JOIN PAY_EMPLOYEE PE 
			         ON PE.EMPLOYEE_ID = E.ID 
			WHERE  E.ID = :inputId 
			       AND P.COMPANY_ID = :companyId 			       
		]]>
	</sql-query>

	<sql-query name="canDeletePayRun">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="PR_ID" type="long" />
		
		<![CDATA[	
				   SELECT TPE.ID AS PR_ID 
			FROM   PAY_RUN PR 
				   LEFT OUTER JOIN TRANSACTION_PAY_EMPLOYEE TPE
				   ON TPE.PAY_RUN_ID = PR.ID
			       LEFT JOIN TRANSACTION T 
			         ON T.ID = PR.ID 
			WHERE  PR.ID = :inputId 
			       AND T.COMPANY_ID = :companyId 
			LIMIT  1 
			
			]]>
	</sql-query>

	<sql-query name="list.file.tax">
		<query-param name="companyId" type="long" />
		<query-param name="startdate" type="long" />
		<query-param name="enddate" type="long" />
		<query-param name="viewId" type="int" />

		<return-scalar column="TR_ID" type="long" />
		
		<![CDATA[
				SELECT TR.ID AS TR_ID
				FROM   TAX_RETURN TR
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = TR.ID
				WHERE  T.T_TYPE = 20
				       AND T.COMPANY_ID = :companyId
				       AND ( CASE
				               WHEN 1 = :viewId THEN TR.BALANCE > 0
				               WHEN 5 = :viewId THEN TR.BALANCE <= 0
				               WHEN 3 = :viewId THEN T.SAVE_STATUS = 204				              
				               ELSE TRUE
				             END )
				       AND T.T_DATE BETWEEN :startdate AND :enddate
				ORDER BY T.T_DATE DESC, T.NUMBER DESC  
		]]>
	</sql-query>
	<sql-query name="list.pay.tax">
		<query-param name="companyId" type="long" />
		<query-param name="startdate" type="long" />
		<query-param name="enddate" type="long" />

		<return-scalar column="TR_ID" type="long" />
		
		<![CDATA[
				SELECT TR.ID AS TR_ID
				FROM   PAY_TAX TR
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = TR.ID
				WHERE  T.T_TYPE = 17
				       AND T.COMPANY_ID = :companyId
				       AND ( CASE
				               WHEN 1 = :viewId THEN T.SAVE_STATUS = 203
				               WHEN 3 = :viewId THEN T.SAVE_STATUS = 204
				               WHEN 0 = :viewId THEN TRUE
				               ELSE TRUE
				             END )
				       AND T.T_DATE BETWEEN :startdate AND :enddate  
				ORDER BY T.T_DATE DESC, T.NUMBER DESC
		]]>
	</sql-query>
	<sql-query name="list.receive.tax">
		<query-param name="companyId" type="long" />
		<query-param name="startdate" type="long" />
		<query-param name="enddate" type="long" />
		<query-param name="viewId" type="int" />

		<return-scalar column="TR_ID" type="long" />
		
		<![CDATA[
				SELECT TR.ID AS TR_ID
				FROM   RECEIVE_VAT TR
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = TR.ID
				WHERE  T.T_TYPE = 31
				       AND T.COMPANY_ID = :companyId
				       AND ( CASE
				               WHEN 1 = :viewId THEN T.SAVE_STATUS = 203
				               WHEN 3 = :viewId THEN T.SAVE_STATUS = 204
				               WHEN 0 = :viewId THEN TRUE
				               ELSE TRUE
				             END )
				       AND T.T_DATE BETWEEN :startdate AND :enddate  		
				ORDER BY T.T_DATE DESC, T.NUMBER DESC
		]]>
	</sql-query>

	<sql-query name="list.buildAssemblies">
		<query-param name="companyId" type="long" />
		<query-param name="startdate" type="long" />
		<query-param name="enddate" type="long" />
		<query-param name="viewId" type="int" />

		<return-scalar column="BA_ID" type="long" />
		
		<![CDATA[
				SELECT BA.ID AS BA_ID
				FROM BUILD_ASSEMBLY BA
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = BA.ID
				WHERE  T.T_TYPE = 37
				       AND T.COMPANY_ID = :companyId
				       AND ( CASE
				               WHEN 1 = :viewId THEN T.SAVE_STATUS = 203
				               WHEN 3 = :viewId THEN T.SAVE_STATUS = 204
				               WHEN 0 = :viewId THEN TRUE
				               ELSE TRUE
				             END )
				       AND T.T_DATE BETWEEN :startdate AND :enddate  
				ORDER BY T.T_DATE DESC, T.NUMBER DESC
		]]>
	</sql-query>

	<sql-query name="canDeletePayrollUnit">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />
		<return-scalar column="APT_ID" type="long" />
		
		<![CDATA[	
						SELECT APT.ID AS APT_ID 
			FROM   pay_roll_unit PH 
			       LEFT OUTER JOIN ATTENDANCE_OR_PRODUCTION_TPE APT 
			         ON APT.unit = PH.ID 
			WHERE  PH.ID = :inputId 
			       AND PH.COMPANY_ID = :companyId 
			LIMIT  1 
			
			]]>
	</sql-query>

	<sql-query name="canDeletePayEmployee">
		<query-param name="inputId" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		
		<![CDATA[
				SELECT PE.ID AS ID
				FROM   PAY_EMPLOYEE PE
				       LEFT JOIN TRANSACTION T
				         ON T.ID = PE.ID
				WHERE  PE.ID IS NULL
				       AND PE.ID = :inputId
				       AND T.COMPANY_ID = :companyId
				LIMIT  1  
				]]>

	</sql-query>


	<sql-query name="get.Last.Transaction.Number">
		<query-param name="transactionType" type="int" />
		<query-param name="companyId" type="long" />

		<return-scalar column="NUMBER" type="encryptedstring" />

		SELECT T.NUMBER FROM TRANSACTION T WHERE T.T_TYPE= :transactionType
		AND T.COMPANY_ID= :companyId
		ORDER BY T.ID desc LIMIT 1
	</sql-query>


	<sql-query name="get.Transaction.Number.by.Number.Id">
		<query-param name="transactionType" type="int" />
		<query-param name="companyId" type="long" />

		<return-scalar column="NUMBER" type="encryptedstring" />

		SELECT T.NUMBER FROM TRANSACTION T WHERE T.T_TYPE= :transactionType
		AND T.COMPANY_ID= :companyId
		ORDER BY T.number desc, t.id desc
	</sql-query>

	<sql-query name="make.RecurringTranscation.Fail">
		<query-param name="rtId" type="long" />
		UPDATE RECURRING_TRANSACTION SET STATUS=2 WHERE ID= :rtId
	</sql-query>

	<sql-query name="get.All.Incorrect.Auto.Transactions">
		<return-scalar column="TRANSACTION_ID" type="long" />
		SELECT t.id as TRANSACTION_ID
		FROM TRANSACTION t
		WHERE t.t_date >=
		20120907
		AND is_automatic_transaction = TRUE
	</sql-query>

	<sql-query name="get.recurringTransactions">
		<return-scalar column="R_ID" type="long" />
		SELECT id as R_ID
		FROM RECURRING_TRANSACTION
	</sql-query>

	<sql-query name="get.max.Path.Of.Items">
		<query-param name="itemId" type="long" />
		<return-scalar column="MAX_PATH" type="integer" />
		SELECT Coalesce(Max(CASE
		WHEN I.path IS NULL
		OR I.path = '' THEN 0
		ELSE
		Cast(I.path AS INTEGER)
		END), 0) AS MAX_PATH
		FROM item I
		WHERE
		I.parent_id IS NULL
		AND I.id != :itemId
	</sql-query>

	<sql-query name="get.child.count.of.Item">
		<query-param name="itemId" type="long" />
		<return-scalar column="CH_COUNT" type="long" />
		SELECT Count(*) AS CH_COUNT
		FROM item I
		WHERE I.parent_id = :itemId
	</sql-query>

	<sql-query name="get.max.Path.Of.Classes">
		<query-param name="classId" type="long" />
		<return-scalar column="MAX_PATH" type="integer" />
		SELECT Coalesce(Max(CASE
		WHEN AC.path IS NULL
		OR AC.path = '' THEN 0
		ELSE Cast(AC.path AS INTEGER)
		END), 0) AS MAX_PATH
		FROM accounter_class
		AC
		WHERE AC.parent_id IS NULL
		AND AC.id != :classId
	</sql-query>

	<sql-query name="get.child.count.of.Class">
		<query-param name="classId" type="long" />
		<return-scalar column="CH_COUNT" type="long" />
		SELECT count(*) as CH_COUNT FROM ACCOUNTER_CLASS AC WHERE
		AC.PARENT_ID= :classId
	</sql-query>

	<!-- //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->

</hibernate-mapping>