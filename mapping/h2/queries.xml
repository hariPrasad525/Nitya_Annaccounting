<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping default-access="field"
	package="com.vimukti.accounter.core">

	<query name="get.canVoidOrEditTransaction.from.transactionID">
		<query-param name="company" type="Company" />
		<query-param name="id" type="long" />
		select t.canVoidOrEdit from
		com.vimukti.accounter.core.Transaction t
		where t.id=:id and t.company=:company
	</query>

	<query name="getdistnct.from.traction.by.date">
		<query-param name="company" type="Company" />
		<query-param name="status" type="int" />
		select distinct(t.transactionDate) from
		com.vimukti.accounter.core.Transaction t where t.company=:company and
		t.transactionDate &gt;=
		(select
		c.preferences.depreciationStartDate
		from
		com.vimukti.accounter.core.Company c where c.id is not
		null) and
		t.transactionDate &lt;= (select max(d.depreciateTo) from
		com.vimukti.accounter.core.Depreciation d where d.company=:company and
		d.status=:status)
		order by
		t.transactionDate
	</query>

	<query name="getFixedAsset.from.id">
		<query-param name="company" type="Company" />
		<query-param name="id" type="long" />
		select f from
		com.vimukti.accounter.core.FixedAsset f
		where f.id=:id and
		f.company=:company
	</query>

	<query name="getFixedAsset.from.status">
		<query-param name="company" type="Company" />
		<query-param name="status" type="int" />
		select f from
		com.vimukti.accounter.core.FixedAsset f
		where
		(f.status=:status) and
		f.company=:company
		order by f.lastModifiedDate
		desc
	</query>
	<query name="getFixedAsset.from.status2or3">
		<query-param name="company" type="Company" />
		<query-param name="status" type="int" />
		select f from
		com.vimukti.accounter.core.FixedAsset f
		where
		(f.status=:status or f.status=3) and
		f.company=:company
		order by
		f.lastModifiedDate desc
	</query>
	<query name="getEntry.from.journalEntryType">
		<query-param name="company" type="Company" />
		from
		com.vimukti.accounter.core.JournalEntry je where
		je.company=:company and
		je.journalEntryType=3
		order by je.id
	</query>

	<query name="getFiscalYear.by.check.isCurrentFiscalYearistrue">
		<query-param name="company" type="Company" />
		select f.startDate from
		com.vimukti.accounter.core.FiscalYear f where
		f.company=:company and
		f.isCurrentFiscalYear=true
	</query>

	<query name="getEntry.by.debitand.balanceDue.orderbyid">
		<query-param name="company" type="Company" />
		from
		com.vimukti.accounter.core.JournalEntry je where
		je.company=:company and
		je.balanceDue>0.0
		order by je.id
	</query>

	<query name="getEntry.by.vendorId.creditand.balanceDue.orderbyid">
		<query-param name="company" type="Company" />
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.JournalEntry je where
		je.company=:company and
		je.involvedPayee.id=:id and
		je.balanceDue>0.0
		order by
		je.id
	</query>

	<query name="getEntry.by.customerId.debitand.balanceDue.orderbyid">
		<query-param name="company" type="Company" />
		<query-param name="id" type="long" />
		from
		com.vimukti.accounter.core.JournalEntry je where
		je.company=:company and
		je.involvedPayee.id=:id and
		je.balanceDue>0.0
		order
		by je.id
	</query>


	<query name="getVATReturn.checkingby.taxagencyidand.dates">
		<query-param name="company" type="Company" />
		<query-param name="id" type="long" />
		select min(v.periodStartDate),
		max(v.periodEndDate) from
		com.vimukti.accounter.core.TAXReturn v
		where v.company=:company and
		v.taxAgency.id
		=:id group by v.taxAgency.id
	</query>

	<query name="get.name.fromAccount.byId">
		<query-param name="id" type="long" />
		<query-param name="company" type="Company" />
		select a.name from
		com.vimukti.accounter.core.Account
		a where a.id=:id
		and a.company=:company
	</query>

	<query name="getDepreciation.from.depreciateFrom.byFixedassetId">
		<query-param name="id" type="long" />
		<query-param name="date" type="long" />
		<query-param name="status" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Depreciation
		d inner join d.fixedAsset
		where d.company=:company and d.depreciateFrom >=:date and
		d.status=:status
		and d.fixedAsset.id=:id
	</query>

	<query name="update.merge.Payee.mergeoldbalance.tonewbalance">
		<query-param name="id" type="long" />
		<query-param name="balance" type="double" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.Payee set balance=:balance where
		id=:id and company=:company
	</query>

	<query name="update.merge.invoice.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.Invoice set customer.id=:toID where
		customer.id=:fromID and company=:company
	</query>
	<query name="update.merge.CreditsAndPayments">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.CreditsAndPayments set
		payee.id=:toID where
		payee.id=:fromID
	</query>
	<query name="update.merge.CustomFieldValue">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.CustomFieldValue set
		payee.id=:toID
		where
		payee.id=:fromID
	</query>

	<query name="update.merge.cashsale.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.CashSales set customer.id=:toID
		where customer.id=:fromID and company=:company
	</query>

	<query name="update.merge.salesOrder.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.Estimate set customer.id=:toID
		where
		customer.id=:fromID and company=:company
	</query>

	<query name="update.merge.customercreditmemo.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.CustomerCreditMemo set
		customer.id=:toID where customer.id=:fromID and company=:company
	</query>

	<query name="update.merge.CustomerPrePayment.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.CustomerPrePayment set
		customer.id=:toID where customer.id=:fromID and company=:company
	</query>

	<query name="update.merge.CustomerRefund.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.CustomerRefund set payTo.id=:toID
		where payTo.id=:fromID and company=:company
	</query>
	<query name="update.merge.Estimate.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.Estimate set customer.id=:toID
		where
		customer.id=:fromID and company=:company
	</query>
	<query name="update.merge.ReceivePayment.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.ReceivePayment set customer.id=:toID
		where
		customer.id=:fromID and company=:company
	</query>

	<query name="update.merge.JournalEntry.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.JournalEntry set
		involvedPayee.id=:toID
		where involvedPayee.id=:fromID and
		company=:company

	</query>
	<query name="delete.customFiledValuesByCustomField">
		<query-param name="Id" type="long" />
		delete from com.vimukti.accounter.core.CustomFieldValue cv
		where
		cv.customField.id=:Id
	</query>
	<query name="get.customFiledValuesByCustomField">
		<query-param name="Id" type="long" />
		from com.vimukti.accounter.core.CustomFieldValue cv
		where
		cv.customField.id=:Id
	</query>
	<query name="update.merge.writeCheck.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.WriteCheck set
		customer.id=:toID
		where customer.id=:fromID and company=:company
	</query>

	<query name="update.mergeVendor.Payee.mergeoldbalance.tonewbalance">
		<query-param name="id" type="long" />
		<query-param name="status" type="boolean" />
		<query-param name="balance" type="double" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.Payee set
		balance=:balance,isActive=:status where
		id=:id and company=:company
	</query>

	<query name="update.mergeVendor.PurchaseOrder.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.PurchaseOrder set vendor.id=:toID
		where
		vendor.id=:fromID and company=:company
	</query>


	<query name="update.mergeVendor.CashPurchase.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.CashPurchase set vendor.id=:toID
		where
		vendor.id=:fromID and company=:company
	</query>

	<query name="update.mergeVendor.CreditCardCharge.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.CreditCardCharge set vendor.id=:toID
		where
		vendor.id=:fromID and company=:company
	</query>

	<query name="update.mergeVendor.EnterBill.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.EnterBill set vendor.id=:toID
		where
		vendor.id=:fromID and company=:company
	</query>
	
	<query name="update.mergeVendor.vendorPrepayment.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.VendorPrePayment set vendor.id=:toID
		where
		vendor.id=:fromID and company=:company
	</query>

	<query name="update.mergeVendor.ItemReceipt.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="company" type="Company" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.ItemReceipt set vendor.id=:toID
		where
		vendor.id=:fromID and company=:company
	</query>
	<query name="update.mergeVendor.PayBill.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.PayBill set vendor.id=:toID
		where
		vendor.id=:fromID and company=:company
	</query>
	<query name="update.mergeVendor.vendorCreditMemo.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.VendorCreditMemo set
		vendor.id=:toID
		where
		vendor.id=:fromID and company=:company
	</query>
	<query name="update.mergeVendor.writeCheck.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.WriteCheck set
		vendor.id=:toID where
		vendor.id=:fromID and company=:company
	</query>
	<query name="update.mergeVendor.Item.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.Item set
		preferredVendor.id=:toID
		where
		preferredVendor.id=:fromID and company=:company
	</query>

	<query name="update.mergeItem.oldcost.tonewcost">
		<query-param name="from" type="long" />
		<query-param name="status" type="boolean" />
		<query-param name="price" type="double" />
		<query-param name="p_Price" type="double" />

		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.Item set
		salesPrice=:price,purchasePrice=:p_Price,isActive=:status
		where
		id=:from and company=:company
	</query>


	<query name="update.merge.Account.oldBalance.tonew">
		<query-param name="from" type="long" />
		<query-param name="balance" type="double" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.Account set
		totalBalanceInAccountCurrency=:balance
		where
		id=:from and
		company=:company
	</query>

	<query name="delete.account.old">
		<query-param name="from" type="long" />
		<query-param name="company" type="Company" />
		delete from com.vimukti.accounter.core.AccountTransaction where
		account.id=:from and company=:company
	</query>

	<query name="get.TransactionDate.from.TransactionbyDate">
		<query-param name="date" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		select t.transactionDate from com.vimukti.accounter.core.Transaction t
		where t.transactionDate
		&lt;:date and t.company=:company
	</query>


	<query name="getFisaclId.andSum.fromAccountTransaction">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		select at.account.id as accountId, sum(at.amount) as amount from
		com.vimukti.accounter.core.AccountTransaction at where
		at.company=:company and at.account.type
		in (14,15,16,17,18) and
		at.transaction.transactionDate between
		:startDate and :endDate group
		by
		at.account.id
	</query>

	<query name="getDepreciation.byFixedAsset.andWithDetails">
		<query-param name="company" type="Company" />
		<query-param name="date" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="status" type="int" />
		<query-param name="id" type="long" />
		select d from com.vimukti.accounter.core.Depreciation
		d inner join
		d.fixedAsset where d.company=:company and d.depreciateFrom
		>= :date and
		d.status=:status and d.fixedAsset.id=:id group by d.fixedAsset.id
	</query>

	<query name="getCustomerNumber.orderBy.customerNumber">
		<query-param name="company" type="Company" />
		select c.number from
		com.vimukti.accounter.core.Customer c where
		c.company=:company and c.number is not null
	</query>
	<query name="getVendorNumber.byId.andOrder">
		<query-param name="company" type="Company" />
		select v.vendorNumber from
		com.vimukti.accounter.core.Vendor v where
		v.company=:company and v.vendorNumber is not null
	</query>

	<query name="getassestNumber.from.FixedAsset">
		<query-param name="company" type="Company" />
		select f.assetNumber from
		com.vimukti.accounter.core.FixedAsset f where
		f.company=:company order by f.id
	</query>

	<query name="getTransactionNumber.by.type">
		<query-param name="transactionType" type="int" />
		<query-param name="company" type="Company" />
		select t.number from com.vimukti.accounter.core.Transaction t where
		t.type =:transactionType and t.company=:company
	</query>

	<query name="getFlow.by.Id.from.Account">
		<query-param name="company" type="Company" />
		select a.flow from com.vimukti.accounter.core.Account
		a where a.id=
		(select max(a1.id) from
		com.vimukti.accounter.core.Account a1 where
		a1.company=:company and a1.parent is null and a1.flow is not null)
	</query>

	<query name="getCount.from.Account.and.parent">
		<query-param name="parentId" type="long" />
		<query-param name="company" type="Company" />
		select count(*) from com.vimukti.accounter.core.Account a where
		a.parent.id=:parentId and a.company=:company
	</query>


	<query name="getAllUsers">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.User user where user.company=:company
	</query>

	<query name="getPayBill.form.accountId.and.status">
		<query-param name="accountId" type="long" />
		<query-param name="status" type="int" />
		<query-param name="tobePrinted" type="encryptedstring" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.PayBill pst where pst.company=:company
		and pst.payFrom.id =:accountId and pst.checkNumber=:tobePrinted and
		pst.saveStatus not in (204,201) and pst.status
		=:status
	</query>

	<query name="getVendorPayment.form.accountId.and.status">
		<query-param name="accountId" type="long" />
		<query-param name="status" type="int" />
		<query-param name="tobePrinted" type="encryptedstring" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.VendorPrePayment pst where
		pst.company=:company
		and pst.payFrom.id =:accountId and
		pst.saveStatus not in (204,201) and pst.status
		=:status and
		pst.checkNumber=:tobePrinted
	</query>

	<query name="getReceiveVAT.form.accountId.and.status">
		<query-param name="accountId" type="long" />
		<query-param name="status" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.ReceiveVAT rv where
		rv.company=:company and rv.checkNumber!=:tobePrinted and
		rv.depositIn.id
		=:accountId and
		rv.saveStatus!=204
		and rv.status =:status
	</query>

	<query name="getCreditCardCharge.form.accountId.and.status">
		<query-param name="accountId" type="long" />
		<query-param name="status" type="int" />
		<query-param name="tobePrinted" type="encryptedstring" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.CreditCardCharge pst where
		pst.company=:company and
		pst.payFrom.id =:accountId and
		pst.checkNumber=:tobePrinted and
		pst.saveStatus not in (204,201)
		and pst.status
		=:status
	</query>

	<query name="getCashPurchase.form.accountId.and.status">
		<query-param name="accountId" type="long" />
		<query-param name="status" type="int" />
		<query-param name="tobePrinted" type="encryptedstring" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.CashPurchase pst where
		pst.company=:company and pst.payFrom.id
		=:accountId and
		pst.checkNumber=:tobePrinted and
		pst.saveStatus not in (204,201) and pst.status
		=:status
	</query>

	<query name="getCustomerPrePayment.form.accountId.and.status">
		<query-param name="accountId" type="long" />
		<query-param name="status" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.CustomerPrePayment cpp where
		cpp.company=:company and
		cpp.depositIn.id =:accountId and
		cpp.saveStatus!=204
		and cpp.status
		=:status
	</query>

	<query name="getCashPurchase.form.status">
		<query-param name="status" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.CashPurchase cc where
		cc.company=:company and cc.status
		=:status
	</query>

	<query name="getCreditCardCharge.form.status">
		<query-param name="status" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.CreditCardCharge cc where
		cc.status=:status
	</query>

	<query name="getPayBill.form.status">
		<query-param name="status" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.PayBill pb where pb.company=:company
		and
		pb.status =:status
	</query>

	<query name="getVendorPayment.form.status">
		<query-param name="status" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.VendorPrePayment pb where
		pb.company=:company
		and
		pb.status =:status
	</query>

	<query name="getFlowList.form.Account.byId">
		<query-param name="parentId" type="long" />
		<query-param name="flow" type="string" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Account a where a.company=:company and
		a.parent.id=:parentId and a.flow !=:flow order by a.id
	</query>

	<query name="getListofNames.from.customerGroup">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		from com.vimukti.accounter.core.CustomerGroup C where
		C.company=:company and C.name=:name
	</query>

	<query name="getNameofBank.from.Bank">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		from com.vimukti.accounter.core.Bank B where
		B.name=:name and
		B.company=:company
	</query>

	<query name="getMaxDepreciation.from.Depreciation.byStatus">
		<query-param name="company" type="Company" />
		<query-param name="depreciationFor" type="int" />
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.Depreciation d where
		d.company=:company and
		d.id=((select
		max(d1.id) from
		com.vimukti.accounter.core.Depreciation
		d1 where d1.company=:company
		and
		d1.depreciationFor =
		:depreciationFor and d1.status=:status))
	</query>

	<query name="getDepreciation.from.DepreciationFom.andStatus">
		<query-param name="company" type="Company" />
		<query-param name="depreciationFrom" type="int" />
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.Depreciation d where
		d.depreciateFrom
		>=:depreciationFrom and d.status=:status
	</query>

	<query name="getTransaction.by.Transactiondates">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Transaction t where t.company=:company
		and t.transactionDate between :startDate and :endDate
	</query>

	<query name="getFisacalyear.by.Startdate">
		<query-param name="status" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.FiscalYear f where f.company=:company
		order by f.startDate
	</query>

	<query name="getItem.by.Name">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		from com.vimukti.accounter.core.Item I where
		I.company=:company and
		I.name=:name
	</query>

	<query name="getRecurringTransaction.by.Name">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.RecurringTransaction r where
		r.company=:company and
		r.name=:name and r.id !=:id
	</query>

	<query name="getNameofAccount.by.Name">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		from com.vimukti.accounter.core.Account a where a.company=:company and
		a.name =:name
	</query>

	<query name="getPaymentTerms.by.Name">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		from com.vimukti.accounter.core.PaymentTerms P where
		P.company=:company and P.name=:name
	</query>

	<query name="getShippingmethod.by.Name">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		from com.vimukti.accounter.core.ShippingMethod S
		where
		S.company=:company and S.name=:name
	</query>

	<query name="getShippingTerms.by.Name">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		from com.vimukti.accounter.core.ShippingTerms S where
		S.company=:company and S.name=:name
	</query>

	<query name="getTaxAgency.by.Name">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		from com.vimukti.accounter.core.TAXAgency V where V.company=:company
		and V.name=:name
	</query>

	<query name="getTaxCode.by.id">
		<query-param name="company" type="Company" />
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.TAXCode t where
		t.company=:company and
		t.id =:id
	</query>

	<query name="getTaxACode.inTaxitem.by.id">
		<query-param name="id" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXCode t where
		t.company=:company and
		t.id =:id
	</query>

	<query name="getTaxrate.by.TransactioId.and.Vatreturn">
		<query-param name="company" type="Company" />
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.TAXRateCalculation vr
		where
		vr.taxItem.company=:company and vr.transaction.id=:id
		and
		vr.taxReturn
		is not null
	</query>

	<query name="getTaxAdjustment.by.dates">
		<query-param name="company" type="Company" />
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.taxItem.company=:company and
		v.transactionDate between :fromDate and
		:toDate
	</query>

	<query name="getTaxrateCalc.by.taxitem.and.details">
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="vatAgency" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation vr where
		vr.taxItem.company=:company and vr.taxItem
		is not null and
		vr.taxAgency.id=:vatAgency and vr.transactionDate
		&lt;=:toDate and
		vr.taxReturn is null
	</query>

	<query name="getTaxrateCalc.by.vatitem.and.details">
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="vatAgency" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation vr where
		vr.taxItem.company=:company and vr.taxItem
		is not null and
		vr.taxItem.taxAgency.id=:vatAgency and
		vr.transactionDate &gt; :toDate
		and vr.taxReturn is null
	</query>

	<query name="getVendor.by.name">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		from com.vimukti.accounter.core.Vendor V where
		V.company=:company and
		V.name=:name
	</query>

	<query name="getVendorGroup.by.name">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		from com.vimukti.accounter.core.VendorGroup V where V.company=:company
		and V.name=:name
	</query>

	<query name="getFixedAsset.by.statusAnd.purchaseDate">
		<query-param name="company" type="Company" />
		<query-param name="date" type="long" />
		from com.vimukti.accounter.core.FixedAsset f where f.company=:company
		and
		f.status = 2 and
		f.purchaseDate &lt;=:date
	</query>

	<query name="getAccount.by.idInAccountList">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Account a where a.company=:company and
		a.id in (:accountsList)
	</query>

	<query name="getDepreciation.by.ToandStatus">
		<query-param name="company" type="Company" />
		<query-param name="deprediationTo" type="long" />
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.Depreciation d where
		d.company=:company and
		d.depreciateTo >= :deprediationTo and
		d.status=:status
	</query>

	<query name="getAccount.by.id">
		<query-param name="company" type="Company" />
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.Account a where a.id
		=:id and
		a.company=:company
	</query>

	<query name="getTaxCalc.by.TaxAgencyId.and.withOtherDetails">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="taxAgency" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation vr where
		vr.taxItem.company=:company and
		vr.taxItem.taxAgency.id=:taxAgency and
		vr.taxItem is not null and
		vr.transactionDate between :fromDate and
		:toDate
		group by
		vr.id,vr.taxItem order by vr.taxItem
	</query>

	<query name="getTaxrateCalc.by.TaxAgencyandItem.and.Dates">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation vr where
		vr.taxItem
		is not null and vr.taxItem.company=:company and vr.transactionDate
		between :fromDate and :toDate group by
		vr.id,vr.taxItem order by
		vr.taxItem
	</query>

	<query name="getTaxadjustment.by.allDetails.withOrder">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="taxAgency" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.taxItem.company=:company and
		v.taxItem.taxAgency.id=:taxAgency and
		v.transactionDate between
		:fromDate and :toDate order by v.taxItem
	</query>

	<query name="getTaxadjustment.by.betweenDates">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.taxItem.company=:company and
		v.transactionDate between :fromDate and
		:toDate
		order by v.taxItem
	</query>

	<query name="getVat.by.taxAgency.and.VatPeriod">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="taxAgency" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXReturn v where v.company=:company
		and
		v.taxAgency.id=:taxAgency and v.periodEndDate between :fromDate
		and
		:toDate
	</query>

	<query name="getVat.by.BetweenendDates">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXReturn v where v.company=:company
		and v.periodEndDate between :fromDate and :toDate
	</query>

	<query name="getAccount.by.name.and.type">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		<query-param name="type" type="int" />
		from com.vimukti.accounter.core.Account a where a.company=:company and
		a.name =:name and a.type =:type
	</query>

	<query name="getAccount.by.id.and.type">
		<query-param name="company" type="Company" />
		<query-param name="type" type="int" />
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.Account a where a.company=:company and
		a.id =:id and a.type =:type
	</query>

	<query name="getcreditandPayments.by.Payieeid.and.balance">
		<query-param name="company" type="Company" />
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.CreditsAndPayments cp
		where
		cp.payee.company=:company and cp.payee.id
		=:id and cp.balance > 0.0
	</query>

	<query name="getFisacalyear">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.FiscalYear fs where
		fs.company=:company
	</query>

	<query name="getTAXAdjustments.by.taxAgencyIdand.Date">
		<query-param name="vatAgency" type="int" />
		<query-param name="fromDate" type="LongUseType" />
		<query-param name="toDate" type="LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.taxItem.company=:company and
		v.taxItem.taxAgency.id=:vatAgency and
		v.transactionDate between
		:fromDate and :toDate and v.isFiled = false
	</query>

	<query name="getTAXRateCalculations.by.taxAgencyIdand.Date">
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="vatAgency" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation vr where vr.taxItem
		is not null and vr.taxItem.company=:company and
		vr.taxItem.taxAgency.id=:vatAgency and
		vr.transactionDate between
		:fromDate and :toDate
		and vr.taxReturn is null
	</query>


	<query name="getDepreciation">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Depreciation d where
		d.company=:company and
		d.id =(select
		min(d1.id) from
		com.vimukti.accounter.core.Depreciation
		d1 where d1.company=:company)
	</query>


	<query name="getTransactionDate.by.dates">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Transaction t where t.type in
		(4,5,8,10) and t.transactionDate between :startDate and :endDate and
		t.company=:company
	</query>

	<query name="getDepreciation.by.depreciateFrom">
		<query-param name="depreciateFrom" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="status" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Depreciation d where
		d.depreciateFrom
		>= depreciateFrom and d.status=status and d.company =:company
	</query>

	<query name="getWriteCheck.by.status">
		<query-param name="status" type="int" />
		<query-param name="company" type="Company" />

		from com.vimukti.accounter.core.WriteCheck wc where
		wc.status =:status
		and wc.company=:company
	</query>

	<query name="getWriteCheck.by.bankacountIdandstatus">
		<query-param name="id" type="long" />
		<query-param name="status" type="int" />
		<query-param name="tobePrinted" type="encryptedstring" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.WriteCheck wc where
		wc.bankAccount.id=:id and wc.saveStatus not in (204,201) and wc.status=:status and
		wc.checkNumber=:tobePrinted and
		wc.company=:company
	</query>

	<query name="getCustomerRefund.by.isvoidandstatus">
		<query-param name="status" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.CustomerRefund cr
		where
		cr.saveStatus!=204
		and cr.status=status and cr.company=:company
	</query>

	<query name="getPaySalesTax.by.status">
		<query-param name="status" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.PayTAX pst where
		pst.status =
		status and
		pst.company=:company
	</query>

	<query name="getCustomerRefund.by.payFromand.isvoid.status">
		<query-param name="id" type="long" />
		<query-param name="status" type="int" />
		<query-param name="tobePrinted" type="encryptedstring" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.CustomerRefund cr
		where cr.payFrom.id
		=:id and cr.saveStatus not in (204,201) and cr.status=:status and
		cr.checkNumber=:tobePrinted and
		cr.company=:company
	</query>

	<query name="getPayTax.by.payFromand.isvoid.status">
		<query-param name="id" type="long" />
		<query-param name="status" type="int" />
		<query-param name="tobePrinted" type="encryptedstring" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.PayTAX pst where
		pst.payFrom.id =
		:id
		and pst.saveStatus not in (204,201) and pst.status =:status and
		pst.checkNumber=:tobePrinted and
		pst.company=:company
	</query>

	<query name="getCreditsAndPayments.by.check.payeeidandbalanceid">
		<query-param name="id" type="long" />
		<query-param name="transactionId" type="long" />
		<query-param name="company" type="Company" />
		select cp from com.vimukti.accounter.core.CreditsAndPayments cp
		left
		join cp.transactionCreditsAndPayments as tcap
		left join
		tcap.transactionPayBill as tpb
		left join tcap.transactionReceivePayment
		as trp
		where cp.payee.id
		=:id and ((cp.balance > 0.0) or
		(trp.receivePayment.id=:transactionId)
		or
		(tpb.payBill.id=:transactionId))
		and cp.transaction.id!=:transactionId
		and cp.payee.company=:company
	</query>

	<query name="getCustomerRefund">
		<query-param name="company" type="Company" />
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="viewId" type="int" />
		from com.vimukti.accounter.core.CustomerRefund cr where
		((cr.status=:viewId and cr.saveStatus not in (204,201))
		or (:viewId =3 and cr.saveStatus=204) or
		(:viewId =4 and cr.saveStatus=201) or :viewId = 1000) and
		cr.company=:company and
		cr.saveStatus!=202 and
		cr.transactionDate
		between :fromDate and
		:toDate
		order by
		cr.transactionDate desc,cr.number desc
	</query>

	<query name="getWriteCheck.by.payToType">
		<query-param name="company" type="Company" />
		<query-param name="type" type="int" />
		from com.vimukti.accounter.core.WriteCheck wc where
		wc.company=:company and wc.payToType=:type order by wc.transactionDate
		desc
	</query>

	<query name="getFixedAsset.by.checkStatusand.purchaseDate">
		<query-param name="company" type="Company" />
		<query-param name="date" type="long" />
		from com.vimukti.accounter.core.FixedAsset f where f.company=:company
		and f.status = 2 and f.purchaseDate &lt;=:date
		order by
		f.lastModifiedDate desc
	</query>

	<query name="getDepreciation.by.check.idandStatus.depreciationFor">
		<query-param name="company" type="Company" />
		<query-param name="depreciationFor" type="int" />
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.Depreciation d where
		d.company=:company and
		d.id=((select
		max(d1.id) from
		com.vimukti.accounter.core.Depreciation
		d1 where d1.company=:company
		and
		d1.depreciationFor
		=:depreciationFor and d1.status=:status))
	</query>

	<query
		name="getTAXRateCalculation.by.check.taxItemandDates.orderBy.transactionItem">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation v
		where v.taxItem is
		not null and v.taxItem.company=:company and v.transactionDate between
		:startDate
		and :endDate group
		by v.id
	</query>

	<query name="getTAXRateCalculation.by.check.taxItemandDates">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation v where v.taxItem
		is not null and v.taxItem.company=:company and v.transactionDate
		between :startDate and :endDate group by v.id
	</query>

	<query name="getCashPurchase.by.employeeNmae.expenseStatusandtype">
		<query-param name="employeeName" type="String" />
		<query-param name="type" type="int" />
		<query-param name="expenseStatus" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.CashPurchase cp where
		cp.company=:company and
		cp.expenseStatus=:expenseStatus
		and
		cp.type=:type and cp.saveStatus!=204
	</query>

	<query name="getCashPurchase.by.expenseStatusandtype">
		<query-param name="type" type="int" />
		<query-param name="expenseStatus" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.CashPurchase cp where
		cp.company=:company and
		cp.expenseStatus=:expenseStatus and
		cp.type=:type and cp.saveStatus!=204
	</query>

	<query name="getEstimate">
		<query-param name="company" type="Company" />
		<query-param name="estimateType" type="int" />
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="status" type="int" />
		from com.vimukti.accounter.core.Estimate e
		where e.company=:company
		and
		e.estimateType=:estimateType and e.saveStatus
		!= 202 and
		(:status=-1 or
		:status=e.saveStatus or
		(:status=e.status and e.saveStatus!=201 and
		e.saveStatus!=204))
		and
		e.transactionDate
		between :fromDate and :toDate
		and e.saveStatus!=202
		order by
		e.transactionDate desc, e.number desc
	</query>

	<query name="getExpiredEstimate">
		<query-param name="company" type="Company" />
		<query-param name="estimateType" type="int" />
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="today" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.Estimate e where e.company=:company
		and e.estimateType=:estimateType and e.saveStatus != 202
		and
		e.transactionDate between :fromDate and :toDate and e.deliveryDate
		&lt;:today and e.usedInvoice =null
		order by e.transactionDate desc,e.number desc
	</query>

	<query name="getEstimate.by.check.id.status">
		<query-param name="company" type="Company" />
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.Estimate e
		where e.company=:company and
		e.customer.id =:id and e.status = 0 and e.saveStatus != 202
	</query>

	<query name="getFiscalYear.by.check.status.startDate">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.FiscalYear fy where
		fy.company=:company and
		fy.status = 1 order by fy.startDate
	</query>

	<query name="getJobsList">
		<query-param name="company" type="Company" />
		from
		com.vimukti.accounter.core.Job j where j.company=:company
		order by
		j.id
	</query>

	<query name="getTransaction.by.check.type.number.id">
		<query-param name="company" type="Company" />
		<query-param name="type" type="int" />
		<query-param name="number" type="String" />
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.Transaction t
		where t.company =:company
		and
		t.type =:type and
		t.number =:number and t.id !=:id
	</query>
	<query name="get.PayBills.by.tds">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.PayBill b
		where b.company=:company and
		b.tdsTaxItem !=null
	</query>

	<query name="getJournalEntry">
		<query-param name="company" type="Company" />
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.JournalEntry j where
		j.company=:company and j.saveStatus != 202
		and j.transactionDate
		between :fromDate and :toDate
		order by j.transactionDate desc, j.number desc
	</query>

	<query name="getJournalEntry.by.id">
		<query-param name="id" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.JournalEntry j where
		j.id =:id and
		j.company=:company
	</query>

	<query name="getTAXRateCalculation.by.check.idandvatReturn">
		<query-param name="id" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation vr
		where
		vr.transaction.id=:id and vr.taxReturn is not null and
		vr.transaction.company=:company
	</query>

	<query name="getVATReturn.by.check.BalanceGraterThanzero">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXReturn v where
		v.balance
		&gt;0 and
		v.company=:company
	</query>

	<query name="getVATReturn.by.check.BalancelessThanzero">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXReturn v where
		v.balance
		&lt;0 and
		v.company=:company
	</query>

	<query name="getVATReturn.by.taxagencyandenddate">
		<query-param name="taxAgency" type="int" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXReturn vt where
		vt.taxAgency.id=:taxAgency and vt.periodEndDate=:endDate and
		vt.company=:company
	</query>

	<query name="getVATReturn.by.enddate">
		<query-param name="company" type="Company" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		from com.vimukti.accounter.core.TAXReturn v where v.periodEndDate =
		:endDate and v.company=:company
	</query>

	<query name="getItem.by.check.isIBuyThisItemisTrue">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Item item where
		item.isIBuyThisItem =
		true and item.company=:company
	</query>

	<query name="getTAXRateCalculation.by.datesand.orderby.transactionItem">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation v
		where v.taxItem is
		not null and v.transactionDate between :startDate
		and :endDate and
		v.taxItem.company=:company group by v.id
	</query>

	<query name="getItem.by.checkisISellThisItemisTrue">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Item item where
		item.isISellThisItem =
		true and item.company=:company
	</query>

	<query name="getFixedAsset.by.checkingstatus">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.FixedAsset f where
		f.status = 3 and
		f.company=:company
	</query>

	<query name="getAccount">
		<query-param name="type1" type="int" />
		<query-param name="type2" type="int" />
		<query-param name="type3" type="int" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Account a where
		a.type not in
		(type1,type2,type3) and a.company=:company
	</query>


	<query name="getTransactionMakeDeposit.by.checking.isDepositedandisVoid">
		<query-param name="company" type="Company" />
		from
		com.vimukti.accounter.core.TransactionMakeDepositEntries at where
		at.transaction.isDeposited = false and at.transaction.saveStatus!=204
		and at.transaction.company=:company
	</query>

	<query name="getTAXAdjustment.checkingby.transactionDate">
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.transactionDate &lt;=:endDate and v.company=:company
	</query>

	<query name="getTAXAdjustment.checkingby.VATperiodEndDate">
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXReturn v where v.periodEndDate
		&lt;=:endDate and v.company=:company
	</query>

	<query name="getTAXRateCalculation.by.datesand.vatReturn">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation v where v.taxItem
		is not null and v.transactionDate between :startDate and :endDate and
		v.taxReturn is null and v.taxItem.company=:company order by v.taxItem
	</query>



	<query name="getTAXRateCalculation.by.dates">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation v where v.taxItem
		is not null and v.transactionDate between :startDate and :endDate and
		v.taxItem.company=:company order by v.taxItem
	</query>

	<query name="getTAXRateCalculation.by.dates.and.taxAgency">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		<query-param name="taxAgency" type="long" />
		select sum(v.taxAmount), sum(v.lineTotal), max(v.transaction),
		v.taxItem, v.isVATGroupEntry from
		com.vimukti.accounter.core.TAXRateCalculation v
		where v.taxItem is not
		null and v.transactionDate between :startDate
		and :endDate and
		v.taxItem.company=:company and
		v.taxItem.taxAgency.id=:taxAgency group
		by v.taxItem,
		v.transaction, v.isVATGroupEntry order by v.taxItem

	</query>

	<query name="getTAXRateCalculation.by.dates.and.taxAgency.of.taxException">
		<query-param name="company" type="Company" />
		<query-param name="taxAgency" type="long" />
		select sum(v.taxAmount), sum(v.lineTotal), max(v.transaction),
		v.taxItem, v.isVATGroupEntry from
		com.vimukti.accounter.core.TAXRateCalculation v
		where v.taxItem is not
		null and v.transactionDate &lt; (select
		max(transactionDate) from
		com.vimukti.accounter.core.TAXReturn
		a where a.taxAgency.id=:taxAgency
		and a.company=:company) and
		v.taxItem.company=:company and
		v.taxItem.taxAgency.id=:taxAgency and
		taxReturn is null group
		by
		v.taxItem, v.transaction,v.isVATGroupEntry
		order by v.taxItem
	</query>


	<query name="getTAXAdjustment.by.taxAgencyidanddates">
		<query-param name="taxAgency" type="long" />
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.taxItem.taxAgency.id=:taxAgency and v.transactionDate between
		:fromDate and :toDate and v.isFiled = false and v.company=:company
		order by v.taxItem
	</query>

	<query
		name="getTAXAdjustment.by.dates.orderby.taxItemNameand.TransactionDate">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.transactionDate between :startDate and :endDate and
		v.company=:company order by
		v.taxItem.name,
		v.transactionDate
	</query>

	<query name="getTAXRateCalculation.by.dates.groupedByIdtransactionItem">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation v where
		v.taxItem.name=:taxItemName and v.transactionDate between :startDate
		and :endDate and v.taxItem.company =:company order by v.transactionDate asc
	</query>


	<query name="getTAXRateCalculation.by.dates.orderbytaxItem.name">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXRateCalculation v where
		v.taxItem.company=:company and v.taxItem
		is not null and
		v.transactionDate
		between
		:startDate and :endDate order
		by
		v.taxItem.name
	</query>

	<query name="getFixedAsset.by.purchaseDate">
		<query-param name="purchaseDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.FixedAsset fa where
		fa.purchaseDate
		&lt;=purchaseDate and fa.company=:company
	</query>

	<query name="getFiscalYearf">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.FiscalYear f where f.company=:company
	</query>

	<query name="deleteTAXCode">
		<query-param name="id" type="long" />
		<query-param name="company" type="Company" />
		delete from com.vimukti.accounter.core.TAXCode t
		where t.id=id and
		t.company=:company
	</query>

	<query name="get.developer.by.client">
		<query-param name="client" type="com.vimukti.accounter.core.Client" />
		from com.vimukti.accounter.core.Developer d where d.client =:client
	</query>

	<query name="get.developer.by.id">
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.Developer d where d.id=:id
	</query>

	<query name="get.developer.by.apiKey">
		<query-param name="apiKey" type="String" />
		from com.vimukti.accounter.core.Developer d where d.apiKey=:apiKey
	</query>

	<query name="get.ServerCompany.by.companyId.and.client">
		<query-param name="id" type="Long" />
		<query-param name="client" type="com.vimukti.accounter.core.Client" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Company sc left join sc.users
		u left
		join u.client c where sc.id=:id and c=:client
	</query>

	<query name="get.All.Units">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Unit where company=:company
	</query>

	<query name="adminUserForEmailId">
		<query-param name="company" type="Company" />
		<query-param name="emailid" type="string" />
		from com.vimukti.accounter.core.User user left join user.client c
		where c.emailId=:emailid
		and user.company=:company
		and user.isAdmin
		=true
	</query>

	<query name="get.Admin.Users">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.User user where user.company=:company
		and user.isAdmin =true and user.isDeleted = false
	</query>

	<query name="getTAXAdjustment.by.dates.and.taxItemName">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="taxItemName" type="String" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.taxItem.name=:taxItemName and v.transactionDate between :startDate
		and :endDate and v.company=:company order by v.taxItem.name,
		v.transactionDate asc
	</query>

	<query name="getTAXAdjustment.by.dates.and.taxAgency">
		<query-param name="startDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="endDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="taxAgency" type="Long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXAdjustment v where
		v.taxItem.taxAgency.id=:taxAgency and v.transactionDate between
		:startDate
		and :endDate and v.company=:company and v.saveStatus != 204
		and v.saveStatus != 201 and
		v.saveStatus != 202 order by
		v.taxItem.name,
		v.transactionDate
	</query>

	<query name="getTAXCode.for.TAXItemGroup">
		<query-param name="id" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXCode t where
		t.TAXItemGrpForSales.id=:id and t.company=:company
	</query>

	<query name="get.selected.vendors.enterbills.list">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.EnterBill e where
		e.vendor.isTrackPaymentsFor1099=true and e.company=:company
		and
		e.saveStatus!=204
	</query>

	<query name="get.notselected.vendors.enterbills.list">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.EnterBill e where
		e.vendor.isTrackPaymentsFor1099=false and e.company=:company and
		e.saveStatus!=204
	</query>

	<query name="get.1099.vendors">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Vendor v where
		v.isTrackPaymentsFor1099=true and v.company=:company
	</query>

	<query name="get.selected.vendors.enterbills.list.by.id">
		<query-param name="vendorId" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.EnterBill e where
		e.vendor.id=:vendorId and e.company=:company and e.saveStatus!=204
	</query>

	<query name="get.Activities.by.date">
		<query-param name="fromDate" type="timestamp" />
		<query-param name="endDate" type="timestamp" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Activity at where
		at.time between
		:fromDate and :endDate and at.company=:company order by at.time desc
	</query>

	<query name="get.reconciliations.by.accountId">
		<query-param name="accountID" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Reconciliation re where
		re.account.id=:accountID and re.company=:company
	</query>



	<query name="get.OpeningBalance.Of.Account.from.Reconciliations">
		<query-param name="accountID" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Reconciliation re where
		re.account.id=:accountID and re.company=:company order by re.id desc
	</query>

	<query name="get.all.activities.of.transaction">
		<query-param name="transactionId" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Activity act where
		act.objectID=:transactionId and act.company=:company
	</query>

	<query name="getJournalEntryForCustomer">
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.JournalEntry je where
		je.involvedPayee.id=:id
	</query>

	<query name="getJournalEntryForAccount">
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.JournalEntry je where
		je.involvedAccount.id=:id
	</query>

	<query name="get.last.taxReturn.endDate">
		<query-param name="company" type="Company" />
		<query-param name="taxAgency" type="long" />
		select max(t.periodEndDate)
		from
		com.vimukti.accounter.core.TAXReturn t
		where
		t.company=:company and t.taxAgency.id=:taxAgency
	</query>

	<query name="getLastTAXReturn.Entries.by.taxAgency">
		<query-param name="company" type="Company" />
		<query-param name="taxAgency" type="long" />
		from com.vimukti.accounter.core.TAXReturnEntry tre where
		tre.taxReturn.id = (select
		max(t.id) from
		com.vimukti.accounter.core.TAXReturn
		t where t.company=:company and
		t.taxAgency.id=:taxAgency)
	</query>

	<sql-query name="updateTaxCodeSalesTaxRate">
		<query-param name="id" type="long" />
		<query-param name="salesTaxRate" type="double" />
		<query-param name="companyId" type="long" />
		UPDATE TAX_CODE SET SALES_TAX_RATE =:salesTaxRate
		WHERE
		COMPANY_ID=:companyId AND
		TAXITEMGROUP_SALES =:id
	</sql-query>

	<sql-query name="updateTaxCodePurchaseTaxRate">
		<query-param name="id" type="long" />
		<query-param name="purchaseTaxRate" type="double" />
		<query-param name="companyId" type="long" />
		UPDATE TAX_CODE SET PURCHASE_TAX_RATE =:purchaseTaxRate
		WHERE
		COMPANY_ID=:companyId AND
		TAXITEMGROUP_PURCHASES =:id
	</sql-query>

	<sql-query name="getEmailIdFromClient">
		<query-param name="emailId" type="string" />
		<query-param name="password" type="string" />

		SELECT EMAIL_ID FROM CLIENT C WHERE C.EMAIL_ID=:emailId AND
		(C.PASSWORD=:password OR (:password='' AND C.PASSWORD IS NULL))
	</sql-query>

	<sql-query name="updateUserSecret">
		<query-param name="userId" type="long" />
		<query-param name="secret" type="binary" />
		update users set secret_key=:secret where id=:userId
	</sql-query>

	<sql-query name="setSecretNull">
		<query-param name="emailId" type="string" />
		update users set secret_key=null where client_id=(select id from
		client where email_id=:emailId)
	</sql-query>


	<sql-query name="getUserSecrets">
		<query-param name="emailId" type="String" />
		<return-scalar column="ID" type="long" />
		<return-scalar column="SECRET" type="binary" />
		SELECT U.ID AS ID,U.SECRET_KEY AS SECRET FROM USERS U WHERE
		CLIENT_ID=(SELECT ID FROM CLIENT WHERE EMAIL_ID=:emailId)
	</sql-query>

	<sql-query name="updatePasswordForClient">
		<query-param name="newPassword" type="string" />
		<query-param name="emailId" type="string" />
		UPDATE CLIENT SET PASSWORD=:newPassword WHERE EMAIL_ID=:emailId
	</sql-query>

	<sql-query name="getCountOfActivity">
		<query-param name="companyId" type="long" />
		SELECT COUNT(*) FROM ACTIVITY A WHERE A.COMPANY_ID=:companyId
	</sql-query>

	<sql-query name="getCountOfActivityBetweenDates">
		<query-param name="fromDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />
		SELECT COUNT(*) FROM ACTIVITY A WHERE A.TIME_STAMP BETWEEN :fromDate
		AND :endDate AND A.COMPANY_ID=:companyId
	</sql-query>

	<sql-query name="getCreditCardChargesThisMonth">
		<query-param name="month" type="int" />
		<query-param name="companyId" type="long" />
		SELECT CCC.ID, CCC.VERSION, CCC.CREATED_DATE, CCC.MODIFIED_ON,
		CCC.VENDOR_ID, CCC.CONTACT_ID,
		CCC.VENDOR_ADDRESS_ID,
		CCC.PAYMENT_METHOD_ID, CCC.PAYFROM_ACCOUNT_ID, CCC.CHECK_NUMBER,
		CCC.DELIVERY_DATE, CCC.MEMO, CCC.REFERENCE, CCC.TOTAL FROM
		CREDIT_CARD_CHARGES CCC JOIN
		TRANSACTION T ON T.ID = CCC.ID AND
		MONTH(T.T_DATE) =:month AND YEAR(T.T_DATE)
		=:month WHERE
		T.COMPANY_ID=:companyId
	</sql-query>

	<sql-query name="getEmployeeNames">
		<query-param name="companyId" type="long" />
		<return-scalar column="name" type="string" />

		SELECT C.FULL_NAME as name FROM USERS empd LEFT OUTER JOIN
		CLIENT C ON
		C.ID = empd.CLIENT_ID WHERE empd.COMPANY_ID=:companyId
	</sql-query>

	<sql-query name="getMonthFromAccountAmounts">

		select month from ACCOUNT_AMOUNTS group by
		month order by month
	</sql-query>

	<sql-query name="getWarehouses">
		<query-param name="companyId" type="long" />
		<return-scalar column="name" type="string" />
		select * from WAREHOUSE group by name order by name
	</sql-query>

	<query name="getNews">
		from com.vimukti.accounter.core.News
	</query>

	<sql-query name="getItemStatuses">
		<query-param name="wareHouse" type="long" />
		<query-param name="companyId" type="long" />
		
		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="QTY_VALUE" type="double" />
		<return-scalar column="QTY_UNIT" type="long" />
		
		SELECT I.id               AS ITEM_ID,
		       SUM(qty_value)     AS QTY_VALUE,
		       I.on_hand_qty_unit AS QTY_UNIT
		FROM   item_update IU
		       left join item I
		              ON I.id = IU.item
		WHERE  ware_house = :wareHouse
		GROUP  BY I.id;  
		
	</sql-query>

	<query name="list.TAXReturns">
		<query-param name="company" type="Company" />
		<query-param name="viewType" type="int" />
		from com.vimukti.accounter.core.TAXReturn tr where
		tr.company=:company
		AND

		((1= :viewType AND tr.balance &lt;= 0) OR
		(2= :viewType AND
		tr.balance &gt; 0) OR
		(0= :viewType))

	</query>

	<query name="getStockTransfersList">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.StockTransfer st where
		st.company.id=:companyId order by st.lastModifiedDate desc
	</query>

	<query name="getStockAdjustmentsList">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		from com.vimukti.accounter.core.StockAdjustment st where st.transactionDate between
		:startDate and :endDate and st.company.id=:companyId
		order by st.lastModifiedDate desc
	</query>

	<query name="getAccountsOfType">
		<query-param name="companyId" type="long" />
		<query-param name="type" type="int" />
		from com.vimukti.accounter.core.Account a where a.type=:type and
		a.company.id =:companyId
		order by a.number desc
	</query>

	<sql-query name="getBankAccountsOfType">
		<query-param name="companyId" type="long" />
		<query-param name="isActive" type="boolean" />
		SELECT a.ID FROM ACCOUNT a WHERE a.A_TYPE IN(1,2,19) AND
		a.COMPANY_ID=:companyId AND A.IS_ACTIVE=:isActive
	</sql-query>

	<query name="getFiscalYears.of.company">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.FiscalYear f where f.company=:company
	</query>

	<!-- queries for item merging -->

	<!--<query name="update.merge.itembackup.old.tonew"> <query-param name="fromID" 
		type="long" /> <query-param name="toID" type="long" /> <query-param name="company" 
		type="Company" /> update com.vimukti.accounter.core.ItemBackUp set item.id=:toID 
		where item.id=:fromID and company=:company </query> -->

	<query name="update.merge.itemUpdates.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.itemUpdate set item.id=:toID where
		item.id=:fromID
	</query>

	<!-- <query name="update.merge.itemsalesorder.old.tonew"> <query-param name="fromID" 
		type="long" /> <query-param name="toID" type="long" /> <query-param name="company" 
		type="Company" /> update com.vimukti.accounter.core.SalesOrder set salesTaxItem.id=:toID 
		where salesTaxItem.id=:fromID and company=:company </query> -->

	<query name="update.merge.trasactionexpense.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.TransactionExpense set item.id=:toID
		where
		item.id=:fromID
	</query>

	<query name="update.merge.trasactionitem.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.TransactionItem set item.id=:toID
		where
		item.id=:fromID
	</query>

	<!-- queries for account merging -->

	<query name="update.merge.accounttransaction.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.AccountTransaction set
		account.id=:toID where
		account.id=:fromID and company=:company
	</query>

	<query name="update.merge.accountcustomercreditmemo.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.CustomerCreditMemo set
		account.id=:toID where
		account.id=:fromID and company=:company
	</query>

	<!-- <query name="update.merge.issuepayment.old.tonew"> <query-param name="fromID" 
		type="long" /> <query-param name="toID" type="long" /> <query-param name="company" 
		type="Company" /> update com.vimukti.accounter.core.IssuePayment set account.id=:toID 
		where account.id=:fromID and company=:company </query> -->

	<query name="update.merge.accounttrasactionexpense.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />

		update com.vimukti.accounter.core.TransactionExpense set
		account.id=:toID where
		account.id=:fromID
	</query>

	<query name="update.merge.payexpense.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.PayExpense set paidFrom.id=:toID
		where
		paidFrom.id=:fromID and company=:company
	</query>

	<query name="update.merge.accountreceivepayment.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.ReceivePayment set
		depositIn.id=:toID where
		depositIn.id=:fromID and company=:company
	</query>

	<query name="update.merge.transactionexpense.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.TransactionExpense set
		account.id=:toID where
		account.id=:fromID and company=:company
	</query>
	<query name="update.merge.transactionitem.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.TransactionItem set account.id=:toID
		where
		account.id=:fromID
	</query>
	<query name="update.merge.transactionitemeffectingAccount.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.TransactionItem set
		effectingAccount.id=:toID
		where
		effectingAccount.id=:fromID
	</query>
	<query name="update.merge.journalEntry.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.JournalEntry set
		involvedAccount.id=:toID
		where
		involvedAccount.id=:fromID
	</query>

	<query name="update.merge.transactionmakedepositentries.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.TransactionMakeDepositEntries set
		account.id=:toID where
		account.id=:fromID
	</query>

	<query name="update.merge.accountwritecheck.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.WriteCheck set bankAccount.id=:toID
		where
		bankAccount.id=:fromID and company=:company
	</query>

	<query name="update.merge.accounttaxrefund.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.ReceiveVAT set depositIn.id=:toID
		where
		depositIn.id=:fromID and company=:company
	</query>

	<query name="update.merge.accountpaytax.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.PayTAX set payFrom.id=:toID
		where
		payFrom.id=:fromID and company=:company
	</query>

	<query name="update.merge.accountcustomerrefud.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.CustomerRefund set payFrom.id=:toID
		where
		payFrom.id=:fromID and company=:company
	</query>

	<query name="update.merge.accountcustomerprepay.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.CustomerPrePayment set
		depositIn.id=:toID
		where
		depositIn.id=:fromID and company=:company
	</query>

	<query name="update.merge.accountvendorrprepay.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.PayBill set payFrom.id=:toID
		where
		payFrom.id=:fromID and company=:company
	</query>

	<query name="update.merge.accountcashpurchase.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.CashPurchase set payFrom.id=:toID
		where
		payFrom.id=:fromID and company=:company
	</query>

	<query name="update.merge.accountcashsale.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.CashSales set depositIn.id=:toID
		where
		depositIn.id=:fromID and company=:company
	</query>

	<query name="update.merge.accounttransferfundsto.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.TransferFund set depositIn.id=:toID
		where
		depositIn.id=:fromID and company=:company
	</query>

	<query name="update.merge.accounttransferfundsfrom.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		<query-param name="company" type="Company" />
		update com.vimukti.accounter.core.TransferFund set
		depositFrom.id=:toID
		where
		depositFrom.id=:fromID and company=:company
	</query>


	<query name="getCompany.has.recurrings">
		from com.vimukti.accounter.core.Company c
		where
		(select count(r.id) from
		com.vimukti.accounter.core.RecurringTransaction r
		where r.company.id =
		c.id and r.type !=2) > 0
	</query>

	<query name="getRecurrringsBeforeDate">
		<query-param name="date" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.RecurringTransaction r
		where
		r.company=:company and r.nextScheduleOn &lt;=:date and r.stopped =
		false
		and r.type !=2 and r.daysBeforeToRemind =0
	</query>

	<query name="getRecurrrings.remind.days.before">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.RecurringTransaction r
		where
		r.company=:company and r.stopped = false
		and r.type =1 and
		r.daysBeforeToRemind !=0
	</query>

	<query name="getRemindersByViewType">
		<query-param name="companyId" type="long" />
		<query-param name="viewType" type="int" />
		from com.vimukti.accounter.core.Reminder r
		where
		r.company.id=:companyId and r.recurringTransaction.transaction.type=:viewType order by r.transactionDate desc
	</query>
	
	<query name="getAllReminders">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.Reminder r
		where
		r.company.id=:companyId order by r.transactionDate desc
	</query>

	<query name="getEnterBillByEstimate">
		<query-param name="estimate" type="Estimate" />
		from com.vimukti.accounter.core.EnterBill eb left join eb.estimates es
		where es=:estimate
	</query>
	<query name="getWriteCheckByEstimate">
		<query-param name="estimate" type="Estimate" />
		from com.vimukti.accounter.core.WriteCheck wc left join wc.estimates
		es
		where es=:estimate
	</query>

	<query name="getCashPurchaseByEstimate">
		<query-param name="estimate" type="Estimate" />
		from com.vimukti.accounter.core.CashPurchase cp left join cp.estimates
		es
		where es=:estimate
	</query>

	<query name="getDepositByEstimate">
		<query-param name="estimate" type="Estimate" />
		from com.vimukti.accounter.core.MakeDeposit d left join d.estimates es
		where es=:estimate

	</query>

	<query name="getRecurring.for.template">
		<query-param name="templateId" type="long" />
		from com.vimukti.accounter.core.RecurringTransaction r
		where
		r.transaction.id =:templateId
	</query>

	<query name="getRecurringReminderTask">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.MessageOrTask m
		where m.contentType=1
		and m.company.id =:companyId
	</query>

	<query name="getAutomaticTransactionsMessage">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.MessageOrTask m
		where m.contentType=2
		and m.company.id =:companyId
	</query>

	<query name="getMessagesAndTasks">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.MessageOrTask m
		where m.company.id
		=:companyId
	</query>

	<query name="getTDSAgencyOfCompany">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXAgency ta where ta.taxType=4 and
		ta.company=:company
		order by ta.id
	</query>


	<query name="getCheckNumber">
		<query-param name="accountId" type="long" />
		<query-param name="companyId" type="long" />
		select a.lastCheckNum from com.vimukti.accounter.core.Account a
		where
		a.id=:accountId and a.company.id=:companyId
	</query>

	<query name="getTransaction.by.id">
		<query-param name="transactionId" type="long" />
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.Transaction t
		where t.id=:transactionId
		and t.company=:company
	</query>

	<query name="getTdsResposiblePersonDetails">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.TDSResponsiblePerson tc where
		tc.company.id=:companyId
	</query>

	<query name="getTdsDeductor">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.TDSDeductorMasters tc where
		tc.company.id=:companyId
	</query>

	<query name="getTdsChalanDetails">
		<query-param name="company" type="Company" />
		<query-param name="formNum" type="int" />
		<query-param name="quarter" type="int" />
		<query-param name="fromDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="toDate" type="com.vimukti.accounter.core.LongUseType" />
		<query-param name="startYear" type="int" />
		<query-param name="endYear" type="int" />
		from com.vimukti.accounter.core.TDSChalanDetail tc where
		tc.company=:company and tc.formType=:formNum and
		tc.chalanPeriod=:quarter 
		and tc.fromDate=:fromDate and tc.toDate=:toDate
		and tc.assesmentYearStart = :startYear and
		tc.assesmentYearEnd=:endYear
	</query>

	<query name="getTDSChallansForAckNo">
		<query-param name="ackNo" type="String" />
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.TDSChalanDetail tc where
		tc.company.id=:companyId and tc.etdsfillingAcknowledgementNo=:ackNo
	</query>

	<query name="getTdsChalanDetailsByAcknowledgementNo">
		<query-param name="company" type="Company" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="acknowledgementNo" type="String" />
		from com.vimukti.accounter.core.TDSChalanDetail tc where
		tc.company=:company and tc.dateTaxPaid >=:startDate
		and tc.dateTaxPaid
		&lt;=:endDate
		and
		tc.etdsfillingAcknowledgementNo=:acknowledgementNo
	</query>

	<query name="getTdsChalanDetailsByAssesmentYear">
		<query-param name="company" type="Company" />
		<query-param name="startYear" type="int" />
		<query-param name="endYear" type="int" />
		<query-param name="acknowledgementNo" type="String" />
		from com.vimukti.accounter.core.TDSChalanDetail tc where
		tc.company=:company and tc.assesmentYearStart = :startYear and
		tc.assesmentYearEnd=:endYear
		and
		tc.etdsfillingAcknowledgementNo=:acknowledgementNo
	</query>


	<query name="getCustomer.by.name">
		<query-param name="company" type="Company" />
		<query-param name="name" type="String" />
		from com.vimukti.accounter.core.Customer V where
		V.company=:company and
		V.name=:name
	</query>

	<query name="list.TAXReturn.orderByEndDate">
		<query-param name="company" type="Company" />
		from com.vimukti.accounter.core.TAXReturn tr
		where tr.company=:company
		order by tr.periodEndDate
	</query>

	<query name="getTaxrateCalc.of.TAXReturn">
		<query-param name="taxReturnId" type="long" />
		from com.vimukti.accounter.core.TAXRateCalculation trc where
		trc.taxReturn.id=:taxReturnId
	</query>

	<!-- <query name="getbankStatements"> <query-param name="company" type="Company" 
		/> <query-param name="accountId" type="long" /> from Statement where company=:company 
		and account_id=:accountId </query> -->

	<query name="list.bankStatement">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.Statement s where
		s.company.id=:companyId
		order by s.id
	</query>

	<query name="getAllItems">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.Item i where
		i.company.id=:companyId
		order by i.id
	</query>
	<query name="getSalesPersons">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.SalesPerson s where
		s.company.id=:companyId order by s.id
	</query>
	<query name="getTaxcodes">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.TAXCode t where
		t.company.id=:companyId order by t.id
	</query>

	<query name="getTaxItems">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.TAXItem t where
		t.company.id=:companyId order by t.id
	</query>
	<query name="getTaxReturnById">
		<query-param name="id" type="long" />
		from com.vimukti.accounter.core.TAXReturn tr where
		tr.id=:id order by
		tr.id
	</query>

	<query name="list.InventorySales">
		<query-param name="itemId" type="long" />
		<!-- <query-param name="inventoryScheme" type="int"/> -->
		from com.vimukti.accounter.core.TransactionItem sale
		where
		sale.item.id=:itemId and sale.transaction.saveStatus not in (201,202,204)
		and (sale.transaction.type in (1,4,8,37) or (sale.transaction.type=36
		and sale.quantity.value &lt; 0))
		order by
		sale.transaction.transactionDate,sale.transaction.id
	</query>
	<query name="getJobsByCustomer">
		<query-param name="customerId" type="long" />
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.Job j where j.customer.id=:customerId
		and
		j.company.id=:companyId order by j.id
	</query>
	<query name="getAccountByNumber">
		<query-param name="company" type="Company" />
		<query-param name="accountNumber" type="String" />
		select ac.id from com.vimukti.accounter.core.Account ac where
		ac.number=:accountNumber and ac.company=:company
	</query>
	<query name="getAccountByName">
		<query-param name="company" type="Company" />
		<query-param name="accountName" type="String" />
		select ac.id from com.vimukti.accounter.core.Account ac where
		ac.name=:accountName and ac.company=:company
	</query>
	<query name="getItemGrupByName">
		<query-param name="company" type="Company" />
		<query-param name="itemGrupName" type="String" />
		select ig.id from com.vimukti.accounter.core.ItemGroup ig where
		ig.name=:itemGrupName and ig.company=:company
	</query>
	<query name="getMeasurementByName">
		<query-param name="company" type="Company" />
		<query-param name="measurement" type="String" />
		select m.id from com.vimukti.accounter.core.Measurement m where
		m.name=:measurement and m.company=:company
	</query>
	<query name="getWarehouseByName">
		<query-param name="company" type="Company" />
		<query-param name="warehouse" type="String" />
		select wh.id from com.vimukti.accounter.core.Warehouse wh where
		wh.name=:warehouse and wh.company=:company
	</query>
	<query name="getPayeeIdByName">
		<query-param name="company" type="Company" />
		<query-param name="payee" type="String" />
		select p.id from com.vimukti.accounter.core.Payee p where
		p.name=:payee and p.company=:company
	</query>
	<query name="getCurrencyIdByCode">
		<query-param name="company" type="Company" />
		<query-param name="currency" type="String" />
		select c.id from com.vimukti.accounter.core.Currency c where
		c.formalName=:currency and c.company=:company
	</query>
	<query name="deleteClientmobilecookies">
		<query-param name="client" type="Client" />
		delete from com.vimukti.accounter.core.MobileCookie mc
		where
		mc.client=:client
	</query>
	<query name="update.merge.transactionitem.class.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.TransactionItem set
		accounterClass=:toID where
		accounterClass=:fromID
	</query>
	<query name="update.merge.transaction.class.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.Transaction set
		accounterClass=:toID
		where
		accounterClass=:fromID
	</query>
	<query name="update.merge.transaction.deposit.item.class.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.TransactionDepositItem set
		accounterClass=:toID where
		accounterClass=:fromID
	</query>
	<query name="update.merge.transaction.location.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.Transaction set
		location=:toID where
		location=:fromID
	</query>
	<query name="deleteBankChequeLayouts">
		<query-param name="account" type="Account" />
		delete from com.vimukti.accounter.core.ChequeLayout cl
		where
		cl.account=:account
	</query>
	<query name="getEmployeeAttendanceManagementItems">
		<query-param name="employee" type="long" />
			from com.vimukti.accounter.core.AttendanceManagementItem item 
			where item.employee.id =:employee
	</query>
	<query name="update.merge.Job.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.Job set
		customer.id=:toID
		where
		customer.id=:fromID
	</query>
	<query name="update.merge.TransactionItem.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.TransactionItem set
		customer.id=:toID
		where
		customer.id=:fromID
	</query>	
	<query name="update.merge.payee.update.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.PayeeUpdate set
		payee.id=:toID
		where
		payee.id=:fromID
	</query>	
	<!-- <query name="update.merge.loan.old.tonew">
		<query-param name="fromID" type="long"></query-param>
		<query-param name="toID" type="long"></query-param>
			update com.vimukti.accounter.core.Loan set
			payee.id=:toID
			where payee.id=:fromID
	</query> -->
	<query name="update.merge.TransactionDepositItem.update.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.TransactionDepositItem
			set receivedFrom.id=:toID
			where receivedFrom.id=:fromID
	</query>
	<query name="update.merge.TransactionDepositItem.customer.update.old.tonew">
		<query-param name="fromID" type="long" />
		<query-param name="toID" type="long" />
		update com.vimukti.accounter.core.TransactionDepositItem
			set customer.id=:toID
			where customer.id=:fromID
	</query>	
	<query name="getReminders">
		<query-param name="companyId" type="long" />
		from com.vimukti.accounter.core.Reminder r
		where r.company.id=:companyId order by r.transactionDate
	</query>
</hibernate-mapping>