<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.vimukti.accounter.core">

	<sql-query name="getSalesOrders">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="toDay" type="long" />
		<query-param name="type" type="int" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ORIGINAL_AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_STATUS" type="int" />
		
		<![CDATA[
				SELECT T.ID                        AS TRANSACTION_ID,
				       T.T_TYPE                    AS TRANSACTION_TYPE,
				       T.NUMBER                    AS TRANSACTION_NUMBER,
				       T.TOTAL * T.CURRENCY_FACTOR AS ORIGINAL_AMOUNT,
				       SO.DELIVERY_DATE            AS TRANSACTION_DATE,
				       P.NAME                      AS VENDOR_NAME,
				       T.STATUS                    AS TRANSACTION_STATUS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ESTIMATE SO
				         ON T.ID = SO.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = SO.CUSTOMER_ID
				WHERE  T.T_TYPE = 7
				       AND SO.ESTIMATETYPE = 6
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.COMPANY_ID = :companyId
				       AND (CASE 
			               WHEN :type = -1 THEN TRUE 
			               WHEN :type = 6 THEN SO.DELIVERY_DATE < :toDay 
			                                   AND T.STATUS != 102 
			                                   AND T.SAVE_STATUS != 204 
			               WHEN T.STATUS = :type THEN T.SAVE_STATUS != 201 
			                                          AND T.SAVE_STATUS != 204 
			               ELSE T.SAVE_STATUS = :type 
			             END )
				       AND T.SAVE_STATUS != 202
				ORDER  BY P.NAME,
				          T.T_DATE  
				]]>

	</sql-query>

	<sql-query name="getExpenseReportByType">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="type" type="int" />

		<return-scalar column="ID" type="long" />
		<return-scalar column="T_TYPE" type="int" />
		<return-scalar column="T_DATE" type="long" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="C_NAME" type="string" />
		<return-scalar column="TOTAL" type="double" />
		
		<![CDATA[
				SELECT T.ID                        AS ID,
				       T.T_TYPE                    AS T_TYPE,
				       T.T_DATE                    AS T_DATE,
				       T.NUMBER                    AS NUMBER,
				       T.MEMO                      AS MEMO,
				       CASE
				         WHEN T.T_TYPE = 26 THEN A.NAME
				         WHEN T.T_TYPE = 27
				               OR T.T_TYPE = 6
				               OR T.T_TYPE = 15
				               OR T.T_TYPE = 2
				               OR T.T_TYPE = 24 THEN P.NAME
				         WHEN T.T_TYPE = 28 THEN NULL
				       END                         AS NAME,
				       C.FULL_NAME                 C_NAME,
				       T.TOTAL * T.CURRENCY_FACTOR AS TOTAL
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON CP.ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = CP.PAYFROM_ACCOUNT_ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CC
				         ON CC.ID = T.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON EB.ID = T.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON WC.ID = T.ID
				       LEFT OUTER JOIN TAX_ADJUSTMENT TA
				         ON TA.ID = T.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = CC.VENDOR_ID
				             OR P.ID = EB.VENDOR_ID
				             OR P.ID = WC.VENDOR_ID
				             OR P.ID = WC.CUSTOMER_ID
				             OR P.ID = TA.TAX_AGENCY_ID
				             OR P.ID = CP.VENDOR_ID
				       LEFT OUTER JOIN USERS U
				         ON U.ID = CP.EMPLOYEE
				       LEFT OUTER JOIN CLIENT C
				         ON C.ID = U.CLIENT_ID
				WHERE  CASE
				         WHEN :type = 0 THEN T.T_TYPE IN ( 2, 6, 15, 26,
				                                           27, 28, 24 )
				         ELSE T.T_TYPE = :type
				       END
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.SAVE_STATUS = 203
				       AND T.COMPANY_ID = :companyId
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="getMinimumAndMaximumTransactionDate">
		<query-param name="companyId" type="long" />

		<return-scalar column="MINIMUM_DATE" type="long" />
		<return-scalar column="MAXIMUM_DATE" type="long" />
		
		<![CDATA[
				SELECT Min(T.T_DATE) AS MINIMUM_DATE,
				       Max(T.T_DATE) AS MAXIMUM_DATE
				FROM   TRANSACTION T
				WHERE  T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<!-- QUERIES FOR REPORTS -->
	<sql-query name="accountbalances">
		<query-param name="companyId" type="long" />

		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNT_TOTAL_BALANCE" type="double" />
		<return-scalar column="ACCOUNT_TYPE" type="int" />
		
		<![CDATA[
				SELECT A.NAME          AS ACCOUNT_NAME,
				       A.TOTAL_BALANCE AS ACCOUNT_TOTAL_BALANCE,
				       A.A_TYPE        AS ACCOUNT_TYPE
				FROM   ACCOUNT A
				WHERE  A.COMPANY_ID = :companyId
				ORDER  BY A.NAME  
				]]>

	</sql-query>

	<!--Query for Sales By Customer Detail Report -->
	<sql-query name="getSalesByCustomerDetail">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="PAYMENT_TERMS" type="encryptedstring" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT_PRICE" type="double" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="SHIPMENT_OR_DELIVERY_DATE" type="long" />
		<return-scalar column="REFERENCE" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />

		<![CDATA[
				SELECT NAME,
				       TYPE,
				       DATE,
				       NUMBER,
				       MEMO,
				       DUE_DATE,
				       PAYMENT_TERMS,
				       ITEM_NAME,
				       QUANTITY,
				       UNIT_PRICE,
				       AMOUNT,
				       SHIPMENT_OR_DELIVERY_DATE,
				       REFERENCE,
				       TRANSACTION_ID
				FROM   SALES_PURCHASES_VIEW VIEW
				WHERE  CUSTOMER_ID IS NOT NULL
				       AND VIEW.COMPANY_ID = :companyId
				       AND DATE BETWEEN :startDate AND :endDate
				ORDER  BY NAME  
				]]>

	</sql-query>

	<sql-query name="getSalesByCustomerDetailForParticularCustomer">
		<query-param name="companyId" type="long" />
		<query-param name="customerName" type="String" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="PAYMENT_TERMS" type="encryptedstring" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT_PRICE" type="double" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="SHIPMENT_OR_DELIVERY_DATE" type="long" />
		<return-scalar column="REFERENCE" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		
		<![CDATA[
				SELECT NAME,
				       TYPE,
				       DATE,
				       NUMBER,
				       MEMO,
				       DUE_DATE,
				       PAYMENT_TERMS,
				       ITEM_NAME,
				       QUANTITY,
				       UNIT_PRICE,
				       AMOUNT,
				       SHIPMENT_OR_DELIVERY_DATE,
				       REFERENCE,
				       TRANSACTION_ID
				FROM   SALES_PURCHASES_VIEW
				WHERE  CUSTOMER_ID IS NOT NULL
				       AND COMPANY_ID = :companyId
				       AND NAME = :customerName
				       AND DATE BETWEEN :startDate AND :endDate
				ORDER  BY NAME  
				]]>

	</sql-query>

	<!--Query for Sales By Customer Summary Report -->
	<sql-query name="getSalesByCustomerSummary">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		
		<![CDATA[
				SELECT NAME,
				       SUM(AMOUNT) AS AMOUNT
				FROM   SALES_PURCHASES_VIEW
				WHERE  CUSTOMER_ID IS NOT NULL
				       AND COMPANY_ID = :companyId
				       AND DATE BETWEEN :startDate AND :endDate
				GROUP  BY NAME
				ORDER  BY NAME  
				]]>

	</sql-query>

	<!--Query for Sales By Item Detail Report -->
	<sql-query name="getSalesByItemDetail">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT_PRICE" type="double" />
		<return-scalar column="DISCOUNT" type="double" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="SO_OR_QUOTE_NO" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="SHIPMENT_OR_DELIVERY_DATE" type="long" />
		<return-scalar column="ITEM_GROUP" type="encryptedstring" />
		<return-scalar column="SALES_DESCRIPTION" type="encryptedstring" />
		<return-scalar column="PAYMENT_TERMS" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="REFERENCE" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="UNIT" type="long" />
		<return-scalar column="PARENT_ID" type="long" />
		<return-scalar column="DEPTH" type="int" />
		<![CDATA[
		SELECT ITEM_TYPE,
				       ITEM_NAME,
				       TYPE,
				       DATE,
				       NUMBER,
				       NAME,
				       QUANTITY,
				       UNIT_PRICE,
				       DISCOUNT,
				       AMOUNT,
				       SO_OR_QUOTE_NO,
				       DUE_DATE,
				       SHIPMENT_OR_DELIVERY_DATE,
				       ITEM_GROUP,
				       SALES_DESCRIPTION,
				       PAYMENT_TERMS,
				       MEMO,
				       REFERENCE,
				       TRANSACTION_ID,
				       UNIT,
				       PARENT_ID,
				       DEPTH
				FROM   SALES_PURCHASES_VIEW
				WHERE  CUSTOMER_ID IS NOT NULL
				       AND COMPANY_ID =  :companyId
				       AND ITEM_TYPE IS NOT NULL
				       AND DATE BETWEEN :startDate AND :endDate
				ORDER  BY PATH DESC
				]]>

	</sql-query>
	<sql-query name="getSalesByItemDetailForParticularItem">
		<query-param name="companyId" type="long" />
		<query-param name="itemName" type="String" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT_PRICE" type="double" />
		<return-scalar column="DISCOUNT" type="double" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="SO_OR_QUOTE_NO" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="SHIPMENT_OR_DELIVERY_DATE" type="long" />
		<return-scalar column="ITEM_GROUP" type="encryptedstring" />
		<return-scalar column="SALES_DESCRIPTION" type="encryptedstring" />
		<return-scalar column="PAYMENT_TERMS" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="REFERENCE" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="DEPTH" type="int" />
		<return-scalar column="PARENT_ID" type="long" />
		<return-scalar column="ITEMDEPTH" type="int" />
		<![CDATA[
				SELECT ITEM_TYPE,
				       ITEM_NAME,
				       TYPE,
				       DATE,
				       NUMBER,
				       NAME,
				       QUANTITY,
				       UNIT_PRICE,
				       DISCOUNT,
				       AMOUNT,
				       SO_OR_QUOTE_NO,
				       DUE_DATE,
				       SHIPMENT_OR_DELIVERY_DATE,
				       ITEM_GROUP,
				       SALES_DESCRIPTION,
				       PAYMENT_TERMS,
				       MEMO,
				       REFERENCE,
				       TRANSACTION_ID,
				       DEPTH,
				       PARENT_ID,
				       DEPTH AS ITEMDEPTH
				FROM   SALES_PURCHASES_VIEW
				WHERE  CUSTOMER_ID IS NOT NULL
				       AND COMPANY_ID = :companyId
				       AND ITEM_TYPE IS NOT NULL
				       AND ITEM_NAME = :itemName
				       AND DATE BETWEEN :startDate AND :endDate
				ORDER  BY PATH DESC
				]]>

	</sql-query>

	<!--Query for Sales By Item Summary Report -->
	<sql-query name="getSalesByItemSummary">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="PARENTID" type="long" />
		<return-scalar column="DEPTH" type="int" />

		<![CDATA[
				SELECT ITEM_NAME     AS NAME,
				       SUM(QUANTITY) AS QUANTITY,
				       SUM(AMOUNT)   AS AMOUNT,
				       PARENT_ID     AS PARENTID,
				       DEPTH
				FROM   SALES_PURCHASES_VIEW
				WHERE  CUSTOMER_ID IS NOT NULL
				       AND COMPANY_ID = :companyId
				       AND ITEM_TYPE IS NOT NULL
				       AND ITEM_NAME IS NOT NULL
				       AND DATE BETWEEN :startDate AND :endDate
				GROUP  BY ITEM_NAME,PARENT_ID,PATH,DEPTH
				ORDER  BY PATH DESC
				]]>

	</sql-query>

	<!--Query for Purchases By Vendor Detail Report -->
	<sql-query name="getPurchasesByVendorDetail">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="PAYMENT_TERMS" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="PURCHASE_DESCRIPTION" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT_PRICE" type="double" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="SHIPMENT_OR_DELIVERY_DATE" type="long" />
		<return-scalar column="REFERENCE" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />

		<![CDATA[
				SELECT NAME,
				       TYPE,
				       DATE,
				       NUMBER,
				       PAYMENT_TERMS,
				       DUE_DATE,
				       ITEM_NAME,
				       PURCHASE_DESCRIPTION,
				       QUANTITY,
				       UNIT_PRICE,
				       AMOUNT,
				       SHIPMENT_OR_DELIVERY_DATE,
				       REFERENCE,
				       TRANSACTION_ID
				FROM   SALES_PURCHASES_VIEW
				WHERE  VENDOR_ID IS NOT NULL
				       AND COMPANY_ID = :companyId
				       AND COMPANY_ID = :companyId
				       AND DATE BETWEEN :startDate AND :endDate
				ORDER  BY NAME  
				]]>

	</sql-query>

	<sql-query name="getPurchasesByVendorDetailForParticularVendor">
		<query-param name="companyId" type="long" />
		<query-param name="vendorName" type="String" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="PAYMENT_TERMS" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="PURCHASE_DESCRIPTION" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT_PRICE" type="double" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="SHIPMENT_OR_DELIVERY_DATE" type="long" />
		<return-scalar column="REFERENCE" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />

		<![CDATA[
				SELECT NAME,
				       TYPE,
				       DATE,
				       NUMBER,
				       PAYMENT_TERMS,
				       DUE_DATE,
				       ITEM_NAME,
				       PURCHASE_DESCRIPTION,
				       QUANTITY,
				       UNIT_PRICE,
				       AMOUNT,
				       SHIPMENT_OR_DELIVERY_DATE,
				       REFERENCE,
				       TRANSACTION_ID
				FROM   SALES_PURCHASES_VIEW
				WHERE  VENDOR_ID IS NOT NULL
				       AND COMPANY_ID = :companyId
				       AND NAME = :vendorName
				       AND DATE BETWEEN :startDate AND :endDate
				ORDER  BY NAME  
				]]>

	</sql-query>

	<!--Query for Purchases By Vendor Summary Report -->
	<sql-query name="getPurchasesByVendorSummary">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />

		<![CDATA[
				SELECT NAME,
				       SUM(AMOUNT) AS AMOUNT
				FROM   SALES_PURCHASES_VIEW
				WHERE  VENDOR_ID IS NOT NULL
				       AND COMPANY_ID = :companyId
				       AND DATE BETWEEN :startDate AND :endDate
				GROUP  BY NAME
				ORDER  BY NAME  
				]]>

	</sql-query>

	<!--Query for Purchases By Item Detail Report -->
	<sql-query name="getPurchasesByItemDetail">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="PAYMENT_TERMS" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT_PRICE" type="double" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="SHIPMENT_OR_DELIVERY_DATE" type="long" />
		<return-scalar column="REFERENCE" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="DISCOUNT" type="double" />
		<return-scalar column="UNIT" type="long" />
		<return-scalar column="PARENT_ID" type="long" />
		<return-scalar column="DEPTH" type="int" />

		<![CDATA[
				SELECT ITEM_TYPE,
				       ITEM_NAME,
				       TYPE,
				       NUMBER,
				       DATE,
				       PAYMENT_TERMS,
				       DUE_DATE,
				       QUANTITY,
				       UNIT_PRICE,
				       AMOUNT,
				       SHIPMENT_OR_DELIVERY_DATE,
				       REFERENCE,
				       TRANSACTION_ID,
				       DISCOUNT,
				       UNIT,
				       PARENT_ID,
				       DEPTH
				FROM   SALES_PURCHASES_VIEW
				WHERE  VENDOR_ID IS NOT NULL
				       AND COMPANY_ID = :companyId
				       AND ITEM_TYPE IS NOT NULL
				       AND DATE BETWEEN :startDate AND :endDate
				ORDER  BY PATH DESC
				]]>

	</sql-query>

	<sql-query name="getPurchasesByItemDetailForParticularItem">
		<query-param name="companyId" type="long" />
		<query-param name="itemName" type="String" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="PAYMENT_TERMS" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="UNIT_PRICE" type="double" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="SHIPMENT_OR_DELIVERY_DATE" type="long" />
		<return-scalar column="REFERENCE" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="DISCOUNT" type="double" />
		<return-scalar column="DEPTH" type="double" />
		<return-scalar column="PARENT_ID" type="long" />
		<return-scalar column="ITEMDEPTH" type="int" />
		<![CDATA[
				SELECT ITEM_TYPE,
				       ITEM_NAME,
				       TYPE,
				       NUMBER,
				       DATE,
				       PAYMENT_TERMS,
				       DUE_DATE,
				       QUANTITY,
				       UNIT_PRICE,
				       AMOUNT,
				       SHIPMENT_OR_DELIVERY_DATE,
				       REFERENCE,
				       TRANSACTION_ID,
				       DISCOUNT,
				       DEPTH,
				       PARENT_ID,
				       DEPTH AS ITEMDEPTH
				FROM   SALES_PURCHASES_VIEW
				WHERE  VENDOR_ID IS NOT NULL
				       AND COMPANY_ID = :companyId
				       AND ITEM_TYPE IS NOT NULL
				       AND ITEM_NAME = :itemName
				       AND DATE BETWEEN :startDate AND :endDate
				ORDER  BY PATH DESC
				]]>

	</sql-query>

	<!--Query for Purchases By Item Summary Report -->
	<sql-query name="getPurchasesByItemSummary">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="PARENTID" type="long" />
		<return-scalar column="DEPTH" type="int" />
		<![CDATA[
				SELECT ITEM_NAME,
				       SUM(QUANTITY) AS QUANTITY,
				       SUM(AMOUNT)   AS AMOUNT,
				       PARENT_ID     AS PARENTID,
				       DEPTH
				FROM   SALES_PURCHASES_VIEW
				WHERE  VENDOR_ID IS NOT NULL
				       AND COMPANY_ID = :companyId
				       AND ITEM_TYPE IS NOT NULL
				       AND ITEM_NAME IS NOT NULL
				       AND DATE BETWEEN :startDate AND :endDate
				GROUP  BY ITEM_NAME,PARENT_ID,PATH,DEPTH
				ORDER  BY PATH  DESC
				]]>

	</sql-query>

	<!--Query for Customer Transaction History Report -->
	<sql-query name="getCustomerTransactionHistory">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="start" type="long" />
		<query-param name="end" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="TR_AMOUNT" type="double" />
		<return-scalar column="PAID_AMOUNT" type="double" />
		<return-scalar column="PAYMENT_TERMS" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="DEBIT" type="double" />
		<return-scalar column="CREDIT" type="double" />
		<return-scalar column="DISCOUNT" type="double" />
		<return-scalar column="WRITE_OFF" type="double" />
		<return-scalar column="T_ID" type="long" />
		<!--<return-scalar column="DIFF_AMOUNT" type="double" /> -->
		<return-scalar column="IS_VOID" type="boolean" />
		<return-scalar column="PAYMENT_STATUS" type="int" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="ACCOUNT" type="encryptedstring" />
		
		<![CDATA[
				SELECT TV.NAME                            AS NAME,
				       TV.TYPE                            AS TYPE,
				       TV.NUMBER                          AS NUMBER,
				       TV.DATE                            AS DATE,
				       TV.INVOICED_OR_TRANSASCTION_AMOUNT AS TR_AMOUNT,
				       TV.PAID_AMOUNT                     AS PAID_AMOUNT,
				       TV.PAYMENT_TERMS                   AS PAYMENT_TERMS,
				       TV.DUE_DATE                        AS DUE_DATE,
				       TV.DEBIT                           AS DEBIT,
				       TV.CREDIT                          AS CREDIT,
				       TV.DISCOUNT                        AS DISCOUNT,
				       TV.WRITE_OFF                       AS WRITE_OFF,
				       TV.TRANSACTION_ID                  AS T_ID,
				       (SELECT SUM(TV1.INVOICED_OR_TRANSASCTION_AMOUNT) - SUM(TV1.PAID_AMOUNT)
				        FROM   TRANSACTION_HISTORY_VIEW TV1
				        WHERE  TV1.COMPANY_ID = :companyId
				               AND TV1.CUSTOMER_ID = TV.CUSTOMER_ID
				               AND TV1.DATE BETWEEN :start AND :end
				        GROUP  BY TV1.CUSTOMER_ID),
				       CASE
				         WHEN TV.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                                AS IS_VOID,
				       TV.PAYMENT_STATUS                  AS PAYMENT_STATUS,
				       TV.MEMO                            AS MEMO,
				       A.NAME                             AS ACCOUNT
				FROM   TRANSACTION_HISTORY_VIEW TV
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = TV.TRANSACTION_ID
				       LEFT OUTER JOIN CURRENCY CURR
				       	 ON CURR.ID=T.CURRENCY
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
				         ON CPP.ID = T.ID
				       LEFT OUTER JOIN COMPANY C
				         ON C.ID = TV.COMPANY_ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = CASE
				                     WHEN T.T_TYPE IN ( 1, 15, 29 ) THEN CASE
				                     WHEN T.T_TYPE IN ( 1 ) THEN CS.DEPOSIT_IN_ACCOUNT_ID
				                     WHEN T.T_TYPE IN ( 29 ) THEN CPP.DEPOSITIN_ID
				                     WHEN T.T_TYPE = 15 THEN WC.ACCOUNT_ID
				                                                         END
				                     ELSE CURR.ACCOUNTS_RECEIVABLE_ID
				                   END
				WHERE  TV.CUSTOMER_ID IS NOT NULL
				       AND TV.COMPANY_ID = :companyId
				       AND TV.DATE BETWEEN :startDate AND :endDate
				       AND TV.SAVE_STATUS = 203
				ORDER  BY TV.CUSTOMER_ID,
				          TV.TYPE,
				          TV.DATE  
				]]>

	</sql-query>

	<!--Query for Vendor Transaction History Report -->
	<sql-query name="getVendorTransactionHistory">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="start" type="long" />
		<query-param name="end" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="TR_AMOUNT" type="double" />
		<return-scalar column="PAID_AMOUNT" type="double" />
		<return-scalar column="DISCOUNT" type="double" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="PAYMENT_TERMS" type="encryptedstring" />
		<return-scalar column="DEBIT" type="double" />
		<return-scalar column="CREDIT" type="double" />
		<return-scalar column="IS_VOID" type="boolean" />
		<return-scalar column="REFERENCE" type="encryptedstring" />
		<return-scalar column="T_ID" type="long" />
		<return-scalar column="DIFF_AMOUNT" type="double" />
		<return-scalar column="PAYMENT_STATUS" type="int" />
		<return-scalar column="ACCOUNT" type="encryptedstring" />
		
		<![CDATA[
				SELECT TV.NAME                            AS NAME,
				       TV.TYPE                            AS TYPE,
				       TV.DATE                            AS DATE,
				       TV.NUMBER                          AS NUMBER,
				       TV.INVOICED_OR_TRANSASCTION_AMOUNT AS TR_AMOUNT,
				       TV.PAID_AMOUNT                     AS PAID_AMOUNT,
				       TV.DISCOUNT                        AS DISCOUNT,
				       TV.MEMO                            AS MEMO,
				       TV.DUE_DATE                        AS DUE_DATE,
				       TV.PAYMENT_TERMS                   AS PAYMENT_TERMS,
				       TV.DEBIT                           AS DEBIT,
				       TV.CREDIT                          AS CREDIT,
				       CASE
				         WHEN TV.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                                AS IS_VOID,
				       TV.REFERENCE                       AS REFERENCE,
				       TV.TRANSACTION_ID                  AS T_ID,
				       (SELECT SUM(TV1.INVOICED_OR_TRANSASCTION_AMOUNT) - SUM(TV1.PAID_AMOUNT)
				        FROM   TRANSACTION_HISTORY_VIEW TV1
				        WHERE  TV1.COMPANY_ID = :companyId
				               AND TV1.VENDOR_ID = TV.VENDOR_ID
				               AND TV1.DATE BETWEEN :start AND :end
				        GROUP  BY TV1.VENDOR_ID)          AS DIFF_AMOUNT,
				       TV.PAYMENT_STATUS                  AS PAYMENT_STATUS,
				       A.NAME                             AS ACCOUNT
				FROM   TRANSACTION_HISTORY_VIEW TV
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = TV.TRANSACTION_ID
				       LEFT OUTER JOIN CURRENCY CURR
				       	 ON CURR.ID=T.CURRENCY
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON CP.ID = T.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CC
				         ON CC.ID = T.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON PB.ID = T.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON VP.ID = T.ID
				       LEFT OUTER JOIN COMPANY C
				         ON C.ID = TV.COMPANY_ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = CASE
				                     WHEN T.T_TYPE IN ( 2, 3, 11, 15,
				                                        26, 27 ) THEN CASE
				                     WHEN T.T_TYPE IN ( 2, 26 ) THEN CP.PAYFROM_ACCOUNT_ID
				                     WHEN T.T_TYPE IN ( 3, 27 ) THEN CC.PAYFROM_ACCOUNT_ID
				                     WHEN T.T_TYPE = 11 THEN PB.PAYFROM_ID
				                     WHEN T.T_TYPE = 25 THEN VP.PAYFROM_ID
				                     WHEN T.T_TYPE = 15 THEN WC.ACCOUNT_ID
				                                                      END
				                     ELSE CURR.ACCOUNTS_PAYABLE_ID
				                   END
				WHERE  TV.VENDOR_ID IS NOT NULL
				       AND TV.COMPANY_ID = :companyId
				       AND TV.DATE BETWEEN :startDate AND :endDate
				       AND TV.SAVE_STATUS = 203
				ORDER  BY TV.VENDOR_ID,
				          TV.TYPE,
				          TV.DATE  
				]]>

	</sql-query>


	<!--Query for TrialBalance Report -->
	<sql-query name="getTrialBalance">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ID" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="CASHFLOW_CATEGORY" type="int" />
		<return-scalar column="PARENT_ID" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="FLOW" type="encryptedstring" />
		
		<![CDATA[
				SELECT A.ID                AS ID,
				       A.NAME              AS NAME,
				       A.A_NUMBER          AS NUMBER,
				       A.A_TYPE            AS TYPE,
				       A.CASHFLOW_CATEGORY AS CASHFLOW_CATEGORY,
				       A.PARENT_ID         AS PARENT_ID,
				       ( CASE
				           WHEN (SELECT COUNT(AT.ACCOUNT_ID)
				                 FROM   ACCOUNT_TRANSACTION AT
				                        LEFT JOIN TRANSACTION T
				                          ON AT.TRANSACTION_ID = T.ID
				                 WHERE  AT.ACCOUNT_ID = A.ID
				                        AND T.T_DATE BETWEEN :startDate AND :endDate
				                        AND AT.COMPANY_ID = :companyId) = 0 THEN 0
				           ELSE (SELECT CASE
				                          WHEN (SELECT A1.IS_INCREASE
				                                FROM   ACCOUNT A1
				                                WHERE  A1.ID = AT.ACCOUNT_ID
				                                       AND A1.COMPANY_ID = :companyId) = FALSE
				                        THEN
				                          SUM(AT.AMOUNT)
				                          ELSE -1 * SUM(AT.AMOUNT)
				                        END
				                 FROM   ACCOUNT_TRANSACTION AT
				                        LEFT JOIN TRANSACTION T
				                          ON AT.TRANSACTION_ID = T.ID
				                 WHERE  AT.ACCOUNT_ID = A.ID
				                        AND T.T_DATE BETWEEN :startDate AND :endDate
				                        AND AT.COMPANY_ID = :companyId
				                 GROUP  BY AT.ACCOUNT_ID)
				         END )             AS AMOUNT,
				       A.FLOW              AS FLOW
				FROM   ACCOUNT A
				WHERE  A.COMPANY_ID = :companyId
				ORDER  BY A.A_TYPE,
				          A.A_NUMBER  
				]]>

	</sql-query>

	<!-- Query for Balance Sheet, Profit & Loss and Cash Flow Statement Reports -->
	<sql-query name="getBalanceSheet">
		<query-param name="companyId" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ID" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="CATEGORY" type="int" />
		<return-scalar column="P_ID" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="FLOW" type="encryptedstring" />
		<return-scalar column="BASE_TYPE" type="int" />
		<return-scalar column="SUB_BASE_TYPE" type="int" />
		<return-scalar column="GROUP_TYPE" type="int" />
		
		<![CDATA[
				SELECT A.ID                AS ID,
				       A.NAME              AS NAME,
				       A.A_NUMBER          AS NUMBER,
				       A.A_TYPE            AS TYPE,
				       A.CASHFLOW_CATEGORY AS CATEGORY,
				       A.PARENT_ID         AS P_ID,
				       ( CASE
				           WHEN (SELECT COUNT(AT1.ACCOUNT_ID)
				                 FROM   ACCOUNT_TRANSACTION AT1
				                        JOIN TRANSACTION T1
				                          ON AT1.TRANSACTION_ID = T1.ID
				                 WHERE  AT1.ACCOUNT_ID = A.ID
				                        AND T1.T_DATE <= :endDate
				                        AND AT1.COMPANY_ID = :companyId) = 0 THEN 0
				           ELSE (SELECT SUM(AT.AMOUNT)
				                 FROM   ACCOUNT_TRANSACTION AT
				                        JOIN TRANSACTION T
				                          ON AT.TRANSACTION_ID = T.ID
				                 WHERE  AT.ACCOUNT_ID = A.ID
				                        AND T.T_DATE <= :endDate
				                        AND AT.COMPANY_ID = :companyId
				                 GROUP  BY AT.ACCOUNT_ID)
				         END )             AS AMOUNT,
				       A.FLOW              AS FLOW,
				       A.BASE_TYPE         AS BASE_TYPE,
				       A.SUB_BASE_TYPE     AS SUB_BASE_TYPE,
				       A.GROUP_TYPE        AS GROUP_TYPE
				FROM   ACCOUNT A
				WHERE  A.A_TYPE NOT IN ( 14, 15, 16, 17, 18 )
				       AND A.BASE_TYPE !=0
				       AND A.COMPANY_ID = :companyId
				ORDER  BY A.BASE_TYPE,
				          A.SUB_BASE_TYPE,
				          A.GROUP_TYPE DESC,
				          A.A_TYPE,
				          A.A_NUMBER  
				]]>

	</sql-query>


	<!--This Profit And Loss report query is not included the Closing Postings. -->
	<!--This query should be used for the Profit And Loss Report and For the 
		Cash Flow Statement(while clicking Net Income entry). -->
	<sql-query name="getProfitAndLoss">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="startDate1" type="long" />
		<query-param name="endDate1" type="long" />

		<return-scalar column="ID" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="CATEGORY" type="int" />
		<return-scalar column="P_ID" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="TOTAL_AMOUNT" type="double" />
		<return-scalar column="FLOW" type="encryptedstring" />
		<return-scalar column="BASE_TYPE" type="int" />
		<return-scalar column="SUB_BASE_TYPE" type="int" />
		<return-scalar column="GROUP_TYPE" type="int" />
		
		<![CDATA[
				SELECT A.ID                AS ID,
				       A.NAME              AS NAME,
				       A.A_NUMBER          AS NUMBER,
				       A.A_TYPE            AS TYPE,
				       A.CASHFLOW_CATEGORY AS CATEGORY,
				       A.PARENT_ID         AS P_ID,
				       ( CASE
				           WHEN (SELECT COUNT(AT1.ACCOUNT_ID)
				                 FROM   ACCOUNT_TRANSACTION AT1
				                        JOIN TRANSACTION T1
				                          ON AT1.TRANSACTION_ID = T1.ID
				                 WHERE  AT1.ACCOUNT_ID = A.ID
				                        AND T1.T_DATE BETWEEN :startDate AND :endDate
				                        AND AT1.COMPANY_ID = :companyId) = 0 THEN 0
				           ELSE (SELECT SUM(AT.AMOUNT)
				                 FROM   ACCOUNT_TRANSACTION AT
				                        JOIN TRANSACTION T
				                          ON AT.TRANSACTION_ID = T.ID
				                 WHERE  AT.ACCOUNT_ID = A.ID
				                        AND T.T_DATE BETWEEN :startDate AND :endDate
				                        AND AT.COMPANY_ID = :companyId
				                 GROUP  BY AT.ACCOUNT_ID)
				         END )             AS AMOUNT,
				       ( CASE
				           WHEN (SELECT COUNT(AT1.ACCOUNT_ID)
				                 FROM   ACCOUNT_TRANSACTION AT1
				                        JOIN TRANSACTION T1
				                          ON AT1.TRANSACTION_ID = T1.ID
				                 WHERE  AT1.ACCOUNT_ID = A.ID
				                        AND T1.T_DATE BETWEEN :startDate1 AND :endDate1
				                        AND AT1.COMPANY_ID = :companyId) = 0 THEN 0
				           ELSE (SELECT SUM(AT.AMOUNT)
				                 FROM   ACCOUNT_TRANSACTION AT
				                        JOIN TRANSACTION T
				                          ON AT.TRANSACTION_ID = T.ID
				                 WHERE  AT.ACCOUNT_ID = A.ID
				                        AND T.T_DATE BETWEEN :startDate1 AND :endDate1
				                        AND AT.COMPANY_ID = :companyId
				                 GROUP  BY AT.ACCOUNT_ID)
				         END )             AS TOTAL_AMOUNT,
				       A.FLOW              AS FLOW,
				       A.BASE_TYPE         AS BASE_TYPE,
				       A.SUB_BASE_TYPE     AS SUB_BASE_TYPE,
				       A.GROUP_TYPE        AS GROUP_TYPE
				FROM   ACCOUNT A
				WHERE  A.A_TYPE IN ( 14, 15, 16, 17, 18 )
				       AND A.BASE_TYPE !=0
				       AND A.COMPANY_ID = :companyId
				ORDER  BY A.BASE_TYPE,
				          A.SUB_BASE_TYPE,
				          A.GROUP_TYPE,
				          A.A_TYPE,
				          A.A_NUMBER  
				]]>

	</sql-query>

	<!--This Profit And Loss report query included the Closing Postings. -->
	<!--This query should be used for the Balance Sheet Report(while clicking 
		Net Income entry). -->
	<sql-query name="getProfitAndLoss_Closing_postings_Included">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ID" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="A_NUMBER" type="encryptedstring" />
		<return-scalar column="A_TYPE" type="int" />
		<return-scalar column="CASHFLOW_CATEGORY" type="int" />
		<return-scalar column="PARENT_ID" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="FLOW" type="encryptedstring" />
		<return-scalar column="BASE_TYPE" type="int" />
		<return-scalar column="SUB_BASE_TYPE" type="int" />
		<return-scalar column="GROUP_TYPE" type="int" />

		<![CDATA[
				SELECT A.ID AS ID,
				       A.NAME AS NAME,
				       A.A_NUMBER AS A_NUMBER,
				       A.A_TYPE AS A_TYPE,
				       A.CASHFLOW_CATEGORY AS CASHFLOW_CATEGORY,
				       A.PARENT_ID AS PARENT_ID,
				       ( CASE
				           WHEN (SELECT COUNT(AT1.ACCOUNT_ID)
				                 FROM   ACCOUNT_TRANSACTION AT1
				                        JOIN TRANSACTION T1
				                          ON AT1.TRANSACTION_ID = T1.ID
				                 WHERE  AT1.ACCOUNT_ID = A.ID
				                        AND T1.T_DATE BETWEEN :startDate AND :endDate
				                        AND AT1.COMPANY_ID = :companyId) = 0 THEN 0
				           ELSE (SELECT SUM(AT.AMOUNT)
				                 FROM   ACCOUNT_TRANSACTION AT
				                        JOIN TRANSACTION T
				                          ON AT.TRANSACTION_ID = T.ID
				                 WHERE  AT.ACCOUNT_ID = A.ID
				                        AND AT.COMPANY_ID = :companyId
				                        AND T.T_DATE BETWEEN :startDate AND :endDate
				                 GROUP  BY AT.ACCOUNT_ID)
				         END )         AS AMOUNT,
				       A.FLOW          AS FLOW,
				       A.BASE_TYPE     AS BASE_TYPE,
				       A.SUB_BASE_TYPE AS SUB_BASE_TYPE,
				       A.GROUP_TYPE    AS GROUP_TYPE
				FROM   ACCOUNT A
				WHERE  A.A_TYPE IN ( 14, 15, 16, 17, 18 )
				       AND A.BASE_TYPE !=0
				ORDER  BY A.BASE_TYPE,
				          A.SUB_BASE_TYPE,
				          A.GROUP_TYPE,
				          A.A_TYPE,
				          A.A_NUMBER  
				]]>

	</sql-query>

	<sql-query name="getCashFlowStatement">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="start" type="long" />
		<query-param name="end" type="long" />

		<return-scalar column="ID" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="CATEGORY" type="int" />
		<return-scalar column="P_ID" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="CASH_AT_BEGINNING_OF_PERIOD"
			type="double" />
		<return-scalar column="FLOW" type="encryptedstring" />
		<return-scalar column="BASE_TYPE" type="int" />
		<return-scalar column="SUB_BASE_TYPE" type="int" />
		<return-scalar column="GROUP_TYPE" type="int" />

		<![CDATA[
				SELECT A.ID                                     AS ID,
				       A.NAME                                   AS NAME,
				       A.A_NUMBER                               AS NUMBER,
				       A.A_TYPE                                 AS TYPE,
				       A.CASHFLOW_CATEGORY                      AS CATEGORY,
				       A.PARENT_ID                              AS P_ID,
				       ( CASE
				           WHEN (SELECT COUNT(AT1.ACCOUNT_ID)
				                 FROM   ACCOUNT_TRANSACTION AT1
				                        JOIN TRANSACTION T1
				                          ON AT1.TRANSACTION_ID = T1.ID
				                 WHERE  AT1.ACCOUNT_ID = A.ID
				                        AND T1.T_DATE BETWEEN :startDate AND :endDate
				                        AND AT1.COMPANY_ID = :companyId) = 0 THEN 0
				           ELSE (SELECT SUM(AT.AMOUNT)
				                 FROM   ACCOUNT_TRANSACTION AT
				                        JOIN TRANSACTION T
				                          ON AT.TRANSACTION_ID = T.ID
				                 WHERE  AT.ACCOUNT_ID = A.ID
				                        AND T.T_DATE BETWEEN :startDate AND :endDate
				                        AND AT.COMPANY_ID = :companyId
				                 GROUP  BY AT.ACCOUNT_ID)
				         END )                                  AS AMOUNT,
				       (SELECT SUM(AT1.AMOUNT)
				        FROM   ACCOUNT_TRANSACTION AT1
				               JOIN TRANSACTION T1
				                 ON AT1.TRANSACTION_ID = T1.ID
				        WHERE  AT1.ACCOUNT_ID = A.ID
				               AND T1.T_DATE BETWEEN :start AND :end
				               AND AT1.COMPANY_ID = :companyId) AS CASH_AT_BEGINNING_OF_PERIOD,
				       A.FLOW                                   AS FLOW,
				       A.BASE_TYPE                              AS BASE_TYPE,
				       A.SUB_BASE_TYPE                          AS SUB_BASE_TYPE,
				       A.GROUP_TYPE                             AS GROUP_TYPE
				FROM   ACCOUNT A
				WHERE  A.A_TYPE IN ( 3, 4, 6, 7,
				                     8, 9, 10, 11,
				                     12, 13 )
				       AND A.COMPANY_ID = :companyId
				ORDER  BY A.CASHFLOW_CATEGORY DESC,
				          A.A_TYPE,
				          A.A_NUMBER  
				]]>

	</sql-query>

	<!-- The following query returns the NetIncome which does not include the 
		Closing Postings -->
	<!-- This query is usefull to display the net Income in Cash Flow Statement -->
	<sql-query name="getNetIncome">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		
		<![CDATA[
				SELECT ( CASE
		           WHEN (SELECT SUM(AT1.AMOUNT)
		                 FROM   ACCOUNT_TRANSACTION AT1
		                        LEFT JOIN ACCOUNT A
		                          ON AT1.ACCOUNT_ID = A.ID
		                        LEFT JOIN TRANSACTION T
		                          ON AT1.TRANSACTION_ID = T.ID
		                 WHERE  A.A_TYPE IN( 14, 17 )
		                        AND T.T_DATE BETWEEN :startDate AND :endDate
		                        AND AT1.COMPANY_ID = :companyId) IS NULL THEN 0
		           ELSE (SELECT SUM(AT1.AMOUNT)
		                 FROM   ACCOUNT_TRANSACTION AT1
		                        LEFT JOIN ACCOUNT A
		                          ON AT1.ACCOUNT_ID = A.ID
		                        LEFT JOIN TRANSACTION T
		                          ON AT1.TRANSACTION_ID = T.ID
		                 WHERE  A.A_TYPE IN( 14, 17 )
		                        AND T.T_DATE BETWEEN :startDate AND :endDate
		                        AND AT1.COMPANY_ID = :companyId)
		         END - CASE
		                 WHEN (SELECT SUM(AT1.AMOUNT)
		                       FROM   ACCOUNT_TRANSACTION AT1
		                              LEFT JOIN ACCOUNT A
		                                ON AT1.ACCOUNT_ID = A.ID
		                              LEFT JOIN TRANSACTION T
		                                ON AT1.TRANSACTION_ID = T.ID
		                       WHERE  A.A_TYPE IN( 15, 16, 18 )
		                              AND T.T_DATE BETWEEN :startDate AND :endDate
		                              AND AT1.COMPANY_ID = :companyId) IS NULL THEN 0
		                 ELSE (SELECT SUM(AT1.AMOUNT)
		                       FROM   ACCOUNT_TRANSACTION AT1
		                              LEFT JOIN ACCOUNT A
		                                ON AT1.ACCOUNT_ID = A.ID
		                              LEFT JOIN TRANSACTION T
		                                ON AT1.TRANSACTION_ID = T.ID
		                       WHERE  A.A_TYPE IN( 15, 16, 18 )
		                              AND T.T_DATE BETWEEN :startDate AND :endDate
		                              AND AT1.COMPANY_ID = :companyId)
		               END ) AS AMOUNT  
				]]>

	</sql-query>


	<!-- The following query returns the NetIncome which includes the Closing 
		Postings -->
	<!-- This query is usefull to display the net Income in Balance Sheet Report -->
	<sql-query name="getNetIncome_Closing_postings_Included">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		
		<![CDATA[
				SELECT ( CASE
		           WHEN (SELECT SUM(AT1.AMOUNT)
		                 FROM   ACCOUNT_TRANSACTION AT1
		                        LEFT JOIN ACCOUNT A
		                          ON AT1.ACCOUNT_ID = A.ID
		                        LEFT JOIN TRANSACTION T
		                          ON AT1.TRANSACTION_ID = T.ID
		                 WHERE  A.A_TYPE IN( 14, 17 )
		                        AND T.T_DATE BETWEEN :startDate AND :endDate
		                        AND AT1.COMPANY_ID = :companyId) IS NULL THEN 0
		           ELSE (SELECT SUM(AT1.AMOUNT)
		                 FROM   ACCOUNT_TRANSACTION AT1
		                        LEFT JOIN ACCOUNT A
		                          ON AT1.ACCOUNT_ID = A.ID
		                        LEFT JOIN TRANSACTION T
		                          ON AT1.TRANSACTION_ID = T.ID
		                 WHERE  A.A_TYPE IN( 14, 17 )
		                        AND T.T_DATE BETWEEN :startDate AND :endDate
		                        AND AT1.COMPANY_ID = :companyId)
		         END - CASE
		                 WHEN (SELECT SUM(AT1.AMOUNT)
		                       FROM   ACCOUNT_TRANSACTION AT1
		                              LEFT JOIN ACCOUNT A
		                                ON AT1.ACCOUNT_ID = A.ID
		                              LEFT JOIN TRANSACTION T
		                                ON AT1.TRANSACTION_ID = T.ID
		                       WHERE  A.A_TYPE IN( 15, 16, 18 )
		                              AND T.T_DATE BETWEEN :startDate AND :endDate
		                              AND AT1.COMPANY_ID = :companyId) IS NULL THEN 0
		                 ELSE (SELECT SUM(AT1.AMOUNT)
		                       FROM   ACCOUNT_TRANSACTION AT1
		                              LEFT JOIN ACCOUNT A
		                                ON AT1.ACCOUNT_ID = A.ID
		                              LEFT JOIN TRANSACTION T
		                                ON AT1.TRANSACTION_ID = T.ID
		                       WHERE  A.A_TYPE IN( 15, 16, 18 )
		                              AND A.COMPANY_ID = :companyId
		                              AND T.T_DATE BETWEEN :startDate AND :endDate
		                              AND AT1.COMPANY_ID = :companyId)
		               END ) AS AMOUNT  
				]]>

	</sql-query>

	<!--Query for Aged Debtors Report -->
	<sql-query name="getAgedDebtors">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="CUSTOMER" type="encryptedstring" />
		<return-scalar column="CONTACT" type="encryptedstring" />
		<return-scalar column="PHONE" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="REFERENCE" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="PAYMENT_TERMS" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="VOID" type="boolean" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="MEMO" type="encryptedstring" />
		
		<![CDATA[
				SELECT P.NAME                            AS CUSTOMER,
				       (SELECT PC.NAME
				        FROM   PAYEE_CONTACT PC
				        WHERE  PC.PAYEE_ID = P.ID
				               AND PC.IS_PRIMARY = TRUE) AS CONTACT,
				       P.PHONE_NUMBER                    AS PHONE,
				       T.T_TYPE                          AS TRANSACTION_TYPE,
				       T.T_DATE                          AS TRANSACTION_DATE,
				       T.NUMBER                          AS TRANSACTION_NUMBER,
				       T.REFERENCE                       AS REFERENCE,
				       CASE
				         WHEN T.T_TYPE = 8 THEN I.DUE_DATE
				         WHEN T.T_TYPE = 4
				               OR T.T_TYPE = 5
				               OR T.T_TYPE = 12
				               OR T.T_TYPE = 16
				               OR T.T_TYPE = 29 THEN T.T_DATE
				       END                               AS DUE_DATE,
				       PT.NAME                           AS PAYMENT_TERMS,
				       CASE
				         WHEN T.T_TYPE = 4
				               OR T.T_TYPE = 12
				               OR T.T_TYPE = 29 THEN (SELECT -1 * CP.BALANCE * T.CURRENCY_FACTOR
				                                      FROM   CREDITS_AND_PAYMENTS CP
				                                      WHERE  CP.TRANSACTION_ID = T.ID)
				         WHEN T.T_TYPE = 5 THEN CR.BALANCE_DUE * T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 8 THEN I.BALANCE_DUE * T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 16 THEN JE.BALANCE_DUE * T.CURRENCY_FACTOR
				       END                               AS AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 5
				               OR T.T_TYPE = 8
				               OR T.T_TYPE = 16 THEN T.TOTAL * T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 4
				               OR T.T_TYPE = 29 THEN -1 * T.TOTAL * T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 12 THEN -1 * T.TOTAL * T.CURRENCY_FACTOR
				       END                               AS TOTAL,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                               AS VOID,
				       T.ID                              AS TRANSACTION_ID,
				       T.MEMO                            AS MEMO
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON T.ID = CR.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
				         ON T.ID = CPP.ID
				       LEFT OUTER JOIN JOURNAL_ENTRY JE
				         ON T.ID = JE.ID
				       JOIN CUSTOMER C
				         ON C.ID = CR.CUSTOMER_ID
				             OR C.ID = CCM.CUSTOMER_ID
				             OR C.ID = I.CUSTOMER_ID
				             OR C.ID = CPP.CUSTOMER_ID
				             OR C.ID = JE.PAYEE_ID
				             OR C.ID = RP.CUSTOMER_ID
				       JOIN PAYEE P
				         ON P.ID = C.ID
				       LEFT OUTER JOIN PAYMENTTERMS PT
				         ON PT.ID = I.PAYMENT_TERMS_ID
				WHERE  T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.T_TYPE IN ( 4, 5, 8, 12,
				                         16, 29 )
				       AND T.COMPANY_ID = :companyId
				       AND T.SAVE_STATUS !=204
				ORDER  BY P.NAME,
				          T.T_TYPE,
				          T.T_DATE  
				]]>

	</sql-query>

	<!--Query for Aged Creditors Report -->
	<sql-query name="getAgedCreditors">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="VENDOR" type="encryptedstring" />
		<return-scalar column="CONTACT" type="encryptedstring" />
		<return-scalar column="PHONE" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="REFERENCE" type="encryptedstring" />
		<return-scalar column="DUE_DATE" type="long" />
		<return-scalar column="PAYMENT_TERMS" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="VOID" type="boolean" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="MEMO" type="encryptedstring" />
		
		<![CDATA[
				SELECT P.NAME                            AS VENDOR,
				       (SELECT PC.NAME
				        FROM   PAYEE_CONTACT PC
				        WHERE  PC.PAYEE_ID = P.ID
				               AND PC.IS_PRIMARY = TRUE) AS CONTACT,
				       P.PHONE_NUMBER                    AS PHONE,
				       T.T_TYPE 		                 AS TRANSACTION_TYPE,
				       T.T_DATE                          AS TRANSACTION_DATE,
				       T.NUMBER                          AS TRANSACTION_NUMBER,
				       T.REFERENCE                       AS REFERENCE,
				       EB.DUE_DATE                       AS DUE_DATE,
				       PT.NAME                           AS PAYMENT_TERMS,
				       CASE
				         WHEN T.T_TYPE = 14
				               OR T.T_TYPE = 11 THEN (SELECT -1 * CP.BALANCE * T.CURRENCY_FACTOR
				                                      FROM   CREDITS_AND_PAYMENTS CP
				                                      WHERE  CP.TRANSACTION_ID = T.ID)
				         WHEN T.T_TYPE = 6 THEN EB.BALANCE_DUE * T.CURRENCY_FACTOR
				       END                               AS AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 14
				               OR T.T_TYPE = 25 THEN -1 * T.TOTAL * T.CURRENCY_FACTOR
				         WHEN T.T_TYPE = 6 THEN T.TOTAL * T.CURRENCY_FACTOR
				       END                               AS TOTAL,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END                               AS VOID,
				       T.ID                              AS TRANSACTION_ID,
				       CASE
				         WHEN T.T_TYPE = 25 THEN NULL
				         ELSE T.MEMO
				       END                               AS MEMO
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT PB
				         ON T.ID = PB.ID
				       JOIN VENDOR V
				         ON V.ID = EB.VENDOR_ID
				             OR V.ID = VCM.VENDOR_ID
				             OR V.ID = PB.VENDOR_ID
				       JOIN PAYEE P
				         ON P.ID = V.ID
				       LEFT OUTER JOIN PAYMENTTERMS PT
				         ON PT.ID = EB.PAYMENT_TERM_ID
				WHERE  T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.T_TYPE IN ( 6, 14, 25 )
				       AND T.COMPANY_ID = :companyId
				ORDER  BY P.NAME,
				          T.T_TYPE,
				          T_DATE  
				]]>

	</sql-query>

	<!--Query for Amounts Due to Vendor Report -->
	<sql-query name="getAmountsDueToVendor">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="FILE_AS" type="encryptedstring" />
		<return-scalar column="IS_ACTIVE" type="boolean" />
		<return-scalar column="WEB_PAGE_ADDRESS" type="encryptedstring" />
		<return-scalar column="SINCE" type="long" />
		<return-scalar column="BALANCE" type="double" />
		<return-scalar column="STREET" type="encryptedstring" />
		<return-scalar column="CITY" type="encryptedstring" />
		<return-scalar column="STATE" type="encryptedstring" />
		<return-scalar column="ZIP" type="encryptedstring" />
		<return-scalar column="PHONE" type="encryptedstring" />
		<return-scalar column="FAX" type="encryptedstring" />
		<return-scalar column="EMAIL" type="encryptedstring" />
		<return-scalar column="TYPE" type="int" />
		
		<![CDATA[
				SELECT P.NAME             AS NAME,
				       P.FILE_AS          AS FILE_AS,
				       P.IS_ACTIVE        AS IS_ACTIVE,
				       P.WEB_PAGE_ADDRESS AS WEB_PAGE_ADDRESS,
				       P.PAYEE_SINCE      AS SINCE,
				       P.BALANCE          AS BALANCE,
				       PA.STREET          AS STREET,
				       PA.CITY            AS CITY,
				       PA.STATE           AS STATE,
				       PA.ZIP             AS ZIP,
				       PP.NUMBER          AS PHONE,
				       PF.NUMBER          AS FAX,
				       PE.EMAIL           AS EMAIL,
				       P.TYPE             AS TYPE
				FROM   PAYEE P
				       LEFT JOIN PAYEE_ADDRESS PA
				         ON P.ID = PA.PAYEE_ID
				            AND PA.TYPE = 1
				       LEFT JOIN PAYEE_PHONE PP
				         ON P.ID = PP.PAYEE_ID
				            AND PP.TYPE = 1
				       LEFT JOIN PAYEE_FAX PF
				         ON P.ID = PF.PAYEE_ID
				            AND PF.TYPE = 1
				       LEFT JOIN PAYEE_EMAIL PE
				         ON P.ID = PE.PAYEE_ID
				            AND PE.TYPE = 1
				WHERE  P.TYPE IN ( 2, 4 )
				       AND P.PAYEE_SINCE BETWEEN :startDate AND :endDate
				       AND P.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<!--Query for Most Profitable Customers Report -->
	<sql-query name="getMostProfitableCustomers">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="INVOICED_AMOUNT" type="double" />
		<return-scalar column="STANDARD_COST" type="double" />
		<return-scalar column="CUSTOMER_MARGIN" type="double" />
		<return-scalar column="CUSTOMER_GROUP" type="encryptedstring" />
		<return-scalar column="CUSTOMER_FILE_AS" type="encryptedstring" />

		<![CDATA[
				SELECT P.NAME    AS CUSTOMER_NAME,
				       SUM(CASE
				             WHEN T.T_TYPE = 4
				                   OR T.T_TYPE = 15 THEN -1 * TI.LINE_TOTAL
				             WHEN T.T_TYPE = 1
				                   OR T.T_TYPE = 8 THEN TI.LINE_TOTAL
				             ELSE 0.0
				           END)  AS INVOICED_AMOUNT,
				       SUM(CASE
				             WHEN T.T_TYPE = 1
				                   OR T.T_TYPE = 8 THEN ( CASE
				             WHEN TI.TYPE = 1 THEN -1 * IT.SATNDARD_COST
				             ELSE 0.0
				                                          END )
				             WHEN T.T_TYPE = 4
				                   OR T.T_TYPE = 15 THEN ( CASE
				                                             WHEN TI.TYPE = 1 THEN CASE
				                                                                     WHEN
				                                             IT.TYPE IN ( 2, 4 ) THEN
				                                             (SELECT SUM(PURCHASE_COST)
				                                              FROM   INVENTORY_PURCHASE IP
				                                              WHERE
				                                           IP.TRANSACTION_ITEM_ID = TI.ID)
				                                             ELSE IT.SATNDARD_COST
				                                                                   END
				                                             ELSE 0.0
				                                           END )
				             ELSE 0.0
				           END)  AS STANDARD_COST,
				       SUM(CASE
				             WHEN T.T_TYPE = 4
				                   OR T.T_TYPE = 15 THEN ( CASE
				                                             WHEN TI.TYPE = 1 THEN -1 * (
				                                             TI.LINE_TOTAL - IT.SATNDARD_COST )
				                                             ELSE TI.LINE_TOTAL
				                                           END )
				             WHEN T.T_TYPE = 1
				                   OR T.T_TYPE = 8 THEN ( CASE
				                                            WHEN TI.TYPE = 1 THEN (
				                                            TI.LINE_TOTAL - IT.SATNDARD_COST )
				                                            ELSE TI.LINE_TOTAL
				                                          END )
				             ELSE 0.0
				           END)  AS CUSTOMER_MARGIN,
				       CG.NAME   AS CUSTOMER_GROUP,
				       P.FILE_AS AS CUSTOMER_FILE_AS
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON T.ID = TI.TRANSACTION_ID
				            AND TI.TYPE IN ( 1, 4 )
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				            AND WC.CUSTOMER_ID IS NOT NULL
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = CS.CUSTOMER_ID
				             OR P.ID = CCM.CUSTOMER_ID
				             OR P.ID = I.CUSTOMER_ID
				             OR P.ID = WC.CUSTOMER_ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				       JOIN CUSTOMER C
				         ON P.ID = C.ID
				       LEFT OUTER JOIN CUSTOMER_GROUP CG
				         ON CG.ID = C.CUSTOMER_GROUP_ID
				WHERE  T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.COMPANY_ID = :companyId
				GROUP  BY P.NAME,
				          P.FILE_AS,
				          CG.NAME
				ORDER  BY P.NAME  
				]]>

	</sql-query>

	<sql-query name="getProfitabilityByCustomerDetail_InvoicedLines">
		<query-param name="companyId" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_TYPE" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="QUANTITY" type="double" />
		<return-scalar column="INVOICED_AMOUNT" type="double" />
		<return-scalar column="STANDARD_COST" type="double" />
		<return-scalar column="CUSTOMER_MARGIN" type="double" />
		<return-scalar column="CUSTOMER_MARGIN_PERCENTAGE" type="double" />
		<return-scalar column="CUSTOMER_GROUP" type="encryptedstring" />
		<return-scalar column="STATUS" type="int" />
		<return-scalar column="REFERENCE" type="encryptedstring" />
	
		<![CDATA[
				SELECT P.NAME            AS CUSTOMER_NAME,
				       CASE
				         WHEN T.T_TYPE = 1 THEN 'Cash Sale'
				         WHEN T.T_TYPE = 4 THEN 'Customer Credit Memo'
				         WHEN T.T_TYPE = 8 THEN 'Invoice'
				         WHEN T.T_TYPE = 15 THEN 'Check'
				       END               AS TRANSACTION_TYPE,
				       T.T_DATE          AS TRANSACTION_DATE,
				       T.NUMBER          AS TRANSACTION_NUMBER,
				       ( CASE
				           WHEN TI.TYPE = 1 THEN IT.NAME
				           WHEN TI.TYPE = 4 THEN A.NAME
				         END )           AS ITEM_NAME,
				       TI.QTY_VALUE      AS QUANTITY,
				       ( CASE
				           WHEN T.T_TYPE = 4
				                 OR T.T_TYPE = 15 THEN -1 * TI.LINE_TOTAL
				           WHEN T.T_TYPE = 1
				                 OR T.T_TYPE = 8 THEN TI.LINE_TOTAL
				           ELSE 0.0
				         END )           AS INVOICED_AMOUNT,
				       ( CASE
				           WHEN T.T_TYPE = 1
				                 OR T.T_TYPE = 8 THEN ( CASE
				           WHEN TI.TYPE = 1 THEN -1 * IT.SATNDARD_COST
				           ELSE 0.0
				                                        END )
				           WHEN T.T_TYPE = 4
				                 OR T.T_TYPE = 15 THEN ( CASE
				                                           WHEN TI.TYPE = 1 THEN CASE
				                                                                   WHEN
				                                           IT.TYPE IN ( 2, 4 ) THEN
				                                           (SELECT SUM(PURCHASE_COST)
				                                            FROM   INVENTORY_PURCHASE IP
				                                            WHERE
				                                         IP.TRANSACTION_ITEM_ID = TI.ID)
				                                           ELSE IT.SATNDARD_COST
				                                                                 END
				                                           ELSE 0.0
				                                         END )
				           ELSE 0.0
				         END )           AS STANDARD_COST,
				       ( CASE
				           WHEN T.T_TYPE = 4
				                 OR T.T_TYPE = 15 THEN ( CASE
				                                           WHEN TI.TYPE = 1 THEN -1 * (
				                                           TI.LINE_TOTAL - IT.SATNDARD_COST )
				                                           ELSE TI.LINE_TOTAL
				                                         END )
				           WHEN T.T_TYPE = 1
				                 OR T.T_TYPE = 8 THEN ( CASE
				                                          WHEN TI.TYPE = 1 THEN (
				                                          TI.LINE_TOTAL - IT.SATNDARD_COST )
				                                          ELSE TI.LINE_TOTAL
				                                        END )
				           ELSE 0.0
				         END )           AS CUSTOMER_MARGIN,
				       Round(( CASE
				                 WHEN T.T_TYPE = 4
				                       OR T.T_TYPE = 15 THEN -1 * ( CASE
				                                                      WHEN TI.TYPE = 1 THEN
				               ( ( TI.LINE_TOTAL - IT.SATNDARD_COST ) / TI.LINE_TOTAL ) * 100
				               ELSE 100
				               END )
				                 WHEN T.T_TYPE = 1
				                       OR T.T_TYPE = 8 THEN ( CASE
				                                                WHEN TI.TYPE = 1 THEN
				                                                (
				                 ( TI.LINE_TOTAL - IT.SATNDARD_COST ) / TI.LINE_TOTAL ) * 100
				                                                ELSE 100
				                                              END )
				                 ELSE 100
				               END ), 2) AS CUSTOMER_MARGIN_PERCENTAGE,
				       CG.NAME           AS CUSTOMER_GROUP,
				       T.STATUS          AS STATUS,
				       T.REFERENCE       AS REFERENCE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON T.ID = TI.TRANSACTION_ID
				            AND TI.TYPE IN ( 1, 4 )
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				            AND WC.CUSTOMER_ID IS NOT NULL
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = CS.CUSTOMER_ID
				             OR P.ID = CCM.CUSTOMER_ID
				             OR P.ID = I.CUSTOMER_ID
				             OR P.ID = WC.CUSTOMER_ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON P.ID = C.ID
				       LEFT OUTER JOIN CUSTOMER_GROUP CG
				         ON CG.ID = C.CUSTOMER_GROUP_ID
				WHERE  P.ID = :customerId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.COMPANY_ID = :companyId
				ORDER  BY P.NAME,
				          ITEM_NAME  
				]]>

	</sql-query>

	<!--Query for Transaction Detail By TaxItem Report -->
	<sql-query name="getTransactionDetailByTaxItem">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="transaction_id" type="long" />
		<return-scalar column="payee_name" type="encryptedstring" />
		<return-scalar column="taxagency_name" type="encryptedstring" />
		<return-scalar column="taxItem_name" type="encryptedstring" />
		<return-scalar column="rate" type="double" />
		<return-scalar column="transaction_type" type="int" />
		<return-scalar column="transaction_date" type="long" />
		<return-scalar column="transaction_number" type="encryptedstring" />
		<return-scalar column="memo" type="encryptedstring" />
		<return-scalar column="taxable_amount" type="double" />
		<return-scalar column="sales_tax" type="double" />
		<return-scalar column="void" type="boolean" />
		
		<![CDATA[
				SELECT T.ID           AS TRANSACTION_ID,
				       P.NAME         AS PAYEE_NAME,
				       P1.NAME        AS TAXAGENCY_NAME,
				       TIG.NAME       AS TAXITEM_NAME,
				       VRC.RATE       AS RATE,
				       T.T_TYPE       AS TRANSACTION_TYPE,
				       T.T_DATE       AS TRANSACTION_DATE,
				       T.NUMBER       AS TRANSACTION_NUMBER,
				       T.MEMO         AS MEMO,
				       VRC.LINE_TOTAL AS TAXABLE_AMOUNT,
				       VRC.VAT_AMOUNT AS SALES_TAX,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END            AS VOID
				FROM   TAX_RATE_CALCULATION VRC
				       LEFT OUTER JOIN TRANSACTION T
				         ON VRC.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN INVOICE I
				         ON I.ID = T.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON CCM.ID = T.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON WC.ID = T.ID
				            AND WC.PAY_TO_TYPE IN ( 1, 3 )
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = I.CUSTOMER_ID
				             OR P.ID = CS.CUSTOMER_ID
				             OR P.ID = CCM.CUSTOMER_ID
				             OR P.ID = WC.CUSTOMER_ID
				             OR P.ID = WC.TAX_AGENCY_ID
				       LEFT OUTER JOIN TAX_ITEM TITEM
				         ON VRC.TAX_ITEM_ID = TITEM.ID
				       LEFT OUTER JOIN TAX_ITEM_GROUPS TIG
				         ON TIG.ID = TITEM.ID
				       LEFT OUTER JOIN TAXAGENCY TA
				         ON TA.ID = TITEM.TAX_AGENCY
				       LEFT OUTER JOIN PAYEE P1
				         ON P1.ID = TA.ID
				WHERE  T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.COMPANY_ID = :companyId
				ORDER  BY TIG.NAME,
				          P1.NAME  
				]]>

	</sql-query>


	<!--Query for Transaction Detail By TaxItem Report for a Particular TaxCode. -->
	<sql-query name="getTransactionDetailByTaxItemForParticularTaxItem">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="taxItemName" type="String" />

		<return-scalar column="transaction_id" type="long" />
		<return-scalar column="payee_name" type="encryptedstring" />
		<return-scalar column="taxagency_name" type="encryptedstring" />
		<return-scalar column="taxItem_name" type="encryptedstring" />
		<return-scalar column="rate" type="double" />
		<return-scalar column="transaction_type" type="int" />
		<return-scalar column="transaction_date" type="long" />
		<return-scalar column="transaction_number" type="encryptedstring" />
		<return-scalar column="memo" type="encryptedstring" />
		<return-scalar column="taxable_amount" type="double" />
		<return-scalar column="sales_tax" type="double" />
		<return-scalar column="void" type="boolean" />

		<![CDATA[
				SELECT T.ID           AS TRANSACTION_ID,
				       P.NAME         AS PAYEE_NAME,
				       P1.NAME        AS TAXAGENCY_NAME,
				       TIG.NAME       AS TAXITEM_NAME,
				       VRC.RATE       AS RATE,
				       T.T_TYPE       AS TRANSACTION_TYPE,
				       T.T_DATE       AS TRANSACTION_DATE,
				       T.NUMBER       AS TRANSACTION_NUMBER,
				       T.MEMO         AS MEMO,
				       VRC.LINE_TOTAL AS TAXABLE_AMOUNT,
				       VRC.VAT_AMOUNT AS SALES_TAX,
				       CASE
				         WHEN T.SAVE_STATUS = 204 THEN TRUE
				         ELSE FALSE
				       END            AS VOID
				FROM   TAX_RATE_CALCULATION VRC
				       LEFT OUTER JOIN TRANSACTION T
				         ON VRC.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN INVOICE I
				         ON I.ID = T.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON CCM.ID = T.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON WC.ID = T.ID
				            AND WC.PAY_TO_TYPE IN ( 1, 3 )
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = I.CUSTOMER_ID
				             OR P.ID = CS.CUSTOMER_ID
				             OR P.ID = CCM.CUSTOMER_ID
				             OR P.ID = WC.CUSTOMER_ID
				             OR P.ID = WC.TAX_AGENCY_ID
				       LEFT OUTER JOIN TAX_ITEM TITEM
				         ON VRC.TAX_ITEM_ID = TITEM.ID
				       LEFT OUTER JOIN TAX_ITEM_GROUPS TIG
				         ON TIG.ID = TITEM.ID
				       LEFT OUTER JOIN TAXAGENCY TA
				         ON TA.ID = TITEM.TAX_AGENCY
				       LEFT OUTER JOIN PAYEE P1
				         ON P1.ID = TA.ID
				WHERE  TIG.NAME = :taxItemName
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				ORDER  BY TIG.NAME,
				          P1.NAME  
				]]>

	</sql-query>

	<sql-query name="getPurchaseReportItems">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT DISTINCT( IT.ID )       AS ITEM_ID,
				               IT.TYPE         AS ITEM_TYPE,
				               IT.NAME         AS ITEM_NAME,
				               Distinct(IT.ID) AS ITEM_ID
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON T.ID = TI.TRANSACTION_ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				             OR V.ID = VCM.VENDOR_ID
				             OR V.ID = EB.VENDOR_ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				WHERE  T.T_TYPE IN ( 2, 6, 14 )
				       AND T.COMPANY_ID = :companyId
				       AND TI.ITEM_ID IS NOT NULL
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				GROUP  BY IT.NAME
				ORDER  BY IT.TYPE  
				]]>

	</sql-query>

	<sql-query name="getSalesReportItems">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT DISTINCT( IT.ID )       AS ITEM_ID,
				               IT.TYPE         AS ITEM_TYPE,
				               IT.NAME         AS ITEM_NAME,
				               Distinct(IT.ID) AS ITEM_ID
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON T.ID = TI.TRANSACTION_ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CS.CUSTOMER_ID
				             OR C.ID = CCM.CUSTOMER_ID
				             OR C.ID = I.CUSTOMER_ID
				       LEFT OUTER JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				WHERE  T.T_TYPE IN ( 1, 4, 8 )
				       AND TI.ITEM_ID IS NOT NULL
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.COMPANY_ID = :companyId
				GROUP  BY IT.NAME
				ORDER  BY IT.TYPE  
				]]>

	</sql-query>

	<sql-query name="getTransactionHistoryCustomers">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />

		<![CDATA[
				SELECT DISTINCT( C.ID )       AS CUSTOMER_ID,
				               P.NAME         AS CUSTOMER_NAME,
				               Distinct(P.ID) AS CUSTOMER_ID
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON T.ID = CR.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN JOURNAL_ENTRY JE
				         ON JE.ID = T.ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = CS.CUSTOMER_ID
				             OR C.ID = CCM.CUSTOMER_ID
				             OR C.ID = CR.CUSTOMER_ID
				             OR C.ID = I.CUSTOMER_ID
				             OR C.ID = RP.CUSTOMER_ID
				             OR C.ID = JE.PAYEE_ID
				             OR C.ID = WC.CUSTOMER_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = C.ID
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_TYPE IN ( 1, 4, 5, 8,
				                         10, 12, 15 )
				       AND C.ID IS NOT NULL
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				ORDER  BY P.NAME  
				]]>

	</sql-query>

	<sql-query name="getTransactionHistoryVendors">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="VENDOR_ID" type="string" />
		<return-scalar column="VENDOR_NAME" type="encryptedstring" />

		<![CDATA[
				SELECT DISTINCT( V.ID ) AS VENDOR_ID,
				               P.NAME   AS VENDOR_NAME,
				               P.ID     AS VENDOR_ID
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				             OR V.ID = VCM.VENDOR_ID
				             OR V.ID = EB.VENDOR_ID
				             OR V.ID = PB.VENDOR_ID
				             OR V.ID = VP.VENDOR_ID
				             OR V.ID = CCC.VENDOR_ID
				             OR V.ID = WC.VENDOR_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_TYPE IN ( 2, 3, 6, 10,
				                         11, 14, 15, 25 )
				       AND V.ID IS NOT NULL
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				ORDER  BY P.NAME  
				]]>

	</sql-query>

	<sql-query name="getAutomaticTransactions">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="payee_name" type="encryptedstring" />
		<return-scalar column="transaction_id" type="long" />
		<return-scalar column="transaction_type" type="int" />
		<return-scalar column="transaction_date" type="long" />
		<return-scalar column="transaction_number" type="encryptedstring" />
		<return-scalar column="transaction_total" type="double" />
		<return-scalar column="memo" type="encryptedstring" />
		
		<![CDATA[
				SELECT CASE
				         WHEN T.T_TYPE = 15 THEN WC.IN_FAVOUR_OF
				         ELSE P.NAME
				       END      AS PAYEE_NAME,
				       T.ID     AS TRANSACTION_ID,
				       T.T_TYPE AS TRANSACTION_TYPE,
				       T.T_DATE AS TRANSACTION_DATE,
				       T.NUMBER AS TRANSACTION_NUMBER,
				       T.TOTAL  AS TRANSACTION_TOTAL,
				       T.MEMO   AS MEMO
				FROM   TRANSACTION T
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN ESTIMATE E
				         ON E.ID = T.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = CP.VENDOR_ID
				             OR P.ID = CCC.VENDOR_ID
				             OR P.ID = EB.VENDOR_ID
				             OR P.ID = VCM.VENDOR_ID
				             OR P.ID = WC.VENDOR_ID
				             OR P.ID = CS.CUSTOMER_ID
				             OR P.ID = CCM.CUSTOMER_ID
				             OR P.ID = WC.CUSTOMER_ID
				             OR P.ID = WC.TAX_AGENCY_ID
				             OR P.ID = I.CUSTOMER_ID
				             OR P.ID = E.CUSTOMER_ID
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.IS_AUTOMATIC_TRANSACTION = TRUE
				GROUP  BY T.ID,
				          P.NAME,
				          WC.IN_FAVOUR_OF
				ORDER  BY T.T_TYPE,
				          T.T_DATE  
				]]>

	</sql-query>

	<sql-query name="getTransactionDetailByAccount">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="account_name" type="encryptedstring" />
		<return-scalar column="payee_name" type="encryptedstring" />
		<return-scalar column="transaction_id" type="long" />
		<return-scalar column="transaction_type" type="int" />
		<return-scalar column="transaction_date" type="long" />
		<return-scalar column="transaction_number" type="encryptedstring" />
		<return-scalar column="amount" type="double" />
		<return-scalar column="memo" type="encryptedstring" />
		
		<![CDATA[
				SELECT A.NAME         AS ACCOUNT_NAME,
				       CASE
				         WHEN T.T_TYPE = 15 THEN WC.IN_FAVOUR_OF
				         ELSE P.NAME
				       END            AS PAYEE_NAME,
				       T.ID           AS TRANSACTION_ID,
				       T.T_TYPE		  AS TRANSACTION_TYPE,
				       T.T_DATE       AS TRANSACTION_DATE,
				       T.NUMBER       AS TRANSACTION_NUMBER,
				       SUM(AT.AMOUNT) AS AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 25
				              THEN NULL
				         ELSE T.MEMO
				       END            AS MEMO
				FROM   ACCOUNT_TRANSACTION AT
				       LEFT OUTER JOIN TRANSACTION T
				         ON AT.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = AT.ACCOUNT_ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
				         ON T.ID = CPP.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON T.ID = CR.ID
				       LEFT JOIN JOURNAL_ENTRY JE
				         ON T.ID = JE.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = CP.VENDOR_ID
				             OR P.ID = CCC.VENDOR_ID
				             OR P.ID = EB.VENDOR_ID
				             OR P.ID = VCM.VENDOR_ID
				             OR P.ID = WC.VENDOR_ID
				             OR P.ID = CS.CUSTOMER_ID
				             OR P.ID = CCM.CUSTOMER_ID
				             OR P.ID = WC.CUSTOMER_ID
				             OR P.ID = WC.TAX_AGENCY_ID
				             OR P.ID = I.CUSTOMER_ID
				             OR P.ID = RP.CUSTOMER_ID
				             OR P.ID = PB.VENDOR_ID
				             OR P.ID = VP.VENDOR_ID
				             OR P.ID = CPP.CUSTOMER_ID
				             OR P.ID = CR.CUSTOMER_ID
				       LEFT OUTER JOIN USERS U
				         ON U.ID = CP.EMPLOYEE
				       LEFT OUTER JOIN CLIENT C
				         ON C.ID = U.CLIENT_ID
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_TYPE NOT IN ( 9 )
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND AT.AMOUNT != 0
				GROUP  BY T.ID,
				          PB.ID,
				          A.FLOW,
				          A.NAME,
				          P.NAME,
				          WC.IN_FAVOUR_OF
				ORDER  BY A.FLOW,
				          A.NAME,
				          T.T_DATE DESC  
				]]>

	</sql-query>

	<sql-query name="getTransactionDetailByAccount_ForParticularAccount">
		<query-param name="companyId" type="long" />
		<query-param name="accountName" type="String" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="account_name" type="encryptedstring" />
		<return-scalar column="payee_name" type="encryptedstring" />
		<return-scalar column="transaction_id" type="long" />
		<return-scalar column="transaction_type" type="int" />
		<return-scalar column="transaction_date" type="long" />
		<return-scalar column="transaction_number" type="encryptedstring" />
		<return-scalar column="amount" type="double" />
		<return-scalar column="memo" type="encryptedstring" />
		<return-scalar column="c_name" type="encryptedstring" />
		
		<![CDATA[
				SELECT A.NAME         AS ACCOUNT_NAME,
				       CASE
				         WHEN T.T_TYPE = 28 THEN NULL
				         WHEN T.T_TYPE = 15 THEN WC.IN_FAVOUR_OF
				         ELSE P.NAME
				       END            AS PAYEE_NAME,
				       T.ID           AS TRANSACTION_ID,
				       T.T_TYPE       AS TRANSACTION_TYPE,
				       T.T_DATE       AS TRANSACTION_DATE,
				       T.NUMBER       AS TRANSACTION_NUMBER,
				       SUM(AT.AMOUNT) AS AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 25
				              THEN NULL
				         ELSE T.MEMO
				       END            AS MEMO,
				       C.FULL_NAME    AS C_NAME
				FROM   ACCOUNT_TRANSACTION AT
				       LEFT OUTER JOIN TRANSACTION T
				         ON AT.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = AT.ACCOUNT_ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
				         ON T.ID = CPP.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON T.ID = CR.ID
				       LEFT JOIN JOURNAL_ENTRY JE
				         ON T.ID = JE.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = CP.VENDOR_ID
				             OR P.ID = CCC.VENDOR_ID
				             OR P.ID = EB.VENDOR_ID
				             OR P.ID = VCM.VENDOR_ID
				             OR P.ID = WC.VENDOR_ID
				             OR P.ID = CS.CUSTOMER_ID
				             OR P.ID = CCM.CUSTOMER_ID
				             OR P.ID = WC.CUSTOMER_ID
				             OR P.ID = WC.TAX_AGENCY_ID
				             OR P.ID = I.CUSTOMER_ID
				             OR P.ID = RP.CUSTOMER_ID
				             OR P.ID = PB.VENDOR_ID
				             OR P.ID = VP.VENDOR_ID
				             OR P.ID = CPP.CUSTOMER_ID
				             OR P.ID = CR.CUSTOMER_ID
				       LEFT OUTER JOIN USERS U
				         ON U.ID = CP.EMPLOYEE
				       LEFT OUTER JOIN CLIENT C
				         ON C.ID = U.CLIENT_ID
				WHERE  T.COMPANY_ID = :companyId
				       AND A.NAME = :accountName
				       AND T.T_TYPE NOT IN ( 9 )
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND AT.AMOUNT != 0
				GROUP  BY T.ID,
				          PB.ID,
				          A.NAME,
				          P.NAME,
				          C.FULL_NAME,
				          WC.IN_FAVOUR_OF
				ORDER  BY A.NAME  
				]]>

	</sql-query>

	<sql-query name="getCountOfParentAccount">
		<query-param name="parentId" type="long" />
		<query-param name="companyId" type="long" />
		
		<![CDATA[
				SELECT COUNT(*)
				FROM   ACCOUNT A
				WHERE  A.PARENT_ID = :parentId
				       AND A.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<!-- Queries required for UK Version -->
	<sql-query name="get_BOX1_VATdueOnSalesAndOtherOutputs">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		
		<![CDATA[
				SELECT SUM(CASE
				             WHEN T.T_TYPE = 12
				                  AND T.SHOW_PRICES_WITH_VAT_OR_VAT_INCLUSIVE = FALSE THEN 0.0
				             ELSE T.TOTAL_VAT
				           END) AS VAT_TOTAL
				FROM   TRANSACTION T
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_TYPE IN ( 1, 4, 8, 12 )  
				]]>

	</sql-query>

	<sql-query name="get_BOX2_VATdueOnAcquisitionsFormOtherECMemberStates">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<![CDATA[
				SELECT SUM(T.TOTAL_VAT) AS VAT_TOTAL
				FROM   TRANSACTION T
				WHERE  T.T_TYPE IN ( 2, 3, 6, 14 )
				       AND T.EU_VAT_EXEMPT_PAYEE = TRUE
				       AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query
		name="get_BOX4_VATreclaimedOnSalesAndOtherInputs_includingAcquisitionsFromEC">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		
		<![CDATA[
				SELECT SUM(T.TOTAL_VAT) AS VAT_TOTAL
				FROM   TRANSACTION T
				WHERE  T.T_TYPE IN ( 2, 3, 6, 14 )  
				]]>

	</sql-query>

	<sql-query name="get_BOX6_TotalOfSalesAndOtherOutputsExcludingVAT">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<![CDATA[
				SELECT SUM(CASE
				             WHEN T.T_TYPE = 12
				                  AND T.SHOW_PRICES_WITH_VAT_OR_VAT_INCLUSIVE = FALSE THEN 0.0
				             ELSE T.NET_AMOUNT
				           END) AS NET_AMOUNT
				FROM   TRANSACTION T
				WHERE  T.T_TYPE IN ( 1, 4, 8, 12 )
				       AND T.COMPANY_ID = :companyId  		
				]]>

	</sql-query>

	<sql-query name="get_BOX7_TotalOfPurchasesAndOtherInputsExcludingVAT">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<![CDATA[
				SELECT SUM(T.NET_AMOUNT) AS NET_AMOUNT
				FROM   TRANSACTION T
				WHERE  T.T_TYPE IN ( 2, 3, 6, 14 )
				       AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query
		name="get_BOX8_TotalSuppliesOfGoodsExcludingVAT_toOtherECMemberStates">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<![CDATA[
				SELECT SUM(T.NET_AMOUNT) AS NET_AMOUNT
				FROM   TRANSACTION T
				WHERE  T.T_TYPE IN ( 1, 4, 8 )
				       AND T.EU_VAT_EXEMPT_PAYEE = TRUE
				       AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query
		name="get_BOX9_TotalAcquisitionOfGoodsExcludingVAT_fromOtherECMemberStates">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<![CDATA[
				SELECT SUM(T.NET_AMOUNT) AS NET_AMOUNT
				FROM   TRANSACTION T
				WHERE  T.T_TYPE IN ( 2, 3, 6, 14 )
				       AND T.EU_VAT_EXEMPT_PAYEE = TRUE
				       AND T.COMPANY_ID = :companyId  
				]]>

	</sql-query>

	<sql-query name="getCheckDetailReport">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="paymentmethod" type="encryptedstring" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ID" type="long" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="PAYMENT_METHOD" type="encryptedstring" />
		<return-scalar column="PAYEE_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="MEMO" type="encryptedstring" />
		
		<![CDATA[
				SELECT T.T_TYPE         AS TYPE,
				       T.ID             AS ID,
				       T.NUMBER         AS NUMBER,
				       T.T_DATE         AS DATE,
				       T.PAYMENT_METHOD AS PAYMENT_METHOD,
				       P.NAME           AS PAYEE_NAME,
				       A.NAME           AS ACCOUNT_NAME,
				       CASE
				         WHEN T.T_TYPE = 11
				              AND A.A_TYPE NOT IN ( 4, 9, 13 ) THEN TPB.PAYMENT
				         ELSE AT.AMOUNT
				       END              AS AMOUNT,
				       CASE
				         WHEN T.T_TYPE = 25
				              THEN NULL
				         ELSE T.MEMO
				       END              AS MEMO
				FROM   ACCOUNT_TRANSACTION AT
				       LEFT OUTER JOIN TRANSACTION T
				         ON AT.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN TRANSACTION_PAYBILL TPB
				         ON TPB.PAYBILL_ID = PB.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON EB.ID = TPB.ENTER_BILL_ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = EB.ID
				       LEFT OUTER JOIN VENDOR V
				         ON V.ID = CP.VENDOR_ID
				             OR V.ID = PB.VENDOR_ID
				             OR V.ID = VP.VENDOR_ID
				             OR V.ID = CCC.VENDOR_ID
				             OR V.ID = WC.VENDOR_ID
				       LEFT OUTER JOIN CUSTOMER C
				         ON C.ID = WC.CUSTOMER_ID
				       LEFT OUTER JOIN TAXAGENCY TA
				         ON TA.ID = WC.TAX_AGENCY_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = V.ID
				             OR P.ID = C.ID
				             OR P.ID = TA.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON ( ( T.T_TYPE = 11
				                AND A.A_TYPE NOT IN ( 9 )
				                AND A.ID = AT.ACCOUNT_ID )
				               OR ( T.T_TYPE = 11
				                    AND A.A_TYPE NOT IN ( 4, 9, 13 )
				                    AND A.ID = TI.ACCOUNT_ID ) )
				             OR ( ( T.T_TYPE != 11)
				                  AND A.ID = AT.ACCOUNT_ID )
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.PAYMENT_METHOD LIKE :paymentmethod
				       AND P.NAME IS NOT NULL
				GROUP  BY T.ID,
				          A.ID  
          		]]>

	</sql-query>

	<sql-query name="getSalesByLocationDetail">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TRANSACTIONDATE" type="long" />
		<return-scalar column="TRANSACTIONTYPE" type="int" />
		<return-scalar column="TRANSACTIONNUMBER" type="encryptedstring" />
		<return-scalar column="ACCOUNTNAME" type="encryptedstring" />
		<return-scalar column="ITEMNAME" type="encryptedstring" />
		<return-scalar column="ITEMTOTAL" type="double" />
		<return-scalar column="LOCATIONNAME" type="encryptedstring" />
		<return-scalar column="TRANSACTIONID" type="long" />
		
		<![CDATA[
				SELECT T.T_DATE                          AS TRANSACTIONDATE,
				       T.T_TYPE                          AS TRANSACTIONTYPE,
				       T.NUMBER                          AS TRANSACTIONNUMBER,
				       A.NAME                            AS ACCOUNTNAME,
				       I.NAME                            AS ITEMNAME,
				       TI.LINE_TOTAL * T.CURRENCY_FACTOR AS ITEMTOTAL,
				       L.LOCATION_NAME                   AS LOCATIONNAME,
				       T.ID                              AS TRANSACTIONID
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				       LEFT OUTER JOIN ITEM I
				         ON I.ID = TI.ITEM_ID
				       LEFT OUTER JOIN LOCATION L
				         ON L.ID = T.LOCATION_ID
				WHERE  T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.T_TYPE IN ( 8, 1 )
				       AND T.COMPANY_ID = :companyId
				ORDER  BY L.LOCATION_NAME  
				]]>

	</sql-query>

	<sql-query name="getSalesByLocationSummary">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEMTOTAL" type="double" />
		<return-scalar column="LOCATIONNAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT SUM(TI.LINE_TOTAL * T.CURRENCY_FACTOR) AS ITEMTOTAL,
				       L.LOCATION_NAME                        AS LOCATIONNAME
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				       LEFT OUTER JOIN ITEM I
				         ON I.ID = TI.ITEM_ID
				       LEFT OUTER JOIN LOCATION L
				         ON L.ID = T.LOCATION_ID
				WHERE  T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.T_TYPE IN ( 8, 1 )
				       AND T.COMPANY_ID = :companyId
				GROUP  BY L.LOCATION_NAME
				ORDER  BY L.LOCATION_NAME  
				]]>

	</sql-query>

	<sql-query name="getSalesByLocationDetailForLocation">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="locationORClassName" type="String" />

		<return-scalar column="TRANSACTIONDATE" type="long" />
		<return-scalar column="TRANSACTIONTYPE" type="int" />
		<return-scalar column="TRANSACTIONNUMBER" type="encryptedstring" />
		<return-scalar column="ACCOUNTNAME" type="encryptedstring" />
		<return-scalar column="ITEMNAME" type="encryptedstring" />
		<return-scalar column="ITEMTOTAL" type="double" />
		<return-scalar column="LOCATIONNAME" type="encryptedstring" />
		<return-scalar column="TRANSACTIONID" type="long" />
		
		<![CDATA[
				SELECT T.T_DATE        AS TRANSACTIONDATE,
				       T.T_TYPE        AS TRANSACTIONTYPE,
				       T.NUMBER        AS TRANSACTIONNUMBER,
				       A.NAME          AS ACCOUNTNAME,
				       I.NAME          AS ITEMNAME,
				       TI.LINE_TOTAL * T.CURRENCY_FACTOR   AS ITEMTOTAL,
				       L.LOCATION_NAME AS LOCATIONNAME,
				       T.ID            AS TRANSACTIONID
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				       LEFT OUTER JOIN ITEM I
				         ON I.ID = TI.ITEM_ID
				       LEFT OUTER JOIN LOCATION L
				         ON L.ID = T.LOCATION_ID
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.T_TYPE IN ( 8, 1 )
				       AND CASE
				             WHEN :locationORClassName IS NULL THEN L.LOCATION_NAME IS NULL
				             ELSE L.LOCATION_NAME = :locationORClassName
				           END
				ORDER  BY L.LOCATION_NAME  
				]]>

	</sql-query>

	<sql-query name="getSalesByClassDetail">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTIONDATE" type="long" />
		<return-scalar column="TRANSACTIONTYPE" type="int" />
		<return-scalar column="TRANSACTIONNUMBER" type="encryptedstring" />
		<return-scalar column="ACCOUNTNAME" type="encryptedstring" />
		<return-scalar column="ITEMNAME" type="encryptedstring" />
		<return-scalar column="ITEMTOTAL" type="double" />
		<return-scalar column="CLASSNAME" type="encryptedstring" />
		<return-scalar column="TRANSACTIONID" type="long" />
		<return-scalar column="PAENT_ID" type="long" />
		<return-scalar column="CLASS_ID" type="long" />
		<return-scalar column="PARENT_COUNT" type="int" />
		
		<![CDATA[
				SELECT T.T_DATE                          AS TRANSACTIONDATE,
				       T.T_TYPE                          AS TRANSACTIONTYPE,
				       T.NUMBER                          AS TRANSACTIONNUMBER,
				       A.NAME                            AS ACCOUNTNAME,
				       I.NAME                            AS ITEMNAME,
				       TI.LINE_TOTAL * T.CURRENCY_FACTOR AS ITEMTOTAL,
				       AC.CLASS_NAME                     AS CLASSNAME,
				       T.ID                              AS TRANSACTIONID,
				       AC.PARENT_ID                      AS PAENT_ID,
				       AC.ID                             AS CLASS_ID,
				       AC.PARENT_COUNT                   AS PARENT_COUNT
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				       LEFT OUTER JOIN ITEM I
				         ON I.ID = TI.ITEM_ID
				       LEFT OUTER JOIN ACCOUNTER_CLASS AC
				         ON AC.ID = TI.TRANS_ITEM_ACCOUNTER_CLASS
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND AC.ID IS NOT NULL 
				       AND T.T_TYPE IN ( 8, 1 )
				ORDER  BY AC.PATH DESC  
				]]>

	</sql-query>

	<sql-query name="getSalesByClassSummary">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEMTOTAL" type="double" />
		<return-scalar column="CLASSNAME" type="encryptedstring" />
		<return-scalar column="PARENT_ID" type="long" />
		<return-scalar column="CLASS_ID" type="long" />
		<return-scalar column="PARENT_COUNT" type="int" />
		
		<![CDATA[
				SELECT SUM(TI.LINE_TOTAL * T.CURRENCY_FACTOR) AS ITEMTOTAL,
				       AC.CLASS_NAME                          AS CLASSNAME,
				       AC.PARENT_ID                           AS PARENT_ID,
				       AC.ID                                  AS CLASS_ID,
				       AC.PARENT_COUNT                        AS PARENT_COUNT
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				       LEFT OUTER JOIN ITEM I
				         ON I.ID = TI.ITEM_ID
				       LEFT OUTER JOIN ACCOUNTER_CLASS AC
				         ON AC.ID = TI.TRANS_ITEM_ACCOUNTER_CLASS
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.T_TYPE IN ( 8, 1 )
				       AND AC.ID IS NOT NULL
				GROUP  BY AC.CLASS_NAME,AC.PARENT_ID,AC.ID
				ORDER  BY AC.PATH DESC   
				]]>

	</sql-query>

	<sql-query name="getSalesByClassDetailForClass">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="locationORClassName" type="string" />
		<query-param name="companyId" type="long" />
		<query-param name="P_ACCOUNT" type="long" />

		<return-scalar column="TRANSACTIONDATE" type="long" />
		<return-scalar column="TRANSACTIONTYPE" type="int" />
		<return-scalar column="TRANSACTIONNUMBER" type="encryptedstring" />
		<return-scalar column="ACCOUNTNAME" type="encryptedstring" />
		<return-scalar column="ITEMNAME" type="encryptedstring" />
		<return-scalar column="ITEMTOTAL" type="double" />
		<return-scalar column="CLASSNAME" type="encryptedstring" />
		<return-scalar column="TRANSACTIONID" type="long" />
		<return-scalar column="PARENT_ID" type="long" />
		<return-scalar column="PARENT_COUNT" type="int" />

		<![CDATA[
				SELECT T.T_DATE      AS TRANSACTIONDATE,
				       T.T_TYPE      AS TRANSACTIONTYPE,
				       T.NUMBER      AS TRANSACTIONNUMBER,
				       A.NAME        AS ACCOUNTNAME,
				       I.NAME        AS ITEMNAME,
				       TI.LINE_TOTAL * T.CURRENCY_FACTOR AS ITEMTOTAL,
				       AC.CLASS_NAME AS CLASSNAME,
				       T.ID          AS TRANSACTIONID,
				       AC.PARENT_ID AS PARENT_ID,
				        AC.PARENT_COUNT  AS PARENT_COUNT
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				       LEFT OUTER JOIN ITEM I
				         ON I.ID = TI.ITEM_ID
				       LEFT OUTER JOIN ACCOUNTER_CLASS AC
				         ON AC.ID = TI.TRANS_ITEM_ACCOUNTER_CLASS
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.T_TYPE IN ( 8, 1 )
				       AND CASE
				             WHEN :locationORClassName IS NULL THEN AC.CLASS_NAME IS NULL
				             ELSE AC.CLASS_NAME = :locationORClassName
				           END
				ORDER  BY AC.PATH  
				]]>

	</sql-query>

	<sql-query name="getProfitAndLossByClass">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ACCOUNT_ID" type="long" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNT_NUMBER" type="encryptedstring" />
		<return-scalar column="ACCOUNT_TYPE" type="int" />
		<return-scalar column="CLASSID" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="PARENT" type="long" />
		
		<![CDATA[
	                    SELECT A.ID           AS ACCOUNT_ID,
						       A.NAME         AS ACCOUNT_NAME,
						       A.A_NUMBER     AS ACCOUNT_NUMBER,
						       A.A_TYPE       AS ACCOUNT_TYPE,
						       AC .ID         AS CLASSID,
						       SUM(AT.AMOUNT) AS AMOUNT,
						       T.ID           AS TRANSACTION_ID,
						       AC.PARENT_ID   AS PARENT
						FROM   ACCOUNT_TRANSACTION AT
						       LEFT OUTER JOIN ACCOUNT A
						         ON A.ID = AT.ACCOUNT_ID
						       LEFT OUTER JOIN TRANSACTION T
						         ON T.ID = AT.TRANSACTION_ID
						       LEFT OUTER JOIN TRANSACTION_ITEM TI
						         ON TI.TRANSACTION_ID = T.ID
						       LEFT OUTER JOIN ACCOUNTER_CLASS AC
						         ON AC.ID = TI.TRANS_ITEM_ACCOUNTER_CLASS
						WHERE  T.COMPANY_ID = :companyId
						       AND AC.ID IS NOT NULL
						       AND T.T_DATE BETWEEN :startDate AND :endDate
						       AND A.A_TYPE IN ( 14, 15, 16, 17, 18 )
						       AND A.BASE_TYPE != 0
						GROUP  BY CLASSID,
						          A.ID,
						          T.ID
						ORDER  BY 
						          A.BASE_TYPE,
						          A.SUB_BASE_TYPE,
						          A.GROUP_TYPE,
						          A.A_TYPE,
						          A.ID,
						          AC.PATH DESC    
				]]>

	</sql-query>

	<sql-query name="getRealisedExchangeLossesOrGains">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="PAYEE_NAME" type="encryptedstring" />
		<return-scalar column="CURRENCY" type="encryptedstring" />
		<return-scalar column="EXCHANGE_RATE" type="double" />
		<return-scalar column="REALISED_GAIN_OR_LOSS" type="double" />
		
		<![CDATA[
				SELECT T.ID              AS TRANSACTION_ID,
				       T.T_TYPE 	     AS TRANSACTION_TYPE,
				       T.T_DATE          AS TRANSACTION_DATE,
				       CASE
				         WHEN T.T_TYPE = 15 THEN WC.IN_FAVOUR_OF
				         ELSE P.NAME
				       END               AS PAYEE_NAME,
				       C.FORMAL_NAME     AS CURRENCY,
				       T.CURRENCY_FACTOR AS EXCHANGE_RATE,
				       SUM(AT.AMOUNT)    AS REALISED_GAIN_OR_LOSS
				FROM   ACCOUNT_TRANSACTION AT
				       LEFT OUTER JOIN TRANSACTION T
				         ON AT.TRANSACTION_ID = T.ID
				       LEFT JOIN CURRENCY C
				         ON C.ID = T.CURRENCY
				       LEFT JOIN COMPANY COM
				         ON COM.ID = AT.COMPANY_ID
				       LEFT OUTER JOIN CASH_PURCHASE CP
				         ON T.ID = CP.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON T.ID = CS.ID
				       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
				         ON T.ID = CCC.ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
				         ON T.ID = CCM.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON T.ID = EB.ID
				       LEFT OUTER JOIN INVOICE I
				         ON T.ID = I.ID
				       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
				         ON T.ID = VCM.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON T.ID = WC.ID
				       LEFT OUTER JOIN RECEIVE_PAYMENT RP
				         ON T.ID = RP.ID
				       LEFT OUTER JOIN PAY_BILL PB
				         ON T.ID = PB.ID
				       LEFT OUTER JOIN VENDOR_PAYMENT VP
				         ON T.ID = VP.ID
				       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
				         ON T.ID = CPP.ID
				       LEFT OUTER JOIN CUSTOMER_REFUND CR
				         ON T.ID = CR.ID
				       LEFT JOIN JOURNAL_ENTRY JE
				         ON T.ID = JE.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = CP.VENDOR_ID
				             OR P.ID = CCC.VENDOR_ID
				             OR P.ID = EB.VENDOR_ID
				             OR P.ID = VCM.VENDOR_ID
				             OR P.ID = WC.VENDOR_ID
				             OR P.ID = CS.CUSTOMER_ID
				             OR P.ID = CCM.CUSTOMER_ID
				             OR P.ID = WC.CUSTOMER_ID
				             OR P.ID = WC.TAX_AGENCY_ID
				             OR P.ID = I.CUSTOMER_ID
				             OR P.ID = RP.CUSTOMER_ID
				             OR P.ID = PB.VENDOR_ID
				             OR P.ID = VP.VENDOR_ID
				             OR P.ID = CPP.CUSTOMER_ID
				             OR P.ID = CR.CUSTOMER_ID
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_TYPE NOT IN ( 9 )
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND AT.AMOUNT != 0
				       AND AT.ACCOUNT_ID = COM.EXCHANGE_LOSS_OR_GAIN_ACCOUNT
				GROUP  BY T.ID,
				          PB.ID,
				          P.NAME,
				          WC.IN_FAVOUR_OF,
				          C.ID
				ORDER  BY T.T_DATE  
				]]>

	</sql-query>

	<sql-query name="getUnrealisedExchangeLossOrGain">
		<query-param name="companyId" type="long" />
		<query-param name="enteredDate" type="long" />
		<query-param name="currencies" type="long" />

		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="CURRENCY_NAME" type="encryptedstring" />
		<return-scalar column="FOREIGN_BALANCE" type="double" />
		<return-scalar column="CURRENT_BALANCE" type="double" />
		<return-scalar column="CURRENCY_ID" type="long" />
		
		<![CDATA[
				SELECT a.NAME                              AS account_name,
				       c.formal_name                       AS currency_name,
				       CASE
				         WHEN a.a_type = 8 THEN -( SUM(at.amount / t.currency_factor) )
				         ELSE SUM(at.amount / t.currency_factor)
				       END                                 AS foreign_balance,
				       a.total_balance_in_account_currency AS current_balance,
				       c.id                                AS currency_id
				FROM   currency c
				       left join account a
				         ON a.id = c.accounts_receivable_id
				             OR a.id = c.accounts_payable_id
				       left join account_transaction at
				         ON at.account_id = a.id
				       left join transaction t
				         ON t.id = at.transaction_id
				WHERE  t.t_date <= :enteredDate
				       AND c.id IN :currencies
				       AND a.company_id = :companyId
				GROUP  BY a.id,
				          c.id;  
		]]>

	</sql-query>

	<sql-query name="get.TDS.Filed.Records">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="enteredDate" type="long" />

		<return-scalar column="ACK_NO" type="encryptedstring" />
		<return-scalar column="FORM_TYPE" type="int" />
		<return-scalar column="QUATER" type="int" />
		<return-scalar column="YEAR_START" type="int" />
		<return-scalar column="YEAR_END" type="int" />
		<return-scalar column="DATE" type="long" />
		
		<![CDATA[
				SELECT TC.ETDSFILLINGACKNOWLEDGEMENTNO AS ACK_NO,
				       TC.FORMTYPE                     AS FORM_TYPE,
				       TC.CHALANPERIOD                 AS QUATER,
				       ( TC.ASSESMENTYEARSTART - 1 )   AS YEAR_START,
				       ( TC.ASSESMENTYEAREND - 1 )     AS YEAR_END,
				       TC.ACKNOWLEDGEMENTDATE          AS DATE
				FROM   TDS_CHALAN_DETAIL TC
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = TC.ID
				WHERE  T.COMPANY_ID = :companyId
				       AND TC.ACKNOWLEDGEMENTDATE IS NOT NULL
				       AND TC.ACKNOWLEDGEMENTDATE BETWEEN :startDate AND :endDate  
				]]>

	</sql-query>


	<sql-query name="getEstimatesByJobs">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="ESTIMATE_ID" type="long" />
		<return-scalar column="JOB_NAME" type="encryptedstring" />
		<return-scalar column="JOBID" type="long" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="TR_DATE" type="long" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="TOTAL" type="double" />
		
		<![CDATA[
				SELECT P.NAME                      AS CUSTOMER_NAME,
				       E.ID                        AS ESTIMATE_ID,
				       J.JOB_NAME                  AS JOB_NAME,
				       T.JOB_ID                    AS JOBID,
				       T.T_TYPE                    AS TYPE,
				       T.T_DATE                    AS TR_DATE,
				       T.NUMBER                    AS NUMBER,
				       T.MEMO                      AS MEMO,
				       T.TOTAL * T.CURRENCY_FACTOR AS TOTAL
				FROM   ESTIMATE E
				       LEFT OUTER JOIN TRANSACTION T
				         ON T.ID = E.ID
				       LEFT OUTER JOIN JOB J
				         ON J.ID = T.JOB_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = E.CUSTOMER_ID
				WHERE  T.JOB_ID IS NOT NULL
				       AND T.SAVE_STATUS!=204
				       AND T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				ORDER  BY P.ID,
				          J.ID  
				]]>

	</sql-query>

	<sql-query name="getJobActualRevenueTransactions">
		<query-param name="companyId" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="jobId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="JOB_NAME" type="encryptedstring" />
		<return-scalar column="T_TYPE" type="int" />
		<return-scalar column="T_DATE" type="long" />
		<return-scalar column="T_NUMBER" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="ACCOUNTNAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="REVENUE" type="double" />
		
		<![CDATA[
				SELECT jtv.customer_name,
				       jtv.job_name,
				       jtv.transaction_id,
				       jtv.t_type,
				       jtv.t_date,
				       jtv.t_number,
				       jtv.ti_desc AS memo,
				       jtv.revenue,
				       a.name      AS accountname
				FROM   jobs_transactions_view jtv
				       LEFT JOIN account a
				         ON a.id = jtv.revenue_account
				WHERE  jtv.company_id = :companyId
				       AND jtv.customer_id = :customerId
				       AND jtv.job_id = :jobId
				       AND jtv.t_date BETWEEN :startDate AND :endDate 
				       AND JTV.revenue !=0  
				]]>

	</sql-query>

	<sql-query name="getUnBilledCostsByJob">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="JOB_ID" type="long" />
		<return-scalar column="TYPE" type="int" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="TR_DATE" type="long" />
		<return-scalar column="ACCOUNTNAME" type="encryptedstring" />
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="JOBNAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT T.ID       AS TRANSACTION_ID,
				       CASE
				         WHEN T.T_TYPE = 6 THEN TI.LINE_TOTAL * T.CURRENCY_FACTOR
				         ELSE T.TOTAL * T.CURRENCY_FACTOR
				       END        AS TOTAL,
				       CASE
				         WHEN T.T_TYPE = 6 THEN TI.JOB_ID
				         ELSE T.JOB_ID
				       END        AS JOB_ID,
				       T.T_TYPE   AS TYPE,
				       T.MEMO     AS MEMO,
				       P.NAME     AS CUSTOMER_NAME,
				       T.T_DATE   AS TR_DATE,
				       A.NAME     AS ACCOUNTNAME,
				       CASE
				         WHEN T.T_TYPE = 6 THEN TI.CUSTOMER_ID
				         ELSE P.ID
				       END        AS CUSTOMER_ID,
				       J.JOB_NAME AS JOBNAME
				FROM   TRANSACTION T
				       LEFT OUTER JOIN ENTER_BILL E
				         ON E.ID = T.ID
				       LEFT OUTER JOIN WRITE_CHECKS W
				         ON W.ID = T.ID
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ITEM IT
				         ON ( TI.TYPE = 1
				              AND IT.ID = TI.ITEM_ID )
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = TI.CUSTOMER_ID
				             OR P.ID = W.CUSTOMER_ID
				       LEFT OUTER JOIN JOB J
				         ON J.ID = TI.JOB_ID
				             OR J.ID = T.JOB_ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				             OR A.ID = IT.EXPENSE_ACCOUNT_ID
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_TYPE IN( 6, 15 )
				       AND CASE
				             WHEN T.T_TYPE = 6 THEN TI.JOB_ID IS NOT NULL
				                                    AND TI.IS_BILLABLE
				             ELSE T.JOB_ID IS NOT NULL
				           END
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.SAVE_STATUS != 204
				ORDER  BY T.ID  
				]]>

	</sql-query>

	<sql-query name="getProfitAndLossByJob">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ACCOUNT_ID" type="long" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNT_NUMBER" type="encryptedstring" />
		<return-scalar column="ACCOUNT_TYPE" type="int" />
		<return-scalar column="JOB_ID" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="T_ID" type="long" />
		
		<![CDATA[
						SELECT A.ID       AS ACCOUNT_ID,
						A.NAME AS ACCOUNT_NAME,
						A.A_NUMBER AS ACCOUNT_NUMBER,
						A.A_TYPE AS ACCOUNT_TYPE,
						J.ID       AS JOB_ID,
						(CASE
						WHEN (SELECT COUNT(AT1.ACCOUNT_ID)
						                 FROM   ACCOUNT_TRANSACTION AT1
						                        JOIN TRANSACTION T1
						ON AT1.TRANSACTION_ID=T1.ID
						                        LEFT OUTER JOIN ENTER_BILL EB
						                          ON EB.ID = T.ID
						                        LEFT OUTER JOIN TRANSACTION_ITEM TI
						                          ON TI.TRANSACTION_ID = EB.ID
						                        LEFT OUTER JOIN JOB J
						                          ON J.ID = T.JOB_ID
						                              OR J.ID = TI.JOB_ID
						                 WHERE  T.T_DATE BETWEEN :startDate AND :endDate
						                        AND ( T.JOB_ID IS NOT NULL
						                               OR (TI.JOB_ID IS NOT NULL AND TI.IS_BILLABLE ))
						                        AND AT1.ACCOUNT_ID = A.ID
						                        AND AT1.COMPANY_ID = :companyId) = 0 THEN 0
						           ELSE (SELECT SUM(AT.AMOUNT)
						                 FROM   ACCOUNT_TRANSACTION AT
						                        JOIN TRANSACTION T
						                          ON AT.TRANSACTION_ID = T.ID
						                        LEFT OUTER JOIN ENTER_BILL EB
						                          ON EB.ID = T.ID
						                        LEFT OUTER JOIN TRANSACTION_ITEM TI
						                          ON TI.TRANSACTION_ID = EB.ID
						                        LEFT OUTER JOIN JOB J
						                          ON J.ID = T.JOB_ID
						                              OR J.ID = TI.JOB_ID
						                 WHERE  T.T_DATE BETWEEN :startDate AND :endDate
						                        AND ( T.JOB_ID IS NOT NULL
						                               OR  (TI.JOB_ID IS NOT NULL AND TI.IS_BILLABLE ) )
						                        AND AT.ACCOUNT_ID = A.ID
						AND AT.COMPANY_ID=:companyId)
						 END )    AS AMOUNT,
						A.PARENT_ID,
						T.ID AS T_ID
						FROM   ACCOUNT_TRANSACTION AT
						       LEFT OUTER JOIN ACCOUNT A
						         ON A.ID = AT.ACCOUNT_ID
						       LEFT OUTER JOIN TRANSACTION T
						ON T.ID =AT.TRANSACTION_ID
						       LEFT OUTER JOIN ENTER_BILL EB
						         ON EB.ID = T.ID
						       LEFT OUTER JOIN TRANSACTION_ITEM TI
						         ON TI.TRANSACTION_ID = EB.ID
						       LEFT OUTER JOIN JOB J
						         ON J.ID = T.JOB_ID
						             OR J.ID = TI.JOB_ID
						WHERE  T.T_DATE BETWEEN :startDate AND :endDate
						       AND ( T.JOB_ID IS NOT NULL OR
						               (TI.JOB_ID IS NOT NULL AND TI.IS_BILLABLE ) )
						       AND A.A_TYPE IN ( 14, 15, 16, 17, 18 )
						       AND A.BASE_TYPE != 0
						       AND A.COMPANY_ID =:companyId
						GROUP  BY A.ID,
						          J.ID,
						          AT.TRANSACTION_ID,
						          T.ID
						ORDER  BY J.ID,
						          A.BASE_TYPE,
						A.SUB_BASE_TYPE,
						A.GROUP_TYPE,
						A.A_TYPE,
						A.ID   
				]]>

	</sql-query>

	<sql-query name="getItemActualRevenueDetails">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="itemId" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="jobId" type="long" />

		<return-scalar column="TR_ID" type="long" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="TR_DATE" type="long" />
		<return-scalar column="TR_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="QTY_UNIT" type="long" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		
		<![CDATA[
				SELECT T.ID                              AS TR_ID,
				       IT.NAME                           AS ITEM_NAME,
				       IT.TYPE                           AS ITEM_TYPE,
				       T.T_DATE                          AS TR_DATE,
				       T.NUMBER                          AS TR_NUMBER,
				       P.NAME                            AS CUSTOMER_NAME,
				       TI.QTY_VALUE                      AS QTY_UNIT,
				       T.MEMO                            AS MEMO,
				       TI.LINE_TOTAL * T.CURRENCY_FACTOR AS TOTAL,
				       T.T_TYPE                          AS TRANSACTION_TYPE
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN INVOICE I
				         ON I.ID = TI.TRANSACTION_ID
				       LEFT OUTER JOIN ESTIMATE E
				         ON E.ID = TI.TRANSACTION_ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON CS.ID = TI.TRANSACTION_ID
				       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CM
				         ON CM.ID = TI.TRANSACTION_ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = I.CUSTOMER_ID
				             OR P.ID = E.CUSTOMER_ID
				             OR P.ID = CS.CUSTOMER_ID
				             OR P.ID = CM.CUSTOMER_ID
				       LEFT JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				WHERE  IT.ID = :itemId
				       AND T.COMPANY_ID = :companyId
				       AND T.JOB_ID IS NOT NULL
				       AND ( T.T_DATE BETWEEN :startDate AND :endDate )
				       AND ( P.ID = :customerId
				             AND T.JOB_ID = :jobId )
				       AND T.SAVE_STATUS != 204  
				]]>

	</sql-query>

	<sql-query name="getJobActualCostTransactions">
		<query-param name="companyId" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="jobId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="JOB_NAME" type="encryptedstring" />
		<return-scalar column="T_TYPE" type="int" />
		<return-scalar column="T_DATE" type="long" />
		<return-scalar column="T_NUMBER" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="COST" type="double" />		
		
		<![CDATA[
				SELECT JTV.CUSTOMER_NAME,
				       JTV.JOB_NAME,
				       JTV.TRANSACTION_ID,
				       JTV.T_TYPE,
				       JTV.T_DATE,
				       JTV.T_NUMBER,
				       JTV.TI_DESC AS MEMO,
				       JTV.COST,
				       A.NAME      AS ACCOUNT_NAME
				FROM   JOBS_TRANSACTIONS_VIEW JTV
				       LEFT JOIN ACCOUNT A
				         ON A.ID = JTV.COST_ACCOUNT
				WHERE  JTV.COMPANY_ID = :companyId
				       AND JTV.CUSTOMER_ID = :customerId
				       AND JTV.JOB_ID = :jobId
				       AND JTV.T_DATE BETWEEN :startDate AND :endDate 
				       AND JTV.COST !=0 
				]]>

	</sql-query>

	<sql-query name="JobsTransactionsView">
	
		<![CDATA[
				CREATE OR REPLACE VIEW
		        JOBS_TRANSACTIONS_VIEW
		        AS
		        SELECT T.COMPANY_ID                         AS COMPANY_ID,
		               P.ID                                 AS CUSTOMER_ID,
		               P.NAME                               AS CUSTOMER_NAME,
		               J.ID                                 AS JOB_ID,
		               J.JOB_NAME                           AS JOB_NAME,
		               T.ID                                 AS TRANSACTION_ID,
		               T.T_TYPE,
		               T.T_DATE,
		               T.NUMBER                             AS T_NUMBER,
		               TI.DESCRIPTION                       TI_DESC,
		               CASE
		                 WHEN TI.TYPE = 1
		                      AND IT.TYPE IN ( 2, 4 )
		                      AND T.T_TYPE IN ( 1, 4, 8 ) THEN (SELECT SUM(IP.PURCHASE_COST)
		                                                        FROM   INVENTORY_PURCHASE IP
		                                                        WHERE
		                 IP.TRANSACTION_ITEM_ID = TI.ID)
		                 WHEN T.T_TYPE = 15 AND  AMOUNTS_INCLUDE_TAX=TRUE
		     					 	THEN -1*((TI.LINE_TOTAL-TI.VAT_FRACTION) * T.CURRENCY_FACTOR)
		                 WHEN T.T_TYPE = 15 AND  AMOUNTS_INCLUDE_TAX=FALSE
		      						THEN -1*(TI.LINE_TOTAL * T.CURRENCY_FACTOR)
		                 ELSE '0'
		               END                                  AS COST,
		               
		              
		          CASE
		          WHEN (AMOUNTS_INCLUDE_TAX=TRUE) THEN
		            CASE
		              WHEN T.T_TYPE IN (1,8)
		                  THEN (TI.LINE_TOTAL-(TI.VAT_FRACTION) * T.CURRENCY_FACTOR)
		              WHEN T.T_TYPE IN (4)
		                  THEN -1*((TI.LINE_TOTAL-TI.VAT_FRACTION) * T.CURRENCY_FACTOR)
		            END
		          ELSE
		            CASE
		              WHEN T.T_TYPE IN (4)
		                  THEN -1*(TI.LINE_TOTAL * T.CURRENCY_FACTOR)
		              WHEN T.T_TYPE IN (1,8)
		                  THEN (TI.LINE_TOTAL * T.CURRENCY_FACTOR)
		            END
		               END AS REVENUE,
		                 
		               TI.EFFECTING_ACCOUNT                 AS REVENUE_ACCOUNT,
		               CASE
		                 WHEN TI.TYPE = 1
		                      AND IT.TYPE IN ( 2, 4 )
		                      AND T.T_TYPE IN ( 1, 4, 8 ) THEN (SELECT EFFECTING_ACCOUNT
		                                                        FROM   INVENTORY_PURCHASE IP
		                                                        WHERE
		                 IP.TRANSACTION_ITEM_ID = TI.ID
		                                                        LIMIT  1)
		                 WHEN T.T_TYPE = 15 THEN TI.EFFECTING_ACCOUNT
		                 ELSE NULL
		               END                                  AS COST_ACCOUNT
		        FROM   TRANSACTION_ITEM TI
		               LEFT JOIN ITEM IT
		                 ON IT.ID = TI.ITEM_ID
		               LEFT JOIN TRANSACTION T
		                 ON T.ID = TI.TRANSACTION_ID
		               LEFT JOIN JOB J
		                 ON ( TI.JOB_ID = J.ID
		                       OR T.JOB_ID = J.ID )
		               LEFT JOIN CUSTOMER C
		                 ON C.ID = J.CUSTOMER_ID
		               LEFT JOIN PAYEE P
		                 ON P.ID = C.ID
		        WHERE  J.ID IS NOT NULL
		               AND T.SAVE_STATUS!=204
		               AND ( T.T_TYPE IN ( 1, 4, 8, 15 )
		                      OR TI.IS_BILLABLE );  
			]]>

	</sql-query>

	<sql-query name="getJobProfitabilitySummary">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="JOB_ID" type="long" />
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="JOB_NAME" type="encryptedstring" />
		<return-scalar column="COST" type="double" />
		<return-scalar column="REVENUE" type="double" />
		
		<![CDATA[
				SELECT JTV.JOB_ID,
				       JTV.CUSTOMER_ID,
				       JTV.CUSTOMER_NAME,
				       JTV.JOB_NAME,
				       SUM(COST)   AS COST,
				       SUM(REVENUE)AS REVENUE
				FROM   JOBS_TRANSACTIONS_VIEW JTV
				WHERE  JTV.COMPANY_ID = :companyId
				       AND JTV.T_DATE BETWEEN :startDate AND :endDate
				GROUP  BY JTV.JOB_ID,
				          JTV.CUSTOMER_ID,
				          JTV.CUSTOMER_NAME,
				          JTV.JOB_NAME;     
				]]>

	</sql-query>

	<sql-query name="JobProfitabilityDetailByJob">
		<query-param name="payeeId" type="long" />
		<query-param name="jobId" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEMID" type="long" />
		<return-scalar column="TYPE" type="long" />
		<return-scalar column="IIEMNAME" type="encryptedstring" />
		<return-scalar column="COST" type="double" />
		<return-scalar column="REVENUE" type="double" />
		<return-scalar column="CUSTOMER_ID" type="long" />
		<return-scalar column="JOB_ID" type="long" />

		<![CDATA[
				SELECT I.ID          AS ITEMID,
				       I.TYPE        AS TYPE,
				       I.NAME        AS IIEMNAME,
				       J.CUSTOMER_ID AS CUSTOMER_ID,
				       J.ID          AS JOB_ID,
				       CASE
				         WHEN I.ID IN (SELECT I.ID
				                       FROM   ITEM I
				                              LEFT JOIN TRANSACTION_ITEM TI
				                                ON TI.ITEM_ID = I.ID
				                              LEFT JOIN TRANSACTION T
				                                ON T.ID = TI.TRANSACTION_ID
				                              LEFT JOIN ACCOUNT A
				                                ON A.ID = I.EXPENSE_ACCOUNT_ID
				                       WHERE  TI.IS_BILLABLE = TRUE
				                               OR A.A_TYPE = 15
				                                  AND I.TYPE IN ( 2, 4 )
				                                  AND ( T.T_DATE BETWEEN :startDate AND :endDate
				                                      ))
				       THEN SUM(I.SALES_PRICE)
				         ELSE NULL
				       END           AS COST,
				       CASE
				         WHEN I.ID IN (SELECT I.ID
				                       FROM   ITEM I
				                              LEFT JOIN TRANSACTION_ITEM TI
				                                ON TI.ITEM_ID = I.ID
				                              LEFT JOIN TRANSACTION T
				                                ON T.ID = TI.TRANSACTION_ID
				                              LEFT JOIN ACCOUNT A
				                                ON A.ID = I.EXPENSE_ACCOUNT_ID
				                       WHERE  T.T_TYPE IN ( 1, 4, 8 )
				                              AND ( T.T_DATE BETWEEN :startDate AND :endDate ))
				       THEN
				         SUM(T.TOTAL * T.CURRENCY_FACTOR)
				         ELSE NULL
				       END           AS REVENUE
				FROM   ITEM I
				       LEFT JOIN TRANSACTION_ITEM TI
				         ON TI.ITEM_ID = I.ID
				       LEFT JOIN TRANSACTION T
				         ON T.ID = TI.TRANSACTION_ID
				       LEFT JOIN ACCOUNT A
				         ON A.ID = I.EXPENSE_ACCOUNT_ID
				       LEFT JOIN JOB J
				         ON J.ID = T.JOB_ID
				       LEFT JOIN PAYEE P
				         ON P.ID = J.CUSTOMER_ID
				WHERE  ( T.T_DATE BETWEEN :startDate AND :endDate )
				       AND J.COMPANY_ID = :companyId
				       AND J.ID = :jobId
				       AND J.CUSTOMER_ID = :payeeId
				       AND T.SAVE_STATUS !=204
				       AND T.T_TYPE in( 1, 4, 8)
				GROUP  BY I.ID,
				          J.ID;  
				]]>

	</sql-query>

	<sql-query name="getItemActualCostsDetails">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="itemId" type="long" />
		<query-param name="customerId" type="long" />
		<query-param name="jobId" type="long" />

		<return-scalar column="TR_ID" type="long" />
		<return-scalar column="IIEM_NAME" type="encryptedstring" />
		<return-scalar column="ITEM_TYPE" type="int" />
		<return-scalar column="TR_DATE" type="long" />
		<return-scalar column="TR_NUMBER" type="encryptedstring" />
		<return-scalar column="CUSTOMER_NAME" type="encryptedstring" />
		<return-scalar column="QTY_QUANTITY" type="long" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		
		<![CDATA[
				SELECT T.ID          AS TR_ID,
				       I.NAME        AS IIEM_NAME,
				       I.TYPE        AS ITEM_TYPE,
				       T.T_DATE      AS TR_DATE,
				       T.NUMBER      AS TR_NUMBER,
				       P.NAME        AS CUSTOMER_NAME,
				       TI.QTY_VALUE  AS QTY_QUANTITY,
				       T.MEMO        AS MEMO,
				       I.SALES_PRICE AS TOTAL,
				       T.T_TYPE      AS TRANSACTION_TYPE
				FROM   ITEM I
				       LEFT JOIN TRANSACTION_ITEM TI
				         ON TI.ITEM_ID = I.ID
				       LEFT JOIN TRANSACTION T
				         ON T.ID = TI.TRANSACTION_ID
				       LEFT JOIN ACCOUNT A
				         ON A.ID = I.EXPENSE_ACCOUNT_ID
				       LEFT JOIN JOB J
				         ON J.ID = T.JOB_ID
				       LEFT JOIN PAYEE P
				         ON P.ID = J.CUSTOMER_ID
				WHERE  ( T.T_DATE BETWEEN :startDate AND :endDate )
				       AND ( TI.IS_BILLABLE = TRUE
				              OR A.A_TYPE = 15 )
				       AND J.COMPANY_ID = :companyId
				       AND I.ID = :itemId
				       AND J.CUSTOMER_ID = :customerId
				       AND J.ID = :jobId
				       AND I.TYPE = 2
				       AND T.SAVE_STATUS != 204  
				]]>

	</sql-query>

	<sql-query name="get.missing.checks.by.account">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="accountId" type="long" />
		<query-param name="tobePrint" type="encryptedstring" />
		<query-param name="empty" type="encryptedstring" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="TOTAL_AMOUNT" type="double" />
		
		<![CDATA[
				SELECT *
				FROM   (SELECT T.ID                        AS TRANSACTION_ID,
				               T.T_TYPE 	               AS TRANSACTION_TYPE,
				               T.T_DATE                    AS TRANSACTION_DATE,
				               P.NAME                      AS NAME,
				               A.NAME                      AS ACCOUNT_NAME,
				               T.MEMO                      AS MEMO,
				               T.TOTAL * T.CURRENCY_FACTOR AS TOTAL_AMOUNT,
				               CASE
				                 WHEN T.T_TYPE = 15 THEN W.CHECK_NUMBER
				                 WHEN T_TYPE IN( 2 ) THEN CP.CHECK_NUMBER
				                 WHEN T_TYPE = 5 THEN CR.CHECK_NUMBER
				                 WHEN T.T_TYPE = 17 THEN PT.CHECK_NUMBER
				                 WHEN T.T_TYPE = 11 THEN PB.CHECK_NUMBER
				                 WHEN T.T_TYPE IN( 3, 27 ) THEN CCC.CHECK_NUMBER
				                 WHEN T.T_TYPE = 31 THEN RV.CHECK_NUMBER
				                 WHEN T.T_TYPE = 29 THEN CPP.CHECK_NUMBER
				                 WHEN T.T_TYPE = 12 THEN RP.CHECK_NUMBER
				                 WHEN T.T_TYPE = 1 THEN CS.CHECK_NUMBER
				                 WHEN T.T_TYPE = 25 THEN VP.CHECK_NUMBER
				               
				               END                         AS CHECK_NUMBER
				               
				        FROM   TRANSACTION T
				               LEFT JOIN WRITE_CHECKS W
				                 ON W.ID = T.ID
				               LEFT JOIN CASH_PURCHASE CP
				                 ON CP.ID = T.ID
				               LEFT JOIN CUSTOMER_REFUND CR
				                 ON CR.ID = T.ID
				               LEFT JOIN PAY_TAX PT
				                 ON PT.ID = T.ID
				               LEFT JOIN PAY_BILL PB
				                 ON PB.ID = T.ID
				               LEFT JOIN VENDOR_PAYMENT VP
				                 ON VP.ID = T.ID
				               LEFT JOIN CREDIT_CARD_CHARGES CCC
				                 ON CCC.ID = T.ID
				               LEFT JOIN RECEIVE_VAT RV
				                 ON RV.ID = T.ID
				               LEFT JOIN CUSTOMER_PREPAYMENT CPP
				                 ON CPP.ID = T.ID
				               LEFT JOIN MAKE_DEPOSIT M
				                 ON M.ID = T.ID
				               LEFT JOIN RECEIVE_PAYMENT RP
				                 ON RP.ID = T.ID
				               LEFT JOIN CASH_SALES CS
				                 ON CS.ID = T.ID
				               LEFT JOIN ACCOUNT_TRANSACTION AT
				                 ON AT.TRANSACTION_ID = T.ID
				               LEFT JOIN ACCOUNT A
				                 ON A.ID = AT.ACCOUNT_ID
				               LEFT JOIN PAYEE P
				                 ON P.ID = W.VENDOR_ID
				                     OR P.ID = W.CUSTOMER_ID
				                     OR P.ID = CP.VENDOR_ID
				                     OR P.ID = CR.CUSTOMER_ID
				                     OR P.ID = PB.VENDOR_ID
				                     OR P.ID = VP.VENDOR_ID
				                     OR P.ID = PT.TAX_AGENCY_ID
				                     OR P.ID = CCC.VENDOR_ID
				                     OR P.ID = RV.TAX_AGENCY_ID
				                     OR P.ID = CPP.CUSTOMER_ID
				                     OR P.ID = RP.CUSTOMER_ID
				                     OR P.ID = CS.CUSTOMER_ID
				        WHERE  T.T_TYPE IN ( 1, 2, 3, 5,
				                             11, 12, 15, 17,
				                             29, 31, 35,25 )
				               AND T.COMPANY_ID = :companyId
				               AND ( T.T_DATE BETWEEN :startDate AND :endDate )
				               AND A.ID = :accountId) AS TT
				WHERE  ( TT.CHECK_NUMBER != :tobePrint
				         AND TT.CHECK_NUMBER != :empty )
				ORDER  BY Length(TT.CHECK_NUMBER),
				          TT.CHECK_NUMBER  
				]]>

	</sql-query>

	<sql-query name="get.reconcilition.discrepancy.by.account">

		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="enteredDate" type="long" />
		<query-param name="accountId" type="long" />

		<return-scalar column="TYPE" type="int" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_AMOUNT" type="double" />
		<return-scalar column="RECONCILIED_AMOUNT" type="double" />
		<return-scalar column="PAYEE_NAME" type="encryptedstring" />
		
		<![CDATA[
				SELECT *
				FROM   (SELECT T.T_TYPE                           AS TYPE,
				               AT.TRANSACTION_ID                  AS TRANSACTION_ID,
				               T.T_DATE                           AS TRANSACTION_DATE,
				               T.NUMBER                           AS NUMBER,
				               SUM(AT.AMOUNT) AS TRANSACTION_AMOUNT,
				               RI.AMOUNT      AS RECONCILIED_AMOUNT,
				               P.NAME                             AS PAYEE_NAME
				        FROM   RECONCILIATION_ITEM RI
				               LEFT OUTER JOIN RECONCILIATION R
				                 ON RI.RECONCILIATION_ID = R.ID
				               LEFT OUTER JOIN ACCOUNT_TRANSACTION AT
				                 ON ( AT.TRANSACTION_ID = RI.TRANSACTION_ID
				                      AND AT.ACCOUNT_ID = R.ACCOUNT )
				               LEFT OUTER JOIN TRANSACTION T
				                 ON T.ID = AT.TRANSACTION_ID
				               LEFT JOIN WRITE_CHECKS W
				                 ON W.ID = T.ID
				               LEFT JOIN CASH_PURCHASE CP
				                 ON CP.ID = T.ID
				               LEFT JOIN CUSTOMER_REFUND CR
				                 ON CR.ID = T.ID
				               LEFT JOIN PAY_TAX PT
				                 ON PT.ID = T.ID
				               LEFT JOIN PAY_BILL PB
				                 ON PB.ID = T.ID
				               LEFT JOIN VENDOR_PAYMENT VP
				                 ON VP.ID = T.ID
				               LEFT JOIN CREDIT_CARD_CHARGES CCC
				                 ON CCC.ID = T.ID
				               LEFT JOIN RECEIVE_VAT RV
				                 ON RV.ID = T.ID
				               LEFT JOIN CUSTOMER_PREPAYMENT CPP
				                 ON CPP.ID = T.ID
				               LEFT JOIN MAKE_DEPOSIT M
				                 ON M.ID = T.ID
				               LEFT JOIN RECEIVE_PAYMENT RP
				                 ON RP.ID = T.ID
				               LEFT JOIN CASH_SALES CS
				                 ON CS.ID = T.ID
				               LEFT JOIN PAYEE P
				                 ON P.ID = W.VENDOR_ID
				                     OR P.ID = W.CUSTOMER_ID
				                     OR P.ID = W.VENDOR_ID
				                     OR P.ID = CP.VENDOR_ID
				                     OR P.ID = CR.CUSTOMER_ID
				                     OR P.ID = PB.VENDOR_ID
				                     OR P.ID = VP.VENDOR_ID
				                     OR P.ID = PT.TAX_AGENCY_ID
				                     OR P.ID = CCC.VENDOR_ID
				                     OR P.ID = RV.TAX_AGENCY_ID
				                     OR P.ID = CPP.CUSTOMER_ID
				                     OR P.ID = RP.CUSTOMER_ID
				                     OR P.ID = CS.CUSTOMER_ID
				        WHERE  R.COMPANY_ID = :companyId
				               AND T.T_TYPE IN ( 1, 2, 3, 5,
				                                 10, 11, 12, 15,
				                                 17, 25,26,27, 29, 31, 35 )
				               AND T.T_DATE BETWEEN :startDate AND :enteredDate
				               AND AT.ACCOUNT_ID = :accountId
				        GROUP  BY AT.TRANSACTION_ID,
				                  T.CURRENCY_FACTOR,
				                  RI.ID,
				                  T.T_TYPE,
				                  T.T_DATE,
				                  T.NUMBER,
				                  P.NAME
				        ORDER  BY AT.TRANSACTION_ID) AS TRANSACTIONS
				WHERE  TRANSACTIONS.TRANSACTION_AMOUNT != TRANSACTIONS.RECONCILIED_AMOUNT  
				]]>

	</sql-query>

	<sql-query name="get.all.invoices.by.account">
		<query-param name="accountId" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="tobePrint" type="encryptedstring" />
		<query-param name="empty" type="encryptedstring" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="TOTAL_AMOUNT" type="double" />
		
		<![CDATA[
				SELECT *
				FROM   (SELECT T.ID     AS TRANSACTION_ID,
				               T.T_TYPE AS TRANSACTION_TYPE,
				               T.T_DATE AS TRANSACTION_DATE,
				               P.NAME   AS NAME,
				               A.NAME   AS ACCOUNT_NAME,
				               T.MEMO   AS MEMO,
				               T.TOTAL * T.CURRENCY_FACTOR AS TOTAL_AMOUNT,				               
				               CASE
				                 WHEN T.T_TYPE = 15 THEN W.CHECK_NUMBER
				                 WHEN T_TYPE IN( 2, 26, 28 ) THEN CP.CHECK_NUMBER
				                 WHEN T_TYPE = 5 THEN CR.CHECK_NUMBER
				                 WHEN T.T_TYPE = 17 THEN PT.CHECK_NUMBER
				                 WHEN T_TYPE = 11 THEN PB.CHECK_NUMBER
				                 WHEN T_TYPE IN( 3, 27 ) THEN CCC.CHECK_NUMBER
				                 WHEN T.T_TYPE = 31 THEN RV.CHECK_NUMBER
				                 WHEN T.T_TYPE = 29 THEN CPP.CHECK_NUMBER
				                 WHEN T.T_TYPE = 12 THEN RP.CHECK_NUMBER
				                 WHEN T.T_TYPE = 1 THEN CS.CHECK_NUMBER
				               END      AS CHECK_NUMBER
				        FROM   TRANSACTION T
				               LEFT JOIN WRITE_CHECKS W
				                 ON W.ID = T.ID
				               LEFT JOIN CASH_PURCHASE CP
				                 ON CP.ID = T.ID
				               LEFT JOIN CUSTOMER_REFUND CR
				                 ON CR.ID = T.ID
				               LEFT JOIN PAY_TAX PT
				                 ON PT.ID = T.ID
				               LEFT JOIN PAY_BILL PB
				                 ON PB.ID = T.ID
				               LEFT JOIN VENDOR_PAYMENT VP
				                 ON VP.ID = T.ID
				               LEFT JOIN CREDIT_CARD_CHARGES CCC
				                 ON CCC.ID = T.ID
				               LEFT JOIN RECEIVE_VAT RV
				                 ON RV.ID = T.ID
				               LEFT JOIN CUSTOMER_PREPAYMENT CPP
				                 ON CPP.ID = T.ID
				               LEFT JOIN MAKE_DEPOSIT M
				                 ON M.ID = T.ID
				               LEFT JOIN RECEIVE_PAYMENT RP
				                 ON RP.ID = T.ID
				               LEFT JOIN CASH_SALES CS
				                 ON CS.ID = T.ID
				               LEFT JOIN ACCOUNT_TRANSACTION AT
				                 ON AT.TRANSACTION_ID = T.ID
				               LEFT JOIN ACCOUNT A
				                 ON A.ID = AT.ACCOUNT_ID
				               LEFT JOIN PAYEE P
				                 ON P.ID = W.VENDOR_ID
				                     OR P.ID = W.CUSTOMER_ID
				                     OR P.ID = CP.VENDOR_ID
				                     OR P.ID = CR.CUSTOMER_ID
				                     OR P.ID = PB.VENDOR_ID
				                     OR P.ID = VP.VENDOR_ID
				                     OR P.ID = PT.TAX_AGENCY_ID
				                     OR P.ID = CCC.VENDOR_ID
				                     OR P.ID = RV.TAX_AGENCY_ID
				                     OR P.ID = CPP.CUSTOMER_ID
				                     OR P.ID = RP.CUSTOMER_ID
				                     OR P.ID = CS.CUSTOMER_ID
				        WHERE  T.T_TYPE IN ( 1, 2, 3, 5,
				                             11, 12, 15, 17,
				                             25, 29, 31, 35 )
				               AND T.COMPANY_ID = :companyId
				               AND ( T.T_DATE BETWEEN :startDate AND :endDate )
				               AND A.ID = :accountId) AS TT
				WHERE  ( TT.CHECK_NUMBER != :tobePrint
				         AND TT.CHECK_NUMBER != :empty )
				ORDER  BY Length(TT.CHECK_NUMBER),
				          TT.CHECK_NUMBER  
				]]>

	</sql-query>
	<sql-query name="getProfitAndLossByLocation">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="ACCOUNT_ID" type="long" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNT_NUMBER" type="encryptedstring" />
		<return-scalar column="ACCOUNT_TYPE" type="int" />
		<return-scalar column="LOCATION_ID" type="long" />
		<return-scalar column="AMOUNT" type="double" />
		<return-scalar column="P_ID" type="long" />
		<![CDATA[
					SELECT A.ID        AS ACCOUNT_ID,
					       A.NAME      AS ACCOUNT_NAME,
					       A.A_NUMBER  AS ACCOUNT_NUMBER,
					       A.A_TYPE    AS ACCOUNT_TYPE,
					       L.ID        AS LOCATION_ID,
					       ( CASE
					           WHEN (SELECT COUNT(AT1.ACCOUNT_ID)
					                 FROM   ACCOUNT_TRANSACTION AT1
					                        JOIN TRANSACTION T1
					                          ON AT1.TRANSACTION_ID = T1.ID
					                        LEFT OUTER JOIN LOCATION L
					                          ON L.ID = T1.LOCATION_ID
					                 WHERE  AT1.ACCOUNT_ID = A.ID
					                        AND L.ID IS NOT NULL
					                        AND T1.T_DATE BETWEEN :startDate AND :endDate
					                        AND AT1.COMPANY_ID = :companyId) = 0 THEN 0
					           ELSE (SELECT SUM(AT.AMOUNT)
					                 FROM   ACCOUNT_TRANSACTION AT
					                        JOIN TRANSACTION T
					                          ON AT.TRANSACTION_ID = T.ID
					                        LEFT OUTER JOIN LOCATION L
					                          ON L.ID = T.LOCATION_ID
					                 WHERE  AT.ACCOUNT_ID = A.ID
					                        AND L.ID IS NOT NULL
					                        AND T.T_DATE BETWEEN :startDate AND :endDate
					                        AND AT.COMPANY_ID = :companyId
					                 GROUP  BY AT.ACCOUNT_ID)
					         END )     AS AMOUNT,
					       A.PARENT_ID AS P_ID
					FROM   ACCOUNT_TRANSACTION AT
					       LEFT OUTER JOIN ACCOUNT A
					         ON A.ID = AT.ACCOUNT_ID
					       LEFT OUTER JOIN TRANSACTION T
					         ON T.ID = AT.TRANSACTION_ID
					       LEFT OUTER JOIN LOCATION L
					         ON L.ID = T.LOCATION_ID
					WHERE  T.T_DATE BETWEEN :startDate AND :endDate
					       AND L.ID IS NOT NULL
					       AND A.A_TYPE IN ( 14, 15, 16, 17, 18 )
					       AND A.BASE_TYPE != 0
					       AND A.COMPANY_ID = :companyId
					GROUP  BY A.ID,
					          L.ID
					ORDER  BY A.BASE_TYPE,
					          A.SUB_BASE_TYPE,
					          A.GROUP_TYPE,
					          A.A_TYPE,
					          A.ID  
			]]>

	</sql-query>
	<sql-query name="getSalesTaxLiabilityReport">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="start" type="long" />
		<query-param name="end" type="long" />

		<return-scalar column="TAXAGENCY_NAME" type="encryptedstring" />
		<return-scalar column="TAXITEM_NAME" type="encryptedstring" />
		<return-scalar column="TAX_RATE" type="double" />
		<return-scalar column="TAX_COLLECTED" type="double" />
		<return-scalar column="TOTAL" type="double" />
		<return-scalar column="TAXABLE_AMOUNT" type="double" />
		<return-scalar column="NON_TAXABLE_AMOUNT" type="double" />
		<return-scalar column="BEGINNING_BALANCE" type="double" />
		
		<![CDATA[
				SELECT P.NAME AS TAXAGENCY_NAME,
				       TIG.NAME AS TAXITEM_NAME,
				       TRC.RATE AS TAX_RATE,
				       SUM(TRC.VAT_AMOUNT) AS TAX_COLLECTED,
				       (ROUND(CAST(SUM(TRC.LINE_TOTAL) AS DECIMAL),2)) AS TOTAL,
				       (ROUND(CAST(SUM(TRC.LINE_TOTAL) AS DECIMAL),2))AS TAXABLE_AMOUNT,
				       (ROUND(CAST(SUM(T.TOTAL - TRC.LINE_TOTAL) AS DECIMAL),2))AS NON_TAXABLE_AMOUNT,
				
				  (SELECT SUM(TRC1.VAT_AMOUNT)
				   FROM TAX_RATE_CALCULATION TRC1
				   LEFT OUTER JOIN TAX_ITEM T_ITEM ON TRC1.TAX_ITEM_ID = T_ITEM.ID
				   LEFT OUTER JOIN PAYEE P ON T_ITEM.TAX_AGENCY = P.ID
				   LEFT OUTER JOIN TRANSACTION T ON TRC1.TRANSACTION_ID = T.ID
				   WHERE T.T_DATE BETWEEN :start AND :end
				     AND TRC1.TAX_ITEM_ID = T_ITEM.ID
				     AND T.COMPANY_ID=:companyId
				   GROUP BY T_ITEM.TAX_AGENCY) AS BEGINNING_BALANCE
				FROM TAX_RATE_CALCULATION TRC
				LEFT OUTER JOIN TAX_ITEM T_ITEM ON TRC.TAX_ITEM_ID = T_ITEM.ID LEFT OUTER
				JOIN TAX_ITEM_GROUPS TIG ON T_ITEM.ID = TIG.ID
				LEFT OUTER JOIN PAYEE P ON T_ITEM.TAX_AGENCY = P.ID
				LEFT OUTER JOIN TRANSACTION T ON TRC.TRANSACTION_ID = T.ID LEFT OUTER
				JOIN CASH_SALES CS ON CS.ID = T.ID
				LEFT OUTER JOIN INVOICE I ON I.ID = T.ID
				LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM ON CCM.ID = T.ID LEFT OUTER
				JOIN WRITE_CHECKS WC ON WC.ID = T.ID
				WHERE T.COMPANY_ID=:companyId
				  AND T.T_DATE BETWEEN :startDate AND :endDate
				
				GROUP BY T_ITEM.ID,
				         TRC.RATE,
				         TIG.NAME,
				         P.NAME
				ORDER BY TAXAGENCY_NAME,
				         TIG.NAME
				]]>

	</sql-query>

	<sql-query name="getDepositDetail">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ID" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="DATE" type="long" />
		<return-scalar column="PAYEE_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="AMOUNT" type="double" />

		<![CDATA[
				SELECT T.ID AS ID, T.T_TYPE AS TRANSACTION_TYPE, T.NUMBER AS TRANSACTION_NUMBER, T.T_DATE AS DATE, P.NAME AS PAYEE_NAME, A.NAME AS ACCOUNT_NAME, CASE WHEN T.T_TYPE != 16
					AND TI.ACCOUNT_ID IS NULL
					AND A.ID =
					  (SELECT TA.SALES_ACCOUNT_ID
					   FROM TRANSACTION T1
					   INNER JOIN TRANSACTION_ITEM TI1 ON T1.ID = TI1.TRANSACTION_ID
					   INNER JOIN TAX_CODE TC ON TI1.TAX_CODE = TC.ID
					   INNER JOIN TAX_ITEM T_ITEM ON TC.ID = T_ITEM.ID
					   INNER JOIN TAXAGENCY TA ON T_ITEM.TAX_AGENCY = TA.ID
					   WHERE T1.ID = T.ID
					     AND T1.COMPANY_ID=:companyId
					   GROUP BY TA.ID) THEN CASE WHEN (
					SELECT A1.IS_INCREASE
					FROM ACCOUNT A1
					WHERE A1.ID= AT.ACCOUNT_ID
					  AND A1.COMPANY_ID=:companyId)=FALSE THEN
					    (SELECT SUM(TI1.VAT_FRACTION)
					     FROM TRANSACTION_ITEM TI1
					     WHERE TI1.TRANSACTION_ID = T.ID) ELSE
					    (SELECT -1* SUM(TI1.VAT_FRACTION)
					     FROM TRANSACTION_ITEM TI1
					     WHERE TI1.TRANSACTION_ID = T.ID) END WHEN T.T_TYPE = 16 THEN CASE
					                                                                      WHEN TI.LINE_TOTAL > 0 THEN TI.LINE_TOTAT
					                                                                      ELSE -1 * AT.AMOUNT
					                                                                  END ELSE CASE
					                                                                               WHEN
					                                                                                      (SELECT A1.IS_INCREASE
					                                                                                       FROM ACCOUNT A1
					                                                                                       WHERE A1.COMPANY_ID=:companyId
					
					                                                                                         AND A1.ID= AT.ACCOUNT_ID)=FALSE THEN AT.AMOUNT
					                                                                               ELSE -1 * AT.AMOUNT
					                                                                           END END AS AMOUNT
					  FROM ACCOUNT_TRANSACTION AT
					  LEFT JOIN TRANSACTION T ON T.ID = AT.TRANSACTION_ID
					  LEFT JOIN TRANSACTION_ITEM TI ON TI.TRANSACTION_ID = AT.TRANSACTION_ID
					  AND TI.ACCOUNT_ID = AT.ACCOUNT_ID
					  AND (CASE WHEN T.T_TYPE=16 THEN ABS(TI.LINE_TOTAL)=ABS(AMOUNT) ELSE TI.LINE_TOTAL = AT.AMOUNT END) LEFT
					  JOIN ACCOUNT A ON A.ID = AT.ACCOUNT_ID
					  LEFT JOIN CASH_SALES CS ON CS.ID = T.ID
					  LEFT JOIN RECEIVE_PAYMENT RP ON RP.ID = T.ID
					  LEFT JOIN CUSTOMER_PREPAYMENT CP ON CP.ID = T.ID
					  LEFT JOIN TRANSFER_FUND TF ON TF.ID = T.ID
					  LEFT JOIN CUSTOMER C ON C.ID = CS.CUSTOMER_ID
					  OR C.ID = RP.CUSTOMER_ID
					  OR C.ID = CP.CUSTOMER_ID
					  LEFT JOIN PAYEE P ON P.ID = C.ID
					  AND (A.ID != (
					    (SELECT TA.SALES_ACCOUNT_ID
					     FROM TRANSACTION T1 INNER
					     JOIN TRANSACTION_ITEM TI1 ON T1.ID = TI1.TRANSACTION_ID
					     INNER JOIN TAX_CODE TC ON TI1.TAX_CODE = TC.ID INNER
					     JOIN TAX_ITEM T_ITEM ON TC.ID = T_ITEM.ID
					     INNER JOIN TAXAGENCY TA ON T_ITEM.TAX_AGENCY = TA.ID
					     WHERE T1.COMPANY_ID=:companyId
					       AND T1.ID = T.ID
					       AND TI.ACCOUNT_ID IS NOT NULL
					     GROUP BY TA.ID) &lt;
					
					0))
					OR ((TI.ACCOUNT_ID IS NULL
					     AND P.ID =
					       (SELECT TA.ID
					        FROM TRANSACTION T1
					        INNER JOIN TRANSACTION_ITEM TI1 ON T1.ID = TI1.TRANSACTION_ID INNER
					        JOIN TAX_CODE TC ON TI1.TAX_CODE = TC.ID
					        INNER JOIN TAX_ITEM T_ITEM ON TC.ID = T_ITEM.ID
					        INNER JOIN TAXAGENCY TA ON T_ITEM.TAX_AGENCY = TA.ID
					        WHERE T1.COMPANY_ID=:companyId
					          AND T1.ID = T.ID
					          AND TA.SALES_ACCOUNT_ID = A.ID
					        GROUP BY TA.ID)))
					OR (A.ID = CS.DEPOSIT_IN_ACCOUNT_ID
					    AND P.ID = C.ID)
					OR (A.ID = RP.ACCOUNT_ID
					    AND P.ID = C.ID)
					OR (A.ID = CP.DEPOSITIN_ID
					    AND P.ID = C.ID)
					WHERE T.COMPANY_ID=:companyId
					 T.T_DATE BETWEEN :startDate AND :endDate
					  AND T.T_TYPE IN (1,
					                   10,
					                   12,
					                   16,
					                   29)
					  AND T.SAVE_STATUS =203
					  AND AT.AMOUNT != 0
					  AND CASE
					          WHEN T.T_TYPE = 12
					               AND (RP.ACCOUNT_ID != 3) THEN A.ID != 3
					          WHEN T.T_TYPE = 29
					               AND (CP.DEPOSITIN_ID !=3) THEN A.ID != 3
					          ELSE TRUE
					      END
					GROUP BY T.ID,
					         TI.ID,
					         A.ID
					ORDER BY AT.ID
				]]>

	</sql-query>

	<sql-query name="getAccountRegister">
		<query-param name="accountId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="openingBalance" type="string" />

		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="TRANSACTION_AMOUNT" type="double" />
		<return-scalar column="PAY_TO" type="encryptedstring" />
		<return-scalar column="CHECK_NUMBER" type="encryptedstring" />
		<return-scalar column="ACCOUNT" type="int" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="IS_VOIDED" type="boolean" />
		<return-scalar column="CURRENCY" type="long" />
		<return-scalar column="CURRENCY_FACTOR" type="double" />
		
		<![CDATA[
						SELECT T.CURRENCY        AS CURRENCY,
						       T.CURRENCY_FACTOR AS CURRENCY_FACTOR,
						       T.T_DATE          AS TRANSACTION_DATE,
						       T.T_TYPE		     AS TRANSACTION_TYPE,
						       CASE
						         WHEN T.T_TYPE = 34 THEN CAST (CAST(TDS.CHALANSERIALNUMBER AS TEXT) AS
						                                       BYTEA)
						         ELSE T.NUMBER
						       END               AS TRANSACTION_NUMBER,
						       CASE
						         WHEN T.T_TYPE = 16
						              AND A.ID = 1
						              AND (SELECT A1.NAME
						                   FROM   ACCOUNT A1
						                          LEFT JOIN ACCOUNT_TRANSACTION AT1
						                            ON A1.ID = AT1.ACCOUNT_ID
						                          LEFT JOIN TRANSACTION T1
						                            ON AT1.TRANSACTION_ID = T1.ID
						                   WHERE  A1.COMPANY_ID = :companyId
						                          AND AT1.TRANSACTION_ID = AT.TRANSACTION_ID
						                          AND AT1.ACCOUNT_ID != AT.ACCOUNT_ID
						                          AND T1.T_TYPE = 16
						                   GROUP  BY A1.ID) IN ( :openingBalance ) THEN
						         -1 * SUM(AT.AMOUNT) / T.CURRENCY_FACTOR
						         WHEN A.ACCOUNT_CURRENCY != COM.PRIMARY_CURRENCY THEN
						         SUM(AT.AMOUNT) / T.CURRENCY_FACTOR
						         ELSE SUM(AT.AMOUNT)
						       END               AS TRANSACTION_AMOUNT,
						       CASE
						         WHEN T.T_TYPE = 10 THEN A.NAME
						         ELSE P.NAME
						       END               AS PAY_TO,
						       CASE
						         WHEN BA.BANK_ACCOUNT_TYPE IS NOT NULL THEN CASE
						         WHEN T.T_TYPE = 2 THEN CP.CHECK_NUMBER
						         WHEN T.T_TYPE = 3 THEN CCC.CHECK_NUMBER
						         WHEN T.T_TYPE = 5 THEN CR.CHECK_NUMBER
						         WHEN T.T_TYPE = 11 THEN PB.CHECK_NUMBER
						                                                    END
						         ELSE NULL
						       END               AS CHECK_NUMBER,
						       CASE
						         WHEN T.T_TYPE = 5
						              AND A.ID != 2 THEN 1
						         WHEN T.T_TYPE = 12
						              AND A.ID != 2
						              AND A.ID = RP.ACCOUNT_ID
						              AND (SELECT COUNT(*)
						                   FROM   TRANSACTION_RECEIVE_PAYMENT TRP
						                   WHERE  TRP.DISCOUNT_ID IS NOT NULL
						                          AND TRP.WRITE_OFF_ID IS NOT NULL
						                          AND TRP.TRANSACTION_ID = AT.TRANSACTION_ID) = 0 THEN
						         1
						         WHEN T.T_TYPE = 25
						              AND A.ID != 3 THEN 2
						         WHEN T.T_TYPE = 11
						              AND A.ID != 3
						              AND (SELECT COUNT(TPB.DISCOUNT_ID)
						                   FROM   TRANSACTION_PAYBILL TPB
						                   WHERE  TPB.TRANSACTION_ID = AT.TRANSACTION_ID
						                          AND TPB.DISCOUNT_ID IS NOT NULL) = 0 THEN 2
						         ELSE 3
						       END               AS ACCOUNT,
						       T.MEMO            AS MEMO,
						       T.ID              AS TRANSACTION_ID,
						       CASE
						         WHEN T.SAVE_STATUS = 204 THEN TRUE
						         ELSE FALSE
						       END               AS IS_VOIDED
						FROM   ACCOUNT_TRANSACTION AT
						       LEFT JOIN COMPANY COM
						         ON AT.COMPANY_ID = COM.ID
						       JOIN ACCOUNT A
						         ON A.ID = AT.ACCOUNT_ID
						       LEFT OUTER JOIN BANK_ACCOUNT BA
						         ON BA.ID = A.ID
						       JOIN TRANSACTION T
						         ON T.ID = AT.TRANSACTION_ID
						       LEFT OUTER JOIN PAY_BILL PB
						         ON PB.ID = T.ID
						       LEFT OUTER JOIN VENDOR_PAYMENT VP
						         ON VP.ID = T.ID
						       LEFT OUTER JOIN CASH_SALES CS
						         ON CS.ID = T.ID
						       LEFT OUTER JOIN CASH_PURCHASE CP
						         ON CP.ID = T.ID
						       LEFT OUTER JOIN RECEIVE_PAYMENT RP
						         ON RP.ID = T.ID
						       LEFT OUTER JOIN CUSTOMER_REFUND CR
						         ON CR.ID = T.ID
						       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
						         ON CCC.ID = T.ID
						       LEFT OUTER JOIN WRITE_CHECKS WC
						         ON WC.ID = T.ID
						       LEFT OUTER JOIN TRANSFER_FUND TF
						         ON TF.ID = T.ID
						       LEFT OUTER JOIN TDS_CHALAN_DETAIL TDS
						         ON TDS.ID = T.ID
						       LEFT OUTER JOIN PAYEE P
						         ON P.ID = CS.CUSTOMER_ID
						             OR P.ID = CP.VENDOR_ID
						             OR P.ID = RP.CUSTOMER_ID
						             OR P.ID = CR.CUSTOMER_ID
						             OR P.ID = PB.VENDOR_ID
						             OR P.ID = VP.VENDOR_ID
						             OR P.ID = CCC.VENDOR_ID
						             OR P.ID = WC.CUSTOMER_ID
						             OR P.ID = WC.VENDOR_ID
						             OR P.ID = WC.TAX_AGENCY_ID
						WHERE  A.ID = :accountId
						       AND A.COMPANY_ID = :companyId
						       AND T.T_DATE BETWEEN :startDate AND :endDate
						GROUP  BY T.ID,
						          AT.TRANSACTION_ID,
						          A.ID,
						          AT.ACCOUNT_ID,
						          A.NAME,
						          P.NAME,
						          BA.BANK_ACCOUNT_TYPE,
						          CP.CHECK_NUMBER,
						          CCC.CHECK_NUMBER,
						          CR.CHECK_NUMBER,
						          PB.CHECK_NUMBER,
						          RP.ACCOUNT_ID,
						          COM.ID,
						          TDS.CHALANSERIALNUMBER
						ORDER  BY T.T_DATE,
						          AT.TRANSACTION_ID  
				]]>

	</sql-query>

	<sql-query name="getAccountRegisterOpeningBalance">
		<query-param name="accountId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />
		<query-param name="openingBalance" type="encryptedString" />
		<query-param name="limit" type="int" />

		<return-scalar column="BALANCE" type="double" />
		
		<![CDATA[
								SELECT SUM(A.TRANSACTION_AMOUNT) AS BALANCE
								FROM (SELECT 
						       
						       CASE
						         WHEN T.T_TYPE = 16
						              AND A.ID = 1
						              AND (SELECT A1.NAME
						                   FROM   ACCOUNT A1
						                          LEFT JOIN ACCOUNT_TRANSACTION AT1
						                            ON A1.ID = AT1.ACCOUNT_ID
						                          LEFT JOIN TRANSACTION T1
						                            ON AT1.TRANSACTION_ID = T1.ID
						                   WHERE  A1.COMPANY_ID = :companyId
						                          AND AT1.TRANSACTION_ID = AT.TRANSACTION_ID
						                          AND AT1.ACCOUNT_ID != AT.ACCOUNT_ID
						                          AND T1.T_TYPE = 16
						                   GROUP  BY A1.ID) IN ( :openingBalance ) THEN
						         -1 * SUM(AT.AMOUNT) / T.CURRENCY_FACTOR
						         WHEN A.ACCOUNT_CURRENCY != COM.PRIMARY_CURRENCY THEN
						         SUM(AT.AMOUNT) / T.CURRENCY_FACTOR
						         ELSE SUM(AT.AMOUNT)
						       END               AS TRANSACTION_AMOUNT
						       
						      
						FROM   ACCOUNT_TRANSACTION AT
						       LEFT JOIN COMPANY COM
						         ON AT.COMPANY_ID = COM.ID
						       JOIN ACCOUNT A
						         ON A.ID = AT.ACCOUNT_ID
						      
						       JOIN TRANSACTION T
						         ON T.ID = AT.TRANSACTION_ID
						       
						WHERE  A.ID = :accountId
						       AND A.COMPANY_ID = :companyId
						       AND T.T_DATE BETWEEN :startDate AND :endDate
						GROUP  BY T.ID,
						          AT.TRANSACTION_ID,
						          A.ID,
						          AT.ACCOUNT_ID,	          
						          COM.ID
						          
						ORDER  BY T.T_DATE,
						          AT.TRANSACTION_ID  LIMIT :limit) AS A
				]]>

	</sql-query>

	<sql-query
		name="getTransactionDetailByAccount_ForParticularAccountAndCategory">
		<query-param name="companyId" type="long" />
		<query-param name="categoryId" type="long" />
		<query-param name="categoryType" type="int" />
		<query-param name="accountID" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />


		<return-scalar column="account_name" type="encryptedstring" />
		<return-scalar column="payee_name" type="encryptedstring" />
		<return-scalar column="transaction_id" type="long" />
		<return-scalar column="transaction_type" type="int" />
		<return-scalar column="transaction_date" type="long" />
		<return-scalar column="transaction_number" type="encryptedstring" />
		<return-scalar column="amount" type="double" />
		<return-scalar column="memo" type="encryptedstring" />
		<return-scalar column="c_name" type="encryptedstring" />
			<![CDATA[
						    SELECT A.NAME         AS ACCOUNT_NAME,
							       CASE
							         WHEN T.T_TYPE = 28 THEN NULL
							         WHEN T.T_TYPE = 15 THEN WC.IN_FAVOUR_OF
							         ELSE P.NAME
							       END            AS PAYEE_NAME,
							       T.ID           AS TRANSACTION_ID,
							       T.T_TYPE       AS TRANSACTION_TYPE,
							       T.T_DATE       AS TRANSACTION_DATE,
							       T.NUMBER       AS TRANSACTION_NUMBER,
							       SUM(AT.AMOUNT) AS AMOUNT,
							       CASE
							         WHEN T.T_TYPE = 25
							              THEN NULL
							         ELSE T.MEMO
							       END            AS MEMO,
							       C.FULL_NAME    AS C_NAME
							FROM   ACCOUNT_TRANSACTION AT
							       LEFT OUTER JOIN TRANSACTION T
							         ON AT.TRANSACTION_ID = T.ID
							       LEFT OUTER JOIN LOCATION L
							         ON L.ID = T.LOCATION_ID
							       LEFT OUTER JOIN JOB J
							         ON J.ID = T.JOB_ID
							       LEFT OUTER JOIN ACCOUNTER_CLASS AC
							         ON AC.ID = T.TRANSACTION_ACCOUNTER_CLASS
							       LEFT OUTER JOIN ACCOUNT A
							         ON A.ID = AT.ACCOUNT_ID
							       LEFT OUTER JOIN CASH_PURCHASE CP
							         ON T.ID = CP.ID
							       LEFT OUTER JOIN CASH_SALES CS
							         ON T.ID = CS.ID
							       LEFT OUTER JOIN CREDIT_CARD_CHARGES CCC
							         ON T.ID = CCC.ID
							       LEFT OUTER JOIN CUSTOMER_CREDIT_MEMO CCM
							         ON T.ID = CCM.ID
							       LEFT OUTER JOIN ENTER_BILL EB
							         ON T.ID = EB.ID
							       LEFT OUTER JOIN INVOICE I
							         ON T.ID = I.ID
							       LEFT OUTER JOIN VENDOR_CREDIT_MEMO VCM
							         ON T.ID = VCM.ID
							       LEFT OUTER JOIN WRITE_CHECKS WC
							         ON T.ID = WC.ID
							       LEFT OUTER JOIN RECEIVE_PAYMENT RP
							         ON T.ID = RP.ID
							       LEFT OUTER JOIN PAY_BILL PB
							         ON T.ID = PB.ID
							       LEFT OUTER JOIN VENDOR_PAYMENT VP
							         ON T.ID = VP.ID
							       LEFT OUTER JOIN CUSTOMER_PREPAYMENT CPP
							         ON T.ID = CPP.ID
							       LEFT OUTER JOIN CUSTOMER_REFUND CR
							         ON T.ID = CR.ID
							       LEFT JOIN JOURNAL_ENTRY JE
							         ON T.ID = JE.ID
							       LEFT OUTER JOIN PAYEE P
							         ON P.ID = CP.VENDOR_ID
							             OR P.ID = CCC.VENDOR_ID
							             OR P.ID = EB.VENDOR_ID
							             OR P.ID = VCM.VENDOR_ID
							             OR P.ID = WC.VENDOR_ID
							             OR P.ID = CS.CUSTOMER_ID
							             OR P.ID = CCM.CUSTOMER_ID
							             OR P.ID = WC.CUSTOMER_ID
							             OR P.ID = WC.TAX_AGENCY_ID
							             OR P.ID = I.CUSTOMER_ID
							             OR P.ID = RP.CUSTOMER_ID
							             OR P.ID = PB.VENDOR_ID
							             OR P.ID = VP.VENDOR_ID
							             OR P.ID = CPP.CUSTOMER_ID
							             OR P.ID = CR.CUSTOMER_ID
							       LEFT OUTER JOIN USERS U
							         ON U.ID = CP.EMPLOYEE
							       LEFT OUTER JOIN CLIENT C
							         ON C.ID = U.CLIENT_ID
							WHERE  T.COMPANY_ID = :companyId
							        AND A.ID =:accountID
							       AND T.T_TYPE NOT IN ( 9 )
							       AND T.T_DATE BETWEEN :startDate AND :endDate
							       AND AT.AMOUNT != 0
							       AND CASE WHEN 2=:categoryType THEN L.ID=:categoryId 
								         WHEN 3=:categoryType THEN (J.ID=:categoryId OR T.ID IN (SELECT TI.TRANSACTION_ID
							                                           FROM   TRANSACTION_ITEM TI
							                                           WHERE  TI.JOB_ID = :categoryId))
							                 WHEN 1=:categoryType THEN ( T.TRANSACTION_ACCOUNTER_CLASS = :categoryId
							                               OR T.ID IN (SELECT TI.TRANSACTION_ID
							                                           FROM   TRANSACTION_ITEM TI
							                                           WHERE  TI.TRANS_ITEM_ACCOUNTER_CLASS
							                                                  = :categoryId))
							           END
							GROUP  BY T.ID,
							          PB.ID,
							          A.NAME,
							          P.NAME,
							          C.FULL_NAME,
							          WC.IN_FAVOUR_OF
							ORDER  BY A.NAME    
				 ]]>
	</sql-query>
	<sql-query name="getPurchaseByLocationDetail">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TRANSACTIONDATE" type="long" />
		<return-scalar column="TRANSACTIONTYPE" type="int" />
		<return-scalar column="TRANSACTIONNUMBER" type="encryptedstring" />
		<return-scalar column="ACCOUNTNAME" type="encryptedstring" />
		<return-scalar column="ITEMNAME" type="encryptedstring" />
		<return-scalar column="ITEMTOTAL" type="double" />
		<return-scalar column="LOCATIONNAME" type="encryptedstring" />
		<return-scalar column="TRANSACTIONID" type="long" />
		   <![CDATA[
		   SELECT T.T_DATE                          AS TRANSACTIONDATE,
			       T.T_TYPE                          AS TRANSACTIONTYPE,
			       T.NUMBER                          AS TRANSACTIONNUMBER,
			       A.NAME                            AS ACCOUNTNAME,
			       I.NAME                            AS ITEMNAME,
			       TI.LINE_TOTAL * T.CURRENCY_FACTOR AS ITEMTOTAL,
			       L.LOCATION_NAME                   AS LOCATIONNAME,
			       T.ID                              AS TRANSACTIONID
			FROM   TRANSACTION T
			       LEFT OUTER JOIN TRANSACTION_ITEM TI
			         ON TI.TRANSACTION_ID = T.ID
			       LEFT OUTER JOIN ACCOUNT A
			         ON A.ID = TI.ACCOUNT_ID
			       LEFT OUTER JOIN ITEM I
			         ON I.ID = TI.ITEM_ID
			       LEFT OUTER JOIN LOCATION L
			         ON L.ID = T.LOCATION_ID
			WHERE  T.COMPANY_ID = :companyId
			       AND T.T_DATE BETWEEN :startDate AND :endDate
			       AND T.T_TYPE IN ( 2, 6, 14 )
			       AND T.LOCATION_ID IS NOT NULL
			ORDER  BY L.LOCATION_NAME  
		]]>
	</sql-query>
	<sql-query name="getPurchaseByClassDetail">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="companyId" type="long" />

		<return-scalar column="TRANSACTIONDATE" type="long" />
		<return-scalar column="TRANSACTIONTYPE" type="int" />
		<return-scalar column="TRANSACTIONNUMBER" type="encryptedstring" />
		<return-scalar column="ACCOUNTNAME" type="encryptedstring" />

		<return-scalar column="ITEMNAME" type="encryptedstring" />
		<return-scalar column="ITEMTOTAL" type="double" />
		<return-scalar column="CLASSNAME" type="encryptedstring" />
		<return-scalar column="TRANSACTIONID" type="long" />
		<return-scalar column="PARENT_ID" type="long" />
		<return-scalar column="CLASS_ID" type="long" />
		<return-scalar column="PARENT_COUNT" type="int" />
		<![CDATA[
				SELECT     T.T_DATE      AS TRANSACTIONDATE,
					       T.T_TYPE      AS TRANSACTIONTYPE,
					       T.NUMBER      AS TRANSACTIONNUMBER,
					       A.NAME        AS ACCOUNTNAME,
					       I.NAME        AS ITEMNAME,
					       TI.LINE_TOTAL * T.CURRENCY_FACTOR AS ITEMTOTAL,
					       AC.CLASS_NAME AS CLASSNAME,
					       T.ID          AS TRANSACTIONID,
					       AC.PARENT_ID  AS PARENT_ID,
				           AC.ID         AS CLASS_ID,
				          AC.PARENT_COUNT AS PARENT_COUNT
					FROM   TRANSACTION T
					       LEFT OUTER JOIN TRANSACTION_ITEM TI
					         ON TI.TRANSACTION_ID = T.ID
					       LEFT OUTER JOIN ACCOUNT A
					         ON A.ID = TI.ACCOUNT_ID
					       LEFT OUTER JOIN ITEM I
					         ON I.ID = TI.ITEM_ID
					       LEFT OUTER JOIN ACCOUNTER_CLASS AC
					         ON AC.ID = TI.TRANS_ITEM_ACCOUNTER_CLASS
					WHERE  T.T_TYPE IN ( 2, 6, 14 )
					       AND T.COMPANY_ID = :companyId
					       AND T.T_DATE BETWEEN :startDate AND :endDate
					       AND AC.CLASS_NAME IS NOT NULL
					ORDER  BY AC.PATH DESC  
			]]>
	</sql-query>
	<sql-query name="getPurchaseByLocationSummary">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEMTOTAL" type="double" />
		<return-scalar column="LOCATIONNAME" type="encryptedstring" />
		<![CDATA[
			SELECT SUM(TI.LINE_TOTAL * T.CURRENCY_FACTOR) AS ITEMTOTAL,
			       L.LOCATION_NAME                        AS LOCATIONNAME
			FROM   TRANSACTION T
			       LEFT OUTER JOIN TRANSACTION_ITEM TI
			         ON TI.TRANSACTION_ID = T.ID
			       LEFT OUTER JOIN ACCOUNT A
			         ON A.ID = TI.ACCOUNT_ID
			       LEFT OUTER JOIN ITEM I
			         ON I.ID = TI.ITEM_ID
			       LEFT OUTER JOIN LOCATION L
			         ON L.ID = T.LOCATION_ID
			WHERE  T.T_DATE BETWEEN :startDate AND :endDate
			       AND T.T_TYPE IN ( 2, 6, 14 )
			       AND T.COMPANY_ID = :companyId
			GROUP  BY L.LOCATION_NAME
			ORDER  BY L.LOCATION_NAME  
			]]>
	</sql-query>
	<sql-query name="getPurchaseByLocationDetailForLocation">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="locationORClassName" type="String" />

		<return-scalar column="TRANSACTIONDATE" type="long" />
		<return-scalar column="TRANSACTIONTYPE" type="int" />
		<return-scalar column="TRANSACTIONNUMBER" type="encryptedstring" />
		<return-scalar column="ACCOUNTNAME" type="encryptedstring" />
		<return-scalar column="ITEMNAME" type="encryptedstring" />
		<return-scalar column="ITEMTOTAL" type="double" />
		<return-scalar column="LOCATIONNAME" type="encryptedstring" />
		<return-scalar column="TRANSACTIONID" type="long" />
		
		<![CDATA[
				SELECT T.T_DATE        AS TRANSACTIONDATE,
				       T.T_TYPE        AS TRANSACTIONTYPE,
				       T.NUMBER        AS TRANSACTIONNUMBER,
				       A.NAME          AS ACCOUNTNAME,
				       I.NAME          AS ITEMNAME,
				       TI.LINE_TOTAL * T.CURRENCY_FACTOR   AS ITEMTOTAL,
				       L.LOCATION_NAME AS LOCATIONNAME,
				       T.ID            AS TRANSACTIONID
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				       LEFT OUTER JOIN ITEM I
				         ON I.ID = TI.ITEM_ID
				       LEFT OUTER JOIN LOCATION L
				         ON L.ID = T.LOCATION_ID
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.T_TYPE IN ( 2,6,14 )
				       AND CASE
				             WHEN :locationORClassName IS NULL THEN L.LOCATION_NAME IS NULL
				             ELSE L.LOCATION_NAME = :locationORClassName
				           END
				ORDER  BY L.LOCATION_NAME  
				]]>

	</sql-query>
	<sql-query name="getPurchaseByClassSummary">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEMTOTAL" type="double" />
		<return-scalar column="CLASSNAME" type="encryptedstring" />
		<return-scalar column="PARENT_ID" type="long" />
		<return-scalar column="CLASS_ID" type="long" />
		<return-scalar column="PARENT_COUNT" type="int" />
		
		<![CDATA[
				SELECT SUM(TI.LINE_TOTAL * T.CURRENCY_FACTOR) AS ITEMTOTAL,
				       AC.CLASS_NAME                          AS CLASSNAME,
				       AC.PARENT_ID                           AS PARENT_ID,
				       AC.ID                                  AS CLASS_ID,
				        AC.PARENT_COUNT                    AS PARENT_COUNT
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				       LEFT OUTER JOIN ITEM I
				         ON I.ID = TI.ITEM_ID
				       LEFT OUTER JOIN ACCOUNTER_CLASS AC
				         ON AC.ID = TI.TRANS_ITEM_ACCOUNTER_CLASS
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.T_TYPE IN (2,6,14 )
				       AND AC.ID IS NOT NULL
				GROUP  BY AC.CLASS_NAME,AC.PARENT_ID,AC.ID
				ORDER  BY AC.PATH  
				]]>

	</sql-query>
	<sql-query name="getPurchaseByClassDetailForClass">
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />
		<query-param name="locationORClassName" type="string" />
		<query-param name="companyId" type="long" />
		<query-param name="P_ACCOUNT" type="long" />

		<return-scalar column="TRANSACTIONDATE" type="long" />
		<return-scalar column="TRANSACTIONTYPE" type="int" />
		<return-scalar column="TRANSACTIONNUMBER" type="encryptedstring" />
		<return-scalar column="ACCOUNTNAME" type="encryptedstring" />
		<return-scalar column="ITEMNAME" type="encryptedstring" />
		<return-scalar column="ITEMTOTAL" type="double" />
		<return-scalar column="CLASSNAME" type="encryptedstring" />
		<return-scalar column="TRANSACTIONID" type="long" />
		<return-scalar column="PARENT_ID" type="long" />
		<return-scalar column="PARENT_COUNT" type="int" />

		<![CDATA[
				SELECT T.T_DATE      AS TRANSACTIONDATE,
				       T.T_TYPE      AS TRANSACTIONTYPE,
				       T.NUMBER      AS TRANSACTIONNUMBER,
				       A.NAME        AS ACCOUNTNAME,
				       I.NAME        AS ITEMNAME,
				       TI.LINE_TOTAL * T.CURRENCY_FACTOR AS ITEMTOTAL,
				       AC.CLASS_NAME AS CLASSNAME,
				       T.ID          AS TRANSACTIONID,
				       AC.PARENT_ID  AS PARENT_ID,
				       AC.PARENT_COUNT  AS PARENT_COUNT
				FROM   TRANSACTION T
				       LEFT OUTER JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT OUTER JOIN ACCOUNT A
				         ON A.ID = TI.ACCOUNT_ID
				       LEFT OUTER JOIN ITEM I
				         ON I.ID = TI.ITEM_ID
				       LEFT OUTER JOIN ACCOUNTER_CLASS AC
				         ON AC.ID = TI.TRANS_ITEM_ACCOUNTER_CLASS
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND T.T_TYPE IN ( 2,6,14 )
				       AND CASE
				             WHEN :locationORClassName IS NULL THEN AC.CLASS_NAME IS NULL
				             ELSE AC.CLASS_NAME = :locationORClassName
				           END
				ORDER  BY AC.PATH 
				]]>

	</sql-query>

	<sql-query name="getclassIDByTransactionItem">
		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="CLASS_ID" type="long" />
		<![CDATA[
					SELECT TI.TRANSACTION_ID             AS TRANSACTION_ID,
			        TI.TRANS_ITEM_ACCOUNTER_CLASS AS CLASS_ID
			        FROM   TRANSACTION_ITEM TI
			        WHERE  TI.TRANS_ITEM_ACCOUNTER_CLASS != 0  
		]]>
	</sql-query>

	<sql-query name="getInventoryDetails">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="ITEM_ID" type="long" />
		<return-scalar column="ONHANDQTY" type="double" />
		<return-scalar column="ITEM_NAME" type="encryptedstring" />
		<return-scalar column="COSTVALUTION" type="double" />
		<return-scalar column="SUMQTY" type="double" />
		<return-scalar column="SUMAMOUNTS" type="double" />
		<return-scalar column="TYPE" type="boolean" />
		

		<![CDATA[
		           SELECT 	I.ID                                AS ITEM_ID,
       						I.ON_HAND_QTY_VALUE                 AS ONHANDQTY,
      					    I.NAME                              AS ITEM_NAME,
       						I.SALES_PRICE * I.ON_HAND_QTY_VALUE AS COSTVALUTION,
      					    CASE
       	  						WHEN TRANSACTION_TYPE IN ( 6, 36 ) THEN true
        					 ELSE false
      						 END AS TYPE,
       						SUM(QTY_VALUE) AS SUMQTY,
      						SUM(COST * QTY_VALUE) AS SUMAMOUNTS
					FROM   INVENTORY_HISTORY_VIEW INV
					       LEFT OUTER JOIN ITEM I
					         ON I.ID = INV.ITEM_ID
					WHERE  ITEM_ID = I.ID
					       AND COMPANY = :companyId
					       AND INV.TRANSACTION_DATE BETWEEN :startDate AND :endDate
					GROUP  BY I.ID,
					          TRANSACTION_TYPE IN ( 6, 36 ),
					          TRANSACTION_TYPE IN ( 1,4,8,37 )
					ORDER  BY I.Id  
		]]>
	</sql-query>
	<sql-query name="getPayHeadSummaryReportList">
		<query-param name="companyId" type="long"></query-param>
		<query-param name="startDate" type="long"></query-param>
		<query-param name="endDate" type="long"></query-param>
		<query-param name="payHeadId" type="long"></query-param>
		<return-scalar column="EMPLOYEE_ID" type="long"></return-scalar>
		<return-scalar column="EMPLOYEE_NAME" type="encryptedstring"></return-scalar>
		<return-scalar column="PAYHEAD_ID" type="long"></return-scalar>
		<return-scalar column="PAY_HEAD_NAME" type="encryptedstring"></return-scalar>
		<return-scalar column="PAY_HEAD_AMOUNT" type="double"></return-scalar>
		<![CDATA[
				SELECT E.ID AS EMPLOYEE_ID,
				E.NAME AS EMPLOYEE_NAME,
				PH.ID AS PAYHEAD_ID,
				PH.NAME AS PAY_HEAD_NAME,
				SUM(EPC.RATE) AS PAY_HEAD_AMOUNT
				FROM EMPLOYEE_PAYMENT_DETAILS EPD
				LEFT OUTER JOIN EMPLOYEE_PAYHEAD_COMPONENT EPC ON
				EPC.EMPLOYEE_PAYMENT_DETAILS_ID = EPD.ID
				LEFT OUTER JOIN PAYEE E ON E.ID = EPD.EMPLOYEE	
				LEFT OUTER JOIN PAY_HEAD PH ON PH.ID = EPC.PAY_HEAD
				LEFT OUTER JOIN PAY_RUN PR ON PR.ID = EPD.PAY_RUN_ID
				LEFT OUTER JOIN TRANSACTION T ON T.ID = PR.ID
				WHERE PR.COMPANY_ID=:companyId AND (PR.PAY_PERIOD_ENDDATE
				BETWEEN :startDate AND :endDate OR PAY_PERIOD_STARTDATE 
				BETWEEN :startDate AND :endDate) AND CASE WHEN :payHeadId =0
				THEN TRUE ELSE PH.ID =:payHeadId END AND T.SAVE_STATUS NOT IN
				(204,201,202)
				GROUP BY PH.ID,E.ID
		]]>

	</sql-query>
	<sql-query name="getpayHeadDetailsList">
		<query-param name="companyId" type="long"></query-param>
		<query-param name="startDate" type="long"></query-param>
		<query-param name="endDate" type="long"></query-param>
		<query-param name="payHeadId" type="long"></query-param>
		<query-param name="employee" type="long"></query-param>
		<return-scalar column="PAY_HEAD_AMOUNT" type="double"></return-scalar>
		<return-scalar column="EMPLOYEE_NAME" type="encryptedstring"></return-scalar>
		<return-scalar column="PAY_HEAD_NAME" type="encryptedstring"></return-scalar>
		<return-scalar column="PAY_HEAD_TYPE" type="int"></return-scalar>
		<return-scalar column="NUMBER" type="encryptedstring"></return-scalar>
		<return-scalar column="TRANSACTION_DATE" type="long"></return-scalar>
		<return-scalar column="TRANSACTION_ID" type="long"></return-scalar>
		<![CDATA[
				SELECT E.NAME AS EMPLOYEE_NAME,
					PH.NAME AS PAY_HEAD_NAME,
					PH.TYPE AS PAY_HEAD_TYPE,
					T.NUMBER AS NUMBER,
					T.ID AS TRANSACTION_ID,
					PR.PAY_PERIOD_ENDDATE AS TRANSACTION_DATE,
					EPC.RATE AS PAY_HEAD_AMOUNT
				FROM EMPLOYEE_PAYMENT_DETAILS EPD
					LEFT OUTER JOIN EMPLOYEE_PAYHEAD_COMPONENT EPC ON
				EPC.EMPLOYEE_PAYMENT_DETAILS_ID = EPD.ID
					LEFT OUTER JOIN PAYEE E ON E.ID = EPD.EMPLOYEE	
					LEFT OUTER JOIN PAY_HEAD PH ON PH.ID = EPC.PAY_HEAD
					LEFT OUTER JOIN PAY_RUN PR ON PR.ID = EPD.PAY_RUN_ID
					LEFT OUTER JOIN TRANSACTION T ON T.ID=PR.ID
					WHERE PR.COMPANY_ID=:companyId AND (PR.PAY_PERIOD_ENDDATE
				BETWEEN :startDate AND :endDate OR PAY_PERIOD_STARTDATE 
				BETWEEN :startDate AND :endDate) AND CASE WHEN :payHeadId =0
				THEN TRUE ELSE PH.ID =:payHeadId END
				AND CASE WHEN :employee =0
				THEN TRUE ELSE E.ID =:employee END
				AND T.SAVE_STATUS NOT IN
				(204,201,202)
				GROUP BY PH.ID,E.NAME,EPC.RATE,T.ID,PR.ID
		]]>
	</sql-query>

	<sql-query name="getIncomeByCustomerDetails">
		<query-param name="companyId" type="long" />
		<query-param name="startDate" type="long" />
		<query-param name="endDate" type="long" />

		<return-scalar column="TRANSACTION_ID" type="long" />
		<return-scalar column="TRANSACTION_DATE" type="long" />
		<return-scalar column="TRANSACTION_TYPE" type="int" />
		<return-scalar column="TRANSACTION_NUMBER" type="encryptedstring" />
		<return-scalar column="MEMO" type="encryptedstring" />
		<return-scalar column="PAYEE_NAME" type="encryptedstring" />
		<return-scalar column="JOB_NAME" type="encryptedstring" />
		<return-scalar column="ACCOUNT_NAME" type="encryptedstring" />
		<return-scalar column="DEBIT" type="double" />
		<return-scalar column="CREDIT" type="double" />
		
		<![CDATA[
				SELECT T.ID       AS TRANSACTION_ID,
				       T.T_DATE   AS TRANSACTION_DATE,
				       T.T_TYPE   AS TRANSACTION_TYPE,
				       T.NUMBER   AS TRANSACTION_NUMBER,
				       T.MEMO     AS MEMO,
				       P.NAME     AS PAYEE_NAME,
				       J.JOB_NAME AS JOB_NAME,
				       A.NAME     AS ACCOUNT_NAME,
				       CASE
				         WHEN ( TI.TYPE = 4
				                AND T.T_TYPE IN ( 1, 8 ) )THEN AT.AMOUNT
				         WHEN ( TI.TYPE = 1
				                AND IT.TYPE IN ( 1, 3 ) )THEN AT.AMOUNT
				         WHEN ( IT.TYPE IN ( 2, 4 )
				                AND T.T_TYPE IN ( 1, 8 )
				                AND AT.ACCOUNT_ID = IT.INCOME_ACCOUNT_ID ) THEN AT.AMOUNT
				         ELSE 0
				       END        AS DEBIT,
				       CASE
				         WHEN ( IT.TYPE IN ( 2, 4 )
				                AND ( T.T_TYPE IN ( 1, 8 )
				                      AND AT.ACCOUNT_ID = IT.EXPENSE_ACCOUNT_ID ) ) THEN
				         (SELECT Sum(IP.QTY_VALUE * IP.PURCHASE_COST)
				          FROM
				       INVENTORY_PURCHASE IP
				       JOIN TRANSACTION_ITEM TRI
				         ON TRI.ID = IP.TRANSACTION_ITEM_ID
				         WHERE
				         TRI.ID
				         =
				         T.ID)
				         WHEN ( T.T_TYPE IN ( 15, 6 ) ) THEN AT.AMOUNT
				         ELSE 0
				       END        AS CREDIT
				FROM   ACCOUNT_TRANSACTION AT
				       LEFT JOIN TRANSACTION T
				         ON T.ID = AT.TRANSACTION_ID
				       LEFT JOIN TRANSACTION_ITEM TI
				         ON TI.TRANSACTION_ID = T.ID
				       LEFT JOIN ITEM IT
				         ON IT.ID = TI.ITEM_ID
				       LEFT JOIN ACCOUNT A
				         ON A.ID = AT.ACCOUNT_ID
				       LEFT OUTER JOIN INVOICE I
				         ON I.ID = T.ID
				       LEFT OUTER JOIN CASH_SALES CS
				         ON CS.ID = T.ID
				       LEFT OUTER JOIN ENTER_BILL EB
				         ON EB.ID = T.ID
				       LEFT OUTER JOIN WRITE_CHECKS WC
				         ON WC.ID = T.ID
				       LEFT OUTER JOIN PAYEE P
				         ON P.ID = I.CUSTOMER_ID
				             OR CS.CUSTOMER_ID = P.ID
				             OR EB.VENDOR_ID = P.ID
				             OR WC.CUSTOMER_ID = P.ID
				             OR WC.VENDOR_ID = P.ID
				             OR WC.TAX_AGENCY_ID = P.ID
				       LEFT OUTER JOIN JOB J
				         ON J.ID = T.JOB_ID
				WHERE  T.COMPANY_ID = :companyId
				       AND T.T_TYPE IN ( 1, 6, 8, 15 )
				       AND T.T_DATE BETWEEN :startDate AND :endDate
				       AND A.ID NOT IN (SELECT ACCOUNTS_RECEIVABLE_ID
				                        FROM   CURRENCY C
				                        WHERE  C.COMPANY_ID = T.COMPANY_ID)
				       AND A.ID NOT IN (SELECT ACCOUNTS_PAYABLE_ID
				                        FROM   CURRENCY C
				                        WHERE  C.COMPANY_ID = T.COMPANY_ID)
				       AND A.A_TYPE != 2
				       AND ( CASE
				               WHEN IT.TYPE IN ( 2, 4 ) THEN A.ID != IT.ASSETS_ACCOUNT_ID
				               ELSE TRUE
				             END )
				ORDER  BY T.ID  
				]]>

	</sql-query>
	<!-- <sql-query name="getClosedSalesOrders"> <query-param name="companyId" 
		type="long" /> <query-param name="startDate" type="long" /> <query-param 
		name="endDate" type="long" /> SELECT T.ID , T.T_TYPE , T.T_DATE , P.NAME 
		, (SELECT SUM(TI.QUANTITY) FROM TRANSACTION_ITEM TI WHERE TI.TRANSACTION_ID 
		= T.ID AND TI.TYPE IN (1,4) ) , T.TOTAL FROM TRANSACTION T LEFT OUTER JOIN 
		ESTIMATE SO ON T.ID = SO.ID LEFT OUTER JOIN PAYEE P ON P.ID = SO.CUSTOMER_ID 
		WHERE T.T_TYPE = 7 AND SO.ESTIMATETYPE=6 AND T.STATUS=4 and T.T_DATE BETWEEN 
		:startDate AND :endDate AND T.COMPANY_ID=:companyId ORDER BY P.NAME, T.T_DATE 
		</sql-query> <sql-query name="getCompletedSalesOrders"> <query-param name="companyId" 
		type="long" /> <query-param name="startDate" type="long" /> <query-param 
		name="endDate" type="long" /> SELECT T.ID, T.T_TYPE, T.T_DATE, P.NAME, (SELECT 
		SUM(TI.QUANTITY) FROM TRANSACTION_ITEM TI WHERE TI.TRANSACTION_ID = T.ID 
		AND TI.TYPE IN (1,4) ) , T.TOTAL FROM TRANSACTION T LEFT OUTER JOIN ESTIMATE 
		SO ON T.ID = SO.ID LEFT OUTER JOIN PAYEE P ON P.ID = SO.CUSTOMER_ID WHERE 
		T.T_TYPE = 7 AND SO.ESTIMATETYPE=6 T.STATUS IN (5) AND T.T_DATE BETWEEN :startDate 
		AND :endDate AND T.COMPANY_ID=:companyId ORDER BY P.NAME, T.T_DATE </sql-query> -->

	<!-- <sql-query name="getCanceledSalesOrders"> <query-param name="companyId" 
		type="long" /> <query-param name="startDate" type="long" /> <query-param 
		name="endDate" type="long" /> SELECT T.ID, T.T_TYPE, T.T_DATE, P.NAME, (SELECT 
		SUM(TI.QUANTITY) FROM TRANSACTION_ITEM TI WHERE TI.TRANSACTION_ID = T.ID 
		AND TI.TYPE IN (1,4) ) , T.TOTAL FROM TRANSACTION T LEFT OUTER JOIN ESTIMATE 
		SO ON T.ID = SO.ID LEFT OUTER JOIN PAYEE P ON P.ID = SO.CUSTOMER_ID WHERE 
		T.T_TYPE = 7 AND SO.ESTIMATETYPE=6 AND T.STATUS =1 AND T.T_DATE BETWEEN :startDate 
		AND :endDate AND T.COMPANY_ID=:companyId ORDER BY P.NAME, T.T_DATE </sql-query> -->

	<!-- <sql-query name="getPurchaseOrders"> <query-param name="companyId" 
		type="long" /> <query-param name="startDate" type="long" /> <query-param 
		name="endDate" type="long" /> SELECT T.ID , T.T_TYPE , T.T_DATE , P.NAME 
		, (SELECT SUM(TI.QUANTITY) FROM TRANSACTION_ITEM TI WHERE TI.TRANSACTION_ID 
		= T.ID AND TI.TYPE IN (1,4) ) , T.TOTAL FROM TRANSACTION T LEFT OUTER JOIN 
		PURCHASE_ORDER PO ON T.ID = PO.ID LEFT OUTER JOIN PAYEE P ON P.ID = PO.VENDOR_ID 
		WHERE T.T_TYPE = 22 AND T.T_DATE BETWEEN :startDate AND :endDate AND T.COMPANY_ID=:companyId 
		ORDER BY P.NAME, T.T_DATE </sql-query> -->


	<!-- <sql-query name="getOpenPurchaseOrders"> <query-param name="companyId" 
		type="long" /> <query-param name="startDate" type="long" /> <query-param 
		name="endDate" type="long" /> SELECT T.ID , T.T_TYPE , T.T_DATE , P.NAME 
		, (SELECT SUM(TI.QUANTITY) FROM TRANSACTION_ITEM TI WHERE TI.TRANSACTION_ID 
		= T.ID AND TI.TYPE IN (1,4) ) , T.TOTAL FROM TRANSACTION T LEFT OUTER JOIN 
		PURCHASE_ORDER PO ON T.ID = PO.ID LEFT OUTER JOIN PAYEE P ON P.ID = PO.VENDOR_ID 
		WHERE T.T_TYPE = 22 AND T.STATUS IN (1, 101) AND T.T_DATE BETWEEN :startDate 
		AND :endDate AND T.COMPANY_ID =:companyId ORDER BY P.NAME, T.T_DATE </sql-query> -->

	<!-- <sql-query name="getClosedPurchaseOrders"> <query-param name="companyId" 
		type="long" /> <query-param name="startDate" type="long" /> <query-param 
		name="endDate" type="long" /> SELECT T.ID , T.T_TYPE , T.T_DATE , P.NAME 
		, (SELECT SUM(TI.QUANTITY) FROM TRANSACTION_ITEM TI WHERE TI.TRANSACTION_ID 
		= T.ID AND TI.TYPE IN (1,4) ) , T.TOTAL FROM TRANSACTION T LEFT OUTER JOIN 
		PURCHASE_ORDER PO ON T.ID = PO.ID LEFT OUTER JOIN PAYEE P ON P.ID = PO.VENDOR_ID 
		WHERE T.T_TYPE = 22 AND T.STATUS IN (2) and T.T_DATE BETWEEN :startDate AND 
		:endDate AND T.COMPANY_ID=:companyId ORDER BY P.NAME, T.T_DATE </sql-query> -->



	<!-- <sql-query name="getCompletedPurchaseOrders"> <query-param name="companyId" 
		type="long" /> <query-param name="startDate" type="long" /> <query-param 
		name="endDate" type="long" /> SELECT T.ID , T.T_TYPE , T.T_DATE , P.NAME 
		, (SELECT SUM(TI.QUANTITY) FROM TRANSACTION_ITEM TI WHERE TI.TRANSACTION_ID 
		= T.ID AND TI.TYPE IN (1,4) ) , T.TOTAL FROM TRANSACTION T LEFT OUTER JOIN 
		PURCHASE_ORDER PO ON T.ID = PO.ID LEFT OUTER JOIN PAYEE P ON P.ID = PO.VENDOR_ID 
		WHERE T.T_TYPE = 22 AND T.STATUS IN (102) and T.T_DATE BETWEEN :startDate 
		AND :endDate AND T.COMPANY_ID=:companyId ORDER BY P.NAME, T.T_DATE </sql-query> -->

	<!-- <sql-query name="getCanceledPurchaseOrders"> <query-param name="companyId" 
		type="long" /> <query-param name="startDate" type="long" /> <query-param 
		name="endDate" type="long" /> SELECT T.ID , T.T_TYPE , T.T_DATE , P.NAME 
		, (SELECT SUM(TI.QUANTITY) FROM TRANSACTION_ITEM TI WHERE TI.TRANSACTION_ID 
		= T.ID AND TI.TYPE IN (1,4) ) , T.TOTAL FROM TRANSACTION T LEFT OUTER JOIN 
		PURCHASE_ORDER PO ON T.ID = PO.ID LEFT OUTER JOIN PAYEE P ON P.ID = PO.VENDOR_ID 
		WHERE T.T_TYPE = 22 AND T.STATUS IN (103) and T.T_DATE BETWEEN :startDate 
		AND :endDate AND T.COMPANY_ID=:companyId ORDER BY P.NAME, T.T_DATE </sql-query> -->

	<!-- <sql-query name="getOpenSalesOrders"> <query-param name="companyId" 
		type="long" /> <query-param name="startDate" type="long" /> <query-param 
		name="endDate" type="long" /> <![CDATA[ SELECT T.ID, T.T_TYPE, T.T_DATE, 
		P.NAME, (SELECT SUM(TI.QUANTITY) FROM TRANSACTION_ITEM TI WHERE TI.TRANSACTION_ID 
		= T.ID AND TI.TYPE IN ( 1, 4 )), T.TOTAL FROM TRANSACTION T LEFT OUTER JOIN 
		ESTIMATE SO ON T.ID = SO.ID LEFT OUTER JOIN PAYEE P ON P.ID = SO.CUSTOMER_ID 
		WHERE T.T_TYPE = 7 AND SO.ESTIMATETYPE = 6 AND T.STATUS IN ( 0, 2 ) AND T.T_DATE 
		BETWEEN :startDate AND :endDate AND T.COMPANY_ID = :companyId ORDER BY P.NAME, 
		T.T_DATE ]]> </sql-query> -->
	<!-- ================================================================================================================================== -->
</hibernate-mapping>
